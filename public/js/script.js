/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/icons/icons.js":
/*!*******************************!*\
  !*** ./assets/icons/icons.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Пример подключения иконки\n// import './svg/my-icon.svg';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvaWNvbnMvaWNvbnMuanM/MDdjNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6Ii4vYXNzZXRzL2ljb25zL2ljb25zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8g0J/RgNC40LzQtdGAINC/0L7QtNC60LvRjtGH0LXQvdC40Y8g0LjQutC+0L3QutC4XHJcbi8vIGltcG9ydCAnLi9zdmcvbXktaWNvbi5zdmcnO1xyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/icons/icons.js\n");

/***/ }),

/***/ "./assets/js/script.js":
/*!*****************************!*\
  !*** ./assets/js/script.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var just_validate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! just-validate */ \"./node_modules/just-validate/dist/just-validate.es.js\");\n/**\r\n * Vendors\r\n */\n\n\nwindow.$ = jquery__WEBPACK_IMPORTED_MODULE_0___default.a;\n\n// Пример подключения плагина\n// import pluginName from 'plugin-name';\n\n/**\r\n * Modules\r\n */\n// Пример подключения модуля\n// import myModule from './modules/my-module-function';\n\nvar app = {\n  ready: function ready() {\n    // Пример вызова импортированнывх функций\n    // pluginName();\n\n    // myModule();\n  },\n  load: function load() {},\n  resize: function resize() {},\n  scroll: function scroll() {}\n};\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function () {\n  app.ready();\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on('load', app.load).on('resize', app.resize).on('scroll', app.scroll);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvc2NyaXB0LmpzPzgyMDUiXSwibmFtZXMiOlsid2luZG93IiwiJCIsImFwcCIsInJlYWR5IiwibG9hZCIsInJlc2l6ZSIsInNjcm9sbCIsIm9uIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUN1QjtBQUNrQjtBQUN6Q0EsTUFBTSxDQUFDQyxDQUFDLEdBQUdBLDZDQUFDOztBQUVaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxJQUFNQyxHQUFHLEdBQUc7RUFDUkMsS0FBSyxXQUFBQSxNQUFBLEVBQUc7SUFDSjtJQUNBOztJQUVBO0VBQUEsQ0FFSDtFQUVEQyxJQUFJLFdBQUFBLEtBQUEsRUFBRyxDQUVQLENBQUM7RUFFREMsTUFBTSxXQUFBQSxPQUFBLEVBQUcsQ0FFVCxDQUFDO0VBRURDLE1BQU0sV0FBQUEsT0FBQSxFQUFHLENBRVQ7QUFDSixDQUFDO0FBSURMLDZDQUFDLENBQUMsWUFBTTtFQUNKQyxHQUFHLENBQUNDLEtBQUssRUFBRTtFQUVYRiw2Q0FBQyxDQUFDRCxNQUFNLENBQUMsQ0FDSk8sRUFBRSxDQUFDLE1BQU0sRUFBRUwsR0FBRyxDQUFDRSxJQUFJLENBQUMsQ0FDcEJHLEVBQUUsQ0FBQyxRQUFRLEVBQUVMLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQ3hCRSxFQUFFLENBQUMsUUFBUSxFQUFFTCxHQUFHLENBQUNJLE1BQU0sQ0FBQztBQUNqQyxDQUFDLENBQUMiLCJmaWxlIjoiLi9hc3NldHMvanMvc2NyaXB0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFZlbmRvcnNcclxuICovXHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCBKdXN0VmFsaWRhdGUgZnJvbSAnanVzdC12YWxpZGF0ZSc7XHJcbndpbmRvdy4kID0gJDtcclxuXHJcbi8vINCf0YDQuNC80LXRgCDQv9C+0LTQutC70Y7Rh9C10L3QuNGPINC/0LvQsNCz0LjQvdCwXHJcbi8vIGltcG9ydCBwbHVnaW5OYW1lIGZyb20gJ3BsdWdpbi1uYW1lJztcclxuXHJcbi8qKlxyXG4gKiBNb2R1bGVzXHJcbiAqL1xyXG4vLyDQn9GA0LjQvNC10YAg0L/QvtC00LrQu9GO0YfQtdC90LjRjyDQvNC+0LTRg9C70Y9cclxuLy8gaW1wb3J0IG15TW9kdWxlIGZyb20gJy4vbW9kdWxlcy9teS1tb2R1bGUtZnVuY3Rpb24nO1xyXG5cclxuXHJcbmNvbnN0IGFwcCA9IHtcclxuICAgIHJlYWR5KCkge1xyXG4gICAgICAgIC8vINCf0YDQuNC80LXRgCDQstGL0LfQvtCy0LAg0LjQvNC/0L7RgNGC0LjRgNC+0LLQsNC90L3Ri9Cy0YUg0YTRg9C90LrRhtC40LlcclxuICAgICAgICAvLyBwbHVnaW5OYW1lKCk7XHJcblxyXG4gICAgICAgIC8vIG15TW9kdWxlKCk7XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICBsb2FkKCkge1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgcmVzaXplKCkge1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgc2Nyb2xsKCkge1xyXG5cclxuICAgIH0sXHJcbn07XHJcblxyXG5cclxuXHJcbiQoKCkgPT4ge1xyXG4gICAgYXBwLnJlYWR5KCk7XHJcblxyXG4gICAgJCh3aW5kb3cpXHJcbiAgICAgICAgLm9uKCdsb2FkJywgYXBwLmxvYWQpXHJcbiAgICAgICAgLm9uKCdyZXNpemUnLCBhcHAucmVzaXplKVxyXG4gICAgICAgIC5vbignc2Nyb2xsJywgYXBwLnNjcm9sbCk7XHJcbn0pO1xyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/script.js\n");

/***/ }),

/***/ "./assets/scss/style.scss":
/*!********************************!*\
  !*** ./assets/scss/style.scss ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvc2Nzcy9zdHlsZS5zY3NzPzE5NzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9hc3NldHMvc2Nzcy9zdHlsZS5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/scss/style.scss\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/*!\n * jQuery JavaScript Library v3.6.4\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-03-08T15:28Z\n */\n(function (global, factory) {\n  \"use strict\";\n\n  if (( false ? undefined : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require(\"jquery\")(window);\n    // See ticket trac-14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error(\"jQuery requires a window with a document\");\n      }\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  }\n\n  // Pass this if window is not defined yet\n})(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n  // enough that all such attempts are guarded in a try block.\n  \"use strict\";\n\n  var arr = [];\n  var getProto = Object.getPrototypeOf;\n  var _slice = arr.slice;\n  var flat = arr.flat ? function (array) {\n    return arr.flat.call(array);\n  } : function (array) {\n    return arr.concat.apply([], array);\n  };\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var fnToString = hasOwn.toString;\n  var ObjectFunctionString = fnToString.call(Object);\n  var support = {};\n  var isFunction = function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n    // We don't want to classify *any* DOM node as a function.\n    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n    // Plus for old WebKit, typeof returns \"function\" for HTML collections\n    // (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n    return typeof obj === \"function\" && typeof obj.nodeType !== \"number\" && typeof obj.item !== \"function\";\n  };\n  var isWindow = function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n  var document = window.document;\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n      val,\n      script = doc.createElement(\"script\");\n    script.text = code;\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don't support the \"nonce\" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n  function toType(obj) {\n    if (obj == null) {\n      return obj + \"\";\n    }\n\n    // Support: Android <=2.3 only (functionish RegExp)\n    return _typeof(obj) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : _typeof(obj);\n  }\n  /* global Symbol */\n  // Defining this global in .eslintrc.json would create a danger of using the global\n  // unguarded in another place, it seems safer to define global only for this module\n\n  var version = \"3.6.4\",\n    // Define a local copy of jQuery\n    jQuery = function jQuery(selector, context) {\n      // The jQuery object is actually just the init constructor 'enhanced'\n      // Need init if jQuery is called (just allow error to be thrown if not included)\n      return new jQuery.fn.init(selector, context);\n    };\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function toArray() {\n      return _slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function get(num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return _slice.call(this);\n      }\n\n      // Return just the one element from the set\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function pushStack(elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems);\n\n      // Add the old object onto the stack (as a reference)\n      ret.prevObject = this;\n\n      // Return the newly-formed element set\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function each(callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function map(callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(_slice.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    even: function even() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return (i + 1) % 2;\n      }));\n    },\n    odd: function odd() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return i % 2;\n      }));\n    },\n    eq: function eq(i) {\n      var len = this.length,\n        j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array's method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n      name,\n      src,\n      copy,\n      copyIsArray,\n      clone,\n      target = arguments[0] || {},\n      i = 1,\n      length = arguments.length,\n      deep = false;\n\n    // Handle a deep copy situation\n    if (typeof target === \"boolean\") {\n      deep = target;\n\n      // Skip the boolean and the target\n      target = arguments[i] || {};\n      i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if (_typeof(target) !== \"object\" && !isFunction(target)) {\n      target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if (i === length) {\n      target = this;\n      i--;\n    }\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name];\n\n          // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n          if (name === \"__proto__\" || target === copy) {\n            continue;\n          }\n\n          // Recurse if we're merging plain objects or arrays\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name];\n\n            // Ensure proper type for the source value\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n            copyIsArray = false;\n\n            // Never move original objects, clone them\n            target[name] = jQuery.extend(deep, clone, copy);\n\n            // Don't bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    }\n\n    // Return the modified object\n    return target;\n  };\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function error(msg) {\n      throw new Error(msg);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(obj) {\n      var proto, Ctor;\n\n      // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n      if (!obj || toString.call(obj) !== \"[object Object]\") {\n        return false;\n      }\n      proto = getProto(obj);\n\n      // Objects with no prototype (e.g., `Object.create( null )`) are plain\n      if (!proto) {\n        return true;\n      }\n\n      // Objects with prototype are plain iff they were constructed by a global Object function\n      Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n      return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function isEmptyObject(obj) {\n      var name;\n      for (name in obj) {\n        return false;\n      }\n      return true;\n    },\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function globalEval(code, options, doc) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      }, doc);\n    },\n    each: function each(obj, callback) {\n      var length,\n        i = 0;\n      if (isArrayLike(obj)) {\n        length = obj.length;\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n      return obj;\n    },\n    // results is for internal usage only\n    makeArray: function makeArray(arr, results) {\n      var ret = results || [];\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n      return ret;\n    },\n    inArray: function inArray(elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function merge(first, second) {\n      var len = +second.length,\n        j = 0,\n        i = first.length;\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n      first.length = i;\n      return first;\n    },\n    grep: function grep(elems, callback, invert) {\n      var callbackInverse,\n        matches = [],\n        i = 0,\n        length = elems.length,\n        callbackExpect = !invert;\n\n      // Go through the array, only saving the items\n      // that pass the validator function\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function map(elems, callback, arg) {\n      var length,\n        value,\n        i = 0,\n        ret = [];\n\n      // Go through the array, translating each of the items to their new values\n      if (isArrayLike(elems)) {\n        length = elems.length;\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n\n        // Go through every key on the object,\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      }\n\n      // Flatten any nested arrays\n      return flat(ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n  if (typeof Symbol === \"function\") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  }\n\n  // Populate the class2type map\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (_i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn't used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && \"length\" in obj && obj.length,\n      type = toType(obj);\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n    return type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n  }\n  var Sizzle =\n  /*!\n   * Sizzle CSS Selector Engine v2.3.10\n   * https://sizzlejs.com/\n   *\n   * Copyright JS Foundation and other contributors\n   * Released under the MIT license\n   * https://js.foundation/\n   *\n   * Date: 2023-02-14\n   */\n  function (window) {\n    var i,\n      support,\n      Expr,\n      getText,\n      isXML,\n      tokenize,\n      compile,\n      select,\n      outermostContext,\n      sortInput,\n      hasDuplicate,\n      // Local document vars\n      setDocument,\n      document,\n      docElem,\n      documentIsHTML,\n      rbuggyQSA,\n      rbuggyMatches,\n      matches,\n      contains,\n      // Instance-specific data\n      expando = \"sizzle\" + 1 * new Date(),\n      preferredDoc = window.document,\n      dirruns = 0,\n      done = 0,\n      classCache = createCache(),\n      tokenCache = createCache(),\n      compilerCache = createCache(),\n      nonnativeSelectorCache = createCache(),\n      sortOrder = function sortOrder(a, b) {\n        if (a === b) {\n          hasDuplicate = true;\n        }\n        return 0;\n      },\n      // Instance methods\n      hasOwn = {}.hasOwnProperty,\n      arr = [],\n      pop = arr.pop,\n      pushNative = arr.push,\n      push = arr.push,\n      slice = arr.slice,\n      // Use a stripped-down indexOf as it's faster than native\n      // https://jsperf.com/thor-indexof-vs-for/5\n      indexOf = function indexOf(list, elem) {\n        var i = 0,\n          len = list.length;\n        for (; i < len; i++) {\n          if (list[i] === elem) {\n            return i;\n          }\n        }\n        return -1;\n      },\n      booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" + \"ismap|loop|multiple|open|readonly|required|scoped\",\n      // Regular expressions\n\n      // http://www.w3.org/TR/css3-selectors/#whitespace\n      whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n      // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n      identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n      // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n      attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n      // Operator (capture 2)\n      \"*([*^$|!~]?=)\" + whitespace +\n      // \"Attribute values must be CSS identifiers [capture 5]\n      // or strings [capture 3 or capture 4]\"\n      \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n      pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n      // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n      // 1. quoted (capture 3; capture 4 or capture 5)\n      \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n      // 2. simple (capture 6)\n      \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n      // 3. anything else (capture 2)\n      \".*\" + \")\\\\)|)\",\n      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n      rwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n      rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n      rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n      rleadingCombinator = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n      rdescend = new RegExp(whitespace + \"|>\"),\n      rpseudo = new RegExp(pseudos),\n      ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n      matchExpr = {\n        \"ID\": new RegExp(\"^#(\" + identifier + \")\"),\n        \"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\n        \"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\n        \"ATTR\": new RegExp(\"^\" + attributes),\n        \"PSEUDO\": new RegExp(\"^\" + pseudos),\n        \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n        \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n      },\n      rhtml = /HTML$/i,\n      rinputs = /^(?:input|select|textarea|button)$/i,\n      rheader = /^h\\d$/i,\n      rnative = /^[^{]+\\{\\s*\\[native \\w/,\n      // Easily-parseable/retrievable ID or TAG or CLASS selectors\n      rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n      rsibling = /[+~]/,\n      // CSS escapes\n      // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n      runescape = new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\"),\n      funescape = function funescape(escape, nonHex) {\n        var high = \"0x\" + escape.slice(1) - 0x10000;\n        return nonHex ?\n        // Strip the backslash prefix from a non-hex escape sequence\n        nonHex :\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n      },\n      // CSS string/identifier serialization\n      // https://drafts.csswg.org/cssom/#common-serializing-idioms\n      rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n      fcssescape = function fcssescape(ch, asCodePoint) {\n        if (asCodePoint) {\n          // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n          if (ch === \"\\0\") {\n            return \"\\uFFFD\";\n          }\n\n          // Control characters and (dependent upon position) numbers get escaped as code points\n          return ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\n        }\n\n        // Other potentially-special ASCII characters get backslash-escaped\n        return \"\\\\\" + ch;\n      },\n      // Used for iframes\n      // See setDocument()\n      // Removing the function wrapper causes a \"Permission Denied\"\n      // error in IE\n      unloadHandler = function unloadHandler() {\n        setDocument();\n      },\n      inDisabledFieldset = addCombinator(function (elem) {\n        return elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n      }, {\n        dir: \"parentNode\",\n        next: \"legend\"\n      });\n\n    // Optimize for push.apply( _, NodeList )\n    try {\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\n\n      // Support: Android<4.0\n      // Detect silently failing push.apply\n      // eslint-disable-next-line no-unused-expressions\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: arr.length ?\n        // Leverage slice if possible\n        function (target, els) {\n          pushNative.apply(target, slice.call(els));\n        } :\n        // Support: IE<9\n        // Otherwise append directly\n        function (target, els) {\n          var j = target.length,\n            i = 0;\n\n          // Can't trust NodeList.length\n          while (target[j++] = els[i++]) {}\n          target.length = j - 1;\n        }\n      };\n    }\n    function Sizzle(selector, context, results, seed) {\n      var m,\n        i,\n        elem,\n        nid,\n        match,\n        groups,\n        newSelector,\n        newContext = context && context.ownerDocument,\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n      results = results || [];\n\n      // Return early from calls with invalid selector or context\n      if (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      }\n\n      // Try to shortcut find operations (as opposed to filters) in HTML documents\n      if (!seed) {\n        setDocument(context);\n        context = context || document;\n        if (documentIsHTML) {\n          // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n          // (excepting DocumentFragment context, where the methods don't exist)\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n            // ID selector\n            if (m = match[1]) {\n              // Document context\n              if (nodeType === 9) {\n                if (elem = context.getElementById(m)) {\n                  // Support: IE, Opera, Webkit\n                  // TODO: identify versions\n                  // getElementById can match elements by name instead of ID\n                  if (elem.id === m) {\n                    results.push(elem);\n                    return results;\n                  }\n                } else {\n                  return results;\n                }\n\n                // Element context\n              } else {\n                // Support: IE, Opera, Webkit\n                // TODO: identify versions\n                // getElementById can match elements by name instead of ID\n                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              }\n\n              // Type selector\n            } else if (match[2]) {\n              push.apply(results, context.getElementsByTagName(selector));\n              return results;\n\n              // Class selector\n            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n              push.apply(results, context.getElementsByClassName(m));\n              return results;\n            }\n          }\n\n          // Take advantage of querySelectorAll\n          if (support.qsa && !nonnativeSelectorCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (\n          // Support: IE 8 only\n          // Exclude object elements\n          nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\")) {\n            newSelector = selector;\n            newContext = context;\n\n            // qSA considers elements outside a scoping root when evaluating child or\n            // descendant combinators, which is not what we want.\n            // In such cases, we work around the behavior by prefixing every selector in the\n            // list with an ID selector referencing the scope context.\n            // The technique has to be used as well when a leading combinator is used\n            // as such selectors are not recognized by querySelectorAll.\n            // Thanks to Andrew Dupont for this technique.\n            if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {\n              // Expand context for sibling selectors\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n\n              // We can use :scope instead of the ID hack if the browser\n              // supports it & if we're not changing the context.\n              if (newContext !== context || !support.scope) {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute(\"id\")) {\n                  nid = nid.replace(rcssescape, fcssescape);\n                } else {\n                  context.setAttribute(\"id\", nid = expando);\n                }\n              }\n\n              // Prefix every selector in the list\n              groups = tokenize(selector);\n              i = groups.length;\n              while (i--) {\n                groups[i] = (nid ? \"#\" + nid : \":scope\") + \" \" + toSelector(groups[i]);\n              }\n              newSelector = groups.join(\",\");\n            }\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {\n              nonnativeSelectorCache(selector, true);\n            } finally {\n              if (nid === expando) {\n                context.removeAttribute(\"id\");\n              }\n            }\n          }\n        }\n      }\n\n      // All others\n      return select(selector.replace(rtrim, \"$1\"), context, results, seed);\n    }\n\n    /**\n     * Create key-value caches of limited size\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n    function createCache() {\n      var keys = [];\n      function cache(key, value) {\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key + \" \") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n        return cache[key + \" \"] = value;\n      }\n      return cache;\n    }\n\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created element and returns a boolean result\n     */\n    function assert(fn) {\n      var el = document.createElement(\"fieldset\");\n      try {\n        return !!fn(el);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        }\n\n        // release memory in IE\n        el = null;\n      }\n    }\n\n    /**\n     * Adds the same handler for all of the specified attrs\n     * @param {String} attrs Pipe-separated list of attributes\n     * @param {Function} handler The method that will be applied\n     */\n    function addHandle(attrs, handler) {\n      var arr = attrs.split(\"|\"),\n        i = arr.length;\n      while (i--) {\n        Expr.attrHandle[arr[i]] = handler;\n      }\n    }\n\n    /**\n     * Checks document order of two siblings\n     * @param {Element} a\n     * @param {Element} b\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n     */\n    function siblingCheck(a, b) {\n      var cur = b && a,\n        diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;\n\n      // Use IE sourceIndex if available on both nodes\n      if (diff) {\n        return diff;\n      }\n\n      // Check if b follows a\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n      return a ? 1 : -1;\n    }\n\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === \"input\" && elem.type === type;\n      };\n    }\n\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === \"input\" || name === \"button\") && elem.type === type;\n      };\n    }\n\n    /**\n     * Returns a function to use in pseudos for :enabled/:disabled\n     * @param {Boolean} disabled true for :disabled; false for :enabled\n     */\n    function createDisabledPseudo(disabled) {\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n      return function (elem) {\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if (\"form\" in elem) {\n          // Check for inherited disabledness on relevant non-disabled elements:\n          // * listed form-associated elements in a disabled fieldset\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n          // * option elements in a disabled optgroup\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n          // All such elements have a \"form\" property.\n          if (elem.parentNode && elem.disabled === false) {\n            // Option elements defer to a parent optgroup if present\n            if (\"label\" in elem) {\n              if (\"label\" in elem.parentNode) {\n                return elem.parentNode.disabled === disabled;\n              } else {\n                return elem.disabled === disabled;\n              }\n            }\n\n            // Support: IE 6 - 11\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n            return elem.isDisabled === disabled ||\n            // Where there is no isDisabled, check manually\n            /* jshint -W018 */\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n          }\n          return elem.disabled === disabled;\n\n          // Try to winnow out elements that can't be disabled before trusting the disabled property.\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n          // even exist on them, let alone have a boolean value.\n        } else if (\"label\" in elem) {\n          return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n      };\n    }\n\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n            matchIndexes = fn([], seed.length, argument),\n            i = matchIndexes.length;\n\n          // Match elements found at the specified indexes\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n\n    /**\n     * Checks a node for validity as a Sizzle context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n    }\n\n    // Expose support vars for convenience\n    support = Sizzle.support = {};\n\n    /**\n     * Detects XML nodes\n     * @param {Element|Object} elem An element or a document\n     * @returns {Boolean} True iff elem is a non-HTML XML node\n     */\n    isXML = Sizzle.isXML = function (elem) {\n      var namespace = elem && elem.namespaceURI,\n        docElem = elem && (elem.ownerDocument || elem).documentElement;\n\n      // Support: IE <=8\n      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n      // https://bugs.jquery.com/ticket/4833\n      return !rhtml.test(namespace || docElem && docElem.nodeName || \"HTML\");\n    };\n\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n    setDocument = Sizzle.setDocument = function (node) {\n      var hasCompare,\n        subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n      // Return early if doc is invalid or already selected\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      }\n\n      // Update global variables\n      document = doc;\n      docElem = document.documentElement;\n      documentIsHTML = !isXML(document);\n\n      // Support: IE 9 - 11+, Edge 12 - 18+\n      // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n        // Support: IE 11, Edge\n        if (subWindow.addEventListener) {\n          subWindow.addEventListener(\"unload\", unloadHandler, false);\n\n          // Support: IE 9 - 10 only\n        } else if (subWindow.attachEvent) {\n          subWindow.attachEvent(\"onunload\", unloadHandler);\n        }\n      }\n\n      // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n      // Safari 4 - 5 only, Opera <=11.6 - 12.x only\n      // IE/Edge & older browsers don't support the :scope pseudo-class.\n      // Support: Safari 6.0 only\n      // Safari 6.0 supports :scope but it's an alias of :root there.\n      support.scope = assert(function (el) {\n        docElem.appendChild(el).appendChild(document.createElement(\"div\"));\n        return typeof el.querySelectorAll !== \"undefined\" && !el.querySelectorAll(\":scope fieldset div\").length;\n      });\n\n      // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n      // Make sure the the `:has()` argument is parsed unforgivingly.\n      // We include `*` in the test to detect buggy implementations that are\n      // _selectively_ forgiving (specifically when the list includes at least\n      // one valid selector).\n      // Note that we treat complete lack of support for `:has()` as if it were\n      // spec-compliant support, which is fine because use of `:has()` in such\n      // environments will fail in the qSA path and fall back to jQuery traversal\n      // anyway.\n      support.cssHas = assert(function () {\n        try {\n          document.querySelector(\":has(*,:jqfake)\");\n          return false;\n        } catch (e) {\n          return true;\n        }\n      });\n\n      /* Attributes\n      ---------------------------------------------------------------------- */\n\n      // Support: IE<8\n      // Verify that getAttribute really returns attributes and not properties\n      // (excepting IE8 booleans)\n      support.attributes = assert(function (el) {\n        el.className = \"i\";\n        return !el.getAttribute(\"className\");\n      });\n\n      /* getElement(s)By*\n      ---------------------------------------------------------------------- */\n\n      // Check if getElementsByTagName(\"*\") returns only elements\n      support.getElementsByTagName = assert(function (el) {\n        el.appendChild(document.createComment(\"\"));\n        return !el.getElementsByTagName(\"*\").length;\n      });\n\n      // Support: IE<9\n      support.getElementsByClassName = rnative.test(document.getElementsByClassName);\n\n      // Support: IE<10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don't pick up programmatically-set names,\n      // so use a roundabout getElementsByName test\n      support.getById = assert(function (el) {\n        docElem.appendChild(el).id = expando;\n        return !document.getElementsByName || !document.getElementsByName(expando).length;\n      });\n\n      // ID filter and find\n      if (support.getById) {\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute(\"id\") === attrId;\n          };\n        };\n        Expr.find[\"ID\"] = function (id, context) {\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n            var elem = context.getElementById(id);\n            return elem ? [elem] : [];\n          }\n        };\n      } else {\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n            return node && node.value === attrId;\n          };\n        };\n\n        // Support: IE 6 - 7 only\n        // getElementById is not reliable as a find shortcut\n        Expr.find[\"ID\"] = function (id, context) {\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n            var node,\n              i,\n              elems,\n              elem = context.getElementById(id);\n            if (elem) {\n              // Verify the id attribute\n              node = elem.getAttributeNode(\"id\");\n              if (node && node.value === id) {\n                return [elem];\n              }\n\n              // Fall back on getElementsByName\n              elems = context.getElementsByName(id);\n              i = 0;\n              while (elem = elems[i++]) {\n                node = elem.getAttributeNode(\"id\");\n                if (node && node.value === id) {\n                  return [elem];\n                }\n              }\n            }\n            return [];\n          }\n        };\n      }\n\n      // Tag\n      Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n        if (typeof context.getElementsByTagName !== \"undefined\") {\n          return context.getElementsByTagName(tag);\n\n          // DocumentFragment nodes don't have gEBTN\n        } else if (support.qsa) {\n          return context.querySelectorAll(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n          tmp = [],\n          i = 0,\n          // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n          results = context.getElementsByTagName(tag);\n\n        // Filter out possible comments\n        if (tag === \"*\") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n          return tmp;\n        }\n        return results;\n      };\n\n      // Class\n      Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n        if (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n\n      // QSA and matchesSelector support\n\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n      rbuggyMatches = [];\n\n      // qSa(:focus) reports false when true (Chrome 21)\n      // We allow this because of a bug in IE8/9 that throws an error\n      // whenever `document.activeElement` is accessed on an iframe\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\n      // See https://bugs.jquery.com/ticket/13378\n      rbuggyQSA = [];\n      if (support.qsa = rnative.test(document.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (el) {\n          var input;\n\n          // Select is set to empty string on purpose\n          // This is to test IE's treatment of not explicitly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // https://bugs.jquery.com/ticket/12359\n          docElem.appendChild(el).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" + \"<option selected=''></option></select>\";\n\n          // Support: IE8, Opera 11-12.16\n          // Nothing should be selected when empty strings follow ^= or $= or *=\n          // The test attribute must be unknown in Opera but \"safe\" for WinRT\n          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n          if (el.querySelectorAll(\"[msallowcapture^='']\").length) {\n            rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n          }\n\n          // Support: IE8\n          // Boolean attributes and \"value\" are not treated correctly\n          if (!el.querySelectorAll(\"[selected]\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n          }\n\n          // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n          if (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n            rbuggyQSA.push(\"~=\");\n          }\n\n          // Support: IE 11+, Edge 15 - 18+\n          // IE 11/Edge don't find elements on a `[name='']` query in some cases.\n          // Adding a temporary attribute to the document before the selection works\n          // around the issue.\n          // Interestingly, IE 10 & older don't seem to have the issue.\n          input = document.createElement(\"input\");\n          input.setAttribute(\"name\", \"\");\n          el.appendChild(input);\n          if (!el.querySelectorAll(\"[name='']\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" + whitespace + \"*(?:''|\\\"\\\")\");\n          }\n\n          // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n          if (!el.querySelectorAll(\":checked\").length) {\n            rbuggyQSA.push(\":checked\");\n          }\n\n          // Support: Safari 8+, iOS 8+\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\n          // In-page `selector#id sibling-combinator selector` fails\n          if (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n            rbuggyQSA.push(\".#.+[+~]\");\n          }\n\n          // Support: Firefox <=3.6 - 5 only\n          // Old Firefox doesn't throw on a badly-escaped identifier.\n          el.querySelectorAll(\"\\\\\\f\");\n          rbuggyQSA.push(\"[\\\\r\\\\n\\\\f]\");\n        });\n        assert(function (el) {\n          el.innerHTML = \"<a href='' disabled='disabled'></a>\" + \"<select disabled='disabled'><option/></select>\";\n\n          // Support: Windows 8 Native Apps\n          // The type and name attributes are restricted during .innerHTML assignment\n          var input = document.createElement(\"input\");\n          input.setAttribute(\"type\", \"hidden\");\n          el.appendChild(input).setAttribute(\"name\", \"D\");\n\n          // Support: IE8\n          // Enforce case-sensitivity of name attribute\n          if (el.querySelectorAll(\"[name=d]\").length) {\n            rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n          }\n\n          // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n          if (el.querySelectorAll(\":enabled\").length !== 2) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          }\n\n          // Support: IE9-11+\n          // IE's :disabled selector does not pick up the children of disabled fieldsets\n          docElem.appendChild(el).disabled = true;\n          if (el.querySelectorAll(\":disabled\").length !== 2) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          }\n\n          // Support: Opera 10 - 11 only\n          // Opera 10-11 does not throw on post-comma invalid pseudos\n          el.querySelectorAll(\"*,:x\");\n          rbuggyQSA.push(\",.*:\");\n        });\n      }\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (el) {\n          // Check to see if it's possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(el, \"*\");\n\n          // This should fail with an exception\n          // Gecko does not error, returns false instead\n          matches.call(el, \"[s!='']:x\");\n          rbuggyMatches.push(\"!=\", pseudos);\n        });\n      }\n      if (!support.cssHas) {\n        // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n        // Our regular `try-catch` mechanism fails to detect natively-unsupported\n        // pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\n        // in browsers that parse the `:has()` argument as a forgiving selector list.\n        // https://drafts.csswg.org/selectors/#relational now requires the argument\n        // to be parsed unforgivingly, but browsers have not yet fully adjusted.\n        rbuggyQSA.push(\":has\");\n      }\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n\n      /* Contains\n      ---------------------------------------------------------------------- */\n      hasCompare = rnative.test(docElem.compareDocumentPosition);\n\n      // Element contains another\n      // Purposefully self-exclusive\n      // As in, an element does not contain itself\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n        // Support: IE <9 only\n        // IE doesn't have `contains` on `document` so we need to check for\n        // `documentElement` presence.\n        // We need to fall back to `a` when `documentElement` is missing\n        // as `ownerDocument` of elements within `<template/>` may have\n        // a null one - a default behavior of all modern browsers.\n        var adown = a.nodeType === 9 && a.documentElement || a,\n          bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n\n      /* Sorting\n      ---------------------------------------------------------------------- */\n\n      // Document order sorting\n      sortOrder = hasCompare ? function (a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        // Sort on method existence if only one input has compareDocumentPosition\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        if (compare) {\n          return compare;\n        }\n\n        // Calculate position if both inputs belong to the same document\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\n        // Otherwise we know they are disconnected\n        1;\n\n        // Disconnected nodes\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {\n            return -1;\n          }\n\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {\n            return 1;\n          }\n\n          // Maintain original order\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n        }\n        return compare & 4 ? -1 : 1;\n      } : function (a, b) {\n        // Exit early if the nodes are identical\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n        var cur,\n          i = 0,\n          aup = a.parentNode,\n          bup = b.parentNode,\n          ap = [a],\n          bp = [b];\n\n        // Parentless nodes are either documents or disconnected\n        if (!aup || !bup) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          /* eslint-disable eqeqeq */\n          return a == document ? -1 : b == document ? 1 : /* eslint-enable eqeqeq */\n          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\n          // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        }\n\n        // Otherwise we need full lists of their ancestors for comparison\n        cur = a;\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n        cur = b;\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        }\n\n        // Walk down the tree looking for a discrepancy\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n        return i ?\n        // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) :\n        // Otherwise nodes in our document sort first\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        /* eslint-disable eqeqeq */\n        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 : /* eslint-enable eqeqeq */\n        0;\n      };\n      return document;\n    };\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n    Sizzle.matchesSelector = function (elem, expr) {\n      setDocument(elem);\n      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr);\n\n          // IE 9's matchesSelector returns false on disconnected nodes\n          if (ret || support.disconnectedMatch ||\n          // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {\n          nonnativeSelectorCache(expr, true);\n        }\n      }\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((context.ownerDocument || context) != document) {\n        setDocument(context);\n      }\n      return contains(context, elem);\n    };\n    Sizzle.attr = function (elem, name) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((elem.ownerDocument || elem) != document) {\n        setDocument(elem);\n      }\n      var fn = Expr.attrHandle[name.toLowerCase()],\n        // Don't get fooled by Object.prototype properties (jQuery #13807)\n        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    };\n    Sizzle.escape = function (sel) {\n      return (sel + \"\").replace(rcssescape, fcssescape);\n    };\n    Sizzle.error = function (msg) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n    };\n\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n      // Unless we *know* we can detect duplicates, assume their presence\n      hasDuplicate = !support.detectDuplicates;\n      sortInput = !support.sortStable && results.slice(0);\n      results.sort(sortOrder);\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      }\n\n      // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n      sortInput = null;\n      return results;\n    };\n\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n    getText = Sizzle.getText = function (elem) {\n      var node,\n        ret = \"\",\n        i = 0,\n        nodeType = elem.nodeType;\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (jQuery #11153)\n        if (typeof elem.textContent === \"string\") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      }\n\n      // Do not include comment or processing instruction nodes\n\n      return ret;\n    };\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: true\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: true\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        \"ATTR\": function ATTR(match) {\n          match[1] = match[1].replace(runescape, funescape);\n\n          // Move the given value to match[3] whether quoted or unquoted\n          match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n          if (match[2] === \"~=\") {\n            match[3] = \" \" + match[3] + \" \";\n          }\n          return match.slice(0, 4);\n        },\n        \"CHILD\": function CHILD(match) {\n          /* matches from matchExpr[\"CHILD\"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n          if (match[1].slice(0, 3) === \"nth\") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            }\n\n            // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n            match[5] = +(match[7] + match[8] || match[3] === \"odd\");\n\n            // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n          return match;\n        },\n        \"PSEUDO\": function PSEUDO(match) {\n          var excess,\n            unquoted = !match[6] && match[2];\n          if (matchExpr[\"CHILD\"].test(match[0])) {\n            return null;\n          }\n\n          // Accept quoted arguments as-is\n          if (match[3]) {\n            match[2] = match[4] || match[5] || \"\";\n\n            // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && (\n          // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && (\n          // advance to the next closing parenthesis\n          excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          }\n\n          // Return only captures needed by the pseudo filter method (type and argument)\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        \"TAG\": function TAG(nodeNameSelector) {\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === \"*\" ? function () {\n            return true;\n          } : function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        \"CLASS\": function CLASS(className) {\n          var pattern = classCache[className + \" \"];\n          return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n          });\n        },\n        \"ATTR\": function ATTR(name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n            if (result == null) {\n              return operator === \"!=\";\n            }\n            if (!operator) {\n              return true;\n            }\n            result += \"\";\n\n            /* eslint-disable max-len */\n\n            return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n            /* eslint-enable max-len */\n          };\n        },\n\n        \"CHILD\": function CHILD(type, what, _argument, first, last) {\n          var simple = type.slice(0, 3) !== \"nth\",\n            forward = type.slice(-4) !== \"last\",\n            ofType = what === \"of-type\";\n          return first === 1 && last === 0 ?\n          // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, _context, xml) {\n            var cache,\n              uniqueCache,\n              outerCache,\n              node,\n              nodeIndex,\n              start,\n              dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n              parent = elem.parentNode,\n              name = ofType && elem.nodeName.toLowerCase(),\n              useCache = !xml && !ofType,\n              diff = false;\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  }\n\n                  // Reverse direction for :only-* (if we haven't yet done so)\n                  start = dir = type === \"only\" && !start && \"nextSibling\";\n                }\n                return true;\n              }\n              start = [forward ? parent.firstChild : parent.lastChild];\n\n              // non-xml :nth-child(...) stores cache data on `parent`\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n\n                // ...in a gzip-friendly way\n                node = parent;\n                outerCache = node[expando] || (node[expando] = {});\n\n                // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                cache = uniqueCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n                while (node = ++nodeIndex && node && node[dir] || (\n                // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    uniqueCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                }\n              } else {\n                // Use previously-cached element index if available\n                if (useCache) {\n                  // ...in a gzip-friendly way\n                  node = elem;\n                  outerCache = node[expando] || (node[expando] = {});\n\n                  // Support: IE <9 only\n                  // Defend against cloned attroperties (jQuery gh-1709)\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                  cache = uniqueCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex;\n                }\n\n                // xml :nth-child(...)\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                if (diff === false) {\n                  // Use the same loop as above to seek `elem` from the start\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                      // Cache the index of each encountered element\n                      if (useCache) {\n                        outerCache = node[expando] || (node[expando] = {});\n\n                        // Support: IE <9 only\n                        // Defend against cloned attroperties (jQuery gh-1709)\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                        uniqueCache[type] = [dirruns, diff];\n                      }\n                      if (node === elem) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n\n              // Incorporate the offset, then check against cycle size\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        \"PSEUDO\": function PSEUDO(pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\n\n          // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n          if (fn[expando]) {\n            return fn(argument);\n          }\n\n          // But maintain support for old signatures\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, \"\", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                matched = fn(seed, argument),\n                i = matched.length;\n              while (i--) {\n                idx = indexOf(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        \"not\": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n            results = [],\n            matcher = compile(selector.replace(rtrim, \"$1\"));\n          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {\n            var elem,\n              unmatched = matcher(seed, null, xml, []),\n              i = seed.length;\n\n            // Match elements unmatched by `matcher`\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, _context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results);\n\n            // Don't keep the element (issue #299)\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        \"has\": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        \"contains\": markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        \"lang\": markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || \"\")) {\n            Sizzle.error(\"unsupported lang: \" + lang);\n          }\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n            return false;\n          };\n        }),\n        // Miscellaneous\n        \"target\": function target(elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        \"root\": function root(elem) {\n          return elem === docElem;\n        },\n        \"focus\": function focus(elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        \"enabled\": createDisabledPseudo(false),\n        \"disabled\": createDisabledPseudo(true),\n        \"checked\": function checked(elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n        },\n        \"selected\": function selected(elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            // eslint-disable-next-line no-unused-expressions\n            elem.parentNode.selectedIndex;\n          }\n          return elem.selected === true;\n        },\n        // Contents\n        \"empty\": function empty(elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n          return true;\n        },\n        \"parent\": function parent(elem) {\n          return !Expr.pseudos[\"empty\"](elem);\n        },\n        // Element/input types\n        \"header\": function header(elem) {\n          return rheader.test(elem.nodeName);\n        },\n        \"input\": function input(elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        \"button\": function button(elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === \"input\" && elem.type === \"button\" || name === \"button\";\n        },\n        \"text\": function text(elem) {\n          var attr;\n          return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && (\n          // Support: IE <10 only\n          // New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n          (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n        },\n        // Position-in-collection\n        \"first\": createPositionalPseudo(function () {\n          return [0];\n        }),\n        \"last\": createPositionalPseudo(function (_matchIndexes, length) {\n          return [length - 1];\n        }),\n        \"eq\": createPositionalPseudo(function (_matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        \"even\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        }),\n        \"odd\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        }),\n        \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument > length ? length : argument;\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        }),\n        \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n    // Add button/input type pseudos\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    }\n\n    // Easy API for creating new setFilters\n    function setFilters() {}\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n      var matched,\n        match,\n        tokens,\n        type,\n        soFar,\n        groups,\n        preFilters,\n        cached = tokenCache[selector + \" \"];\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don't consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n          groups.push(tokens = []);\n        }\n        matched = false;\n\n        // Combinators\n        if (match = rleadingCombinator.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, \" \")\n          });\n          soFar = soFar.slice(matched.length);\n        }\n\n        // Filters\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n        if (!matched) {\n          break;\n        }\n      }\n\n      // Return the length of the invalid excess\n      // if we're just parsing\n      // Otherwise, throw an error or return tokens\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n      // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    };\n    function toSelector(tokens) {\n      var i = 0,\n        len = tokens.length,\n        selector = \"\";\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n      return selector;\n    }\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === \"parentNode\",\n        doneName = done++;\n      return combinator.first ?\n      // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n        return false;\n      } :\n      // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n          uniqueCache,\n          outerCache,\n          newCache = [dirruns, doneName];\n\n        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {});\n\n              // Support: IE <9 only\n              // Defend against cloned attroperties (jQuery gh-1709)\n              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n              if (skip && skip === elem.nodeName.toLowerCase()) {\n                elem = elem[dir] || elem;\n              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                uniqueCache[key] = newCache;\n\n                // A match means we're done; a fail means we have to keep checking\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n        return false;\n      };\n    }\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n        return true;\n      } : matchers[0];\n    }\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n        len = contexts.length;\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n      return results;\n    }\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n      return newUnmatched;\n    }\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n          i,\n          elem,\n          preMap = [],\n          postMap = [],\n          preexisting = results.length,\n          // Get initial elements from seed or context\n          elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n          // Prefilter to get matcher input, preserving a map for seed-results synchronization\n          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n          matcherOut = matcher ?\n          // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n          postFinder || (seed ? preFilter : preexisting || postFilter) ?\n          // ...intermediate processing is necessary\n          [] :\n          // ...otherwise use results directly\n          results : matcherIn;\n\n        // Find primary matches\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        }\n\n        // Apply postFilter\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml);\n\n          // Un-match failing elements by moving them back to matcherIn\n          i = temp.length;\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n              postFinder(null, matcherOut = [], temp, xml);\n            }\n\n            // Move matched elements from seed to results to keep them synchronized\n            i = matcherOut.length;\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          }\n\n          // Add elements to results, through postFinder if defined\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n    function matcherFromTokens(tokens) {\n      var checkContext,\n        matcher,\n        j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[tokens[0].type],\n        implicitRelative = leadingRelative || Expr.relative[\" \"],\n        i = leadingRelative ? 1 : 0,\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator(function (elem) {\n          return elem === checkContext;\n        }, implicitRelative, true),\n        matchAnyContext = addCombinator(function (elem) {\n          return indexOf(checkContext, elem) > -1;\n        }, implicitRelative, true),\n        matchers = [function (elem, context, xml) {\n          var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\n          // Avoid hanging onto element (issue #299)\n          checkContext = null;\n          return ret;\n        }];\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n          // Return special upon seeing a positional matcher\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\n            // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === \" \" ? \"*\" : \"\"\n            })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n          matchers.push(matcher);\n        }\n      }\n      return elementMatcher(matchers);\n    }\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n          var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = \"0\",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n            elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n          if (outermost) {\n            // Support: IE 11+, Edge 17 - 18+\n            // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n            // two documents; shallow comparisons work.\n            // eslint-disable-next-line eqeqeq\n            outermostContext = context == document || context || outermost;\n          }\n\n          // Add elements passing elementMatchers directly to results\n          // Support: IE<9, Safari\n          // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n          for (; i !== len && (elem = elems[i]) != null; i++) {\n            if (byElement && elem) {\n              j = 0;\n\n              // Support: IE 11+, Edge 17 - 18+\n              // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n              // two documents; shallow comparisons work.\n              // eslint-disable-next-line eqeqeq\n              if (!context && elem.ownerDocument != document) {\n                setDocument(elem);\n                xml = !documentIsHTML;\n              }\n              while (matcher = elementMatchers[j++]) {\n                if (matcher(elem, context || document, xml)) {\n                  results.push(elem);\n                  break;\n                }\n              }\n              if (outermost) {\n                dirruns = dirrunsUnique;\n              }\n            }\n\n            // Track unmatched elements for set filters\n            if (bySet) {\n              // They will have gone through all possible matchers\n              if (elem = !matcher && elem) {\n                matchedCount--;\n              }\n\n              // Lengthen the array for every element, matched or not\n              if (seed) {\n                unmatched.push(elem);\n              }\n            }\n          }\n\n          // `i` is now the count of elements visited above, and adding it to `matchedCount`\n          // makes the latter nonnegative.\n          matchedCount += i;\n\n          // Apply set filters to unmatched elements\n          // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n          // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n          // no element matchers and no seed.\n          // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n          // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n          // numerically zero.\n          if (bySet && i !== matchedCount) {\n            j = 0;\n            while (matcher = setMatchers[j++]) {\n              matcher(unmatched, setMatched, context, xml);\n            }\n            if (seed) {\n              // Reintegrate element matches to eliminate the need for sorting\n              if (matchedCount > 0) {\n                while (i--) {\n                  if (!(unmatched[i] || setMatched[i])) {\n                    setMatched[i] = pop.call(results);\n                  }\n                }\n              }\n\n              // Discard index placeholder values to get only actual matches\n              setMatched = condense(setMatched);\n            }\n\n            // Add matches to results\n            push.apply(results, setMatched);\n\n            // Seedless set matches succeeding multiple successful matchers stipulate sorting\n            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n              Sizzle.uniqueSort(results);\n            }\n          }\n\n          // Override manipulation of globals by nested matchers\n          if (outermost) {\n            dirruns = dirrunsUnique;\n            outermostContext = contextBackup;\n          }\n          return unmatched;\n        };\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n    compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {\n      var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[selector + \" \"];\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n        i = match.length;\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\n        // Save selector and tokenization\n        cached.selector = selector;\n      }\n      return cached;\n    };\n\n    /**\n     * A low-level selection function that works with Sizzle's compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with Sizzle.compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n    select = Sizzle.select = function (selector, context, results, seed) {\n      var i,\n        tokens,\n        token,\n        type,\n        find,\n        compiled = typeof selector === \"function\" && selector,\n        match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || [];\n\n      // Try to minimize operations if there is only one selector in the list and no seed\n      // (the latter of which guarantees us context)\n      if (match.length === 1) {\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[0] = match[0].slice(0);\n        if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n          if (!context) {\n            return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n          selector = selector.slice(tokens.shift().value.length);\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n        while (i--) {\n          token = tokens[i];\n\n          // Abort if we hit a combinator\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    };\n\n    // One-time assignments\n\n    // Sort stability\n    support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando;\n\n    // Support: Chrome 14-35+\n    // Always assume duplicates if they aren't passed to the comparison function\n    support.detectDuplicates = !!hasDuplicate;\n\n    // Initialize against the default document\n    setDocument();\n\n    // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n    // Detached nodes confoundingly follow *each other*\n    support.sortDetached = assert(function (el) {\n      // Should return 1, but returns 4 (following)\n      return el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\n    });\n\n    // Support: IE<8\n    // Prevent attribute/property \"interpolation\"\n    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n    if (!assert(function (el) {\n      el.innerHTML = \"<a href='#'></a>\";\n      return el.firstChild.getAttribute(\"href\") === \"#\";\n    })) {\n      addHandle(\"type|href|height|width\", function (elem, name, isXML) {\n        if (!isXML) {\n          return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n        }\n      });\n    }\n\n    // Support: IE<9\n    // Use defaultValue in place of getAttribute(\"value\")\n    if (!support.attributes || !assert(function (el) {\n      el.innerHTML = \"<input/>\";\n      el.firstChild.setAttribute(\"value\", \"\");\n      return el.firstChild.getAttribute(\"value\") === \"\";\n    })) {\n      addHandle(\"value\", function (elem, _name, isXML) {\n        if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n          return elem.defaultValue;\n        }\n      });\n    }\n\n    // Support: IE<9\n    // Use getAttributeNode to fetch booleans when getAttribute lies\n    if (!assert(function (el) {\n      return el.getAttribute(\"disabled\") == null;\n    })) {\n      addHandle(booleans, function (elem, name, isXML) {\n        var val;\n        if (!isXML) {\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n        }\n      });\n    }\n    return Sizzle;\n  }(window);\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors;\n\n  // Deprecated\n  jQuery.expr[\":\"] = jQuery.expr.pseudos;\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  jQuery.escapeSelector = Sizzle.escape;\n  var dir = function dir(elem, _dir, until) {\n    var matched = [],\n      truncate = until !== undefined;\n    while ((elem = elem[_dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n        matched.push(elem);\n      }\n    }\n    return matched;\n  };\n  var _siblings = function siblings(n, elem) {\n    var matched = [];\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n    return matched;\n  };\n  var rneedsContext = jQuery.expr.match.needsContext;\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n  var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n\n  // Implement the identical functionality for filter and not\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    }\n\n    // Single element\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    }\n\n    // Arraylike of elements (jQuery, arguments, Array)\n    if (typeof qualifier !== \"string\") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    }\n\n    // Filtered directly for both simple and complex selectors\n    return jQuery.filter(qualifier, elements, not);\n  }\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n    if (not) {\n      expr = \":not(\" + expr + \")\";\n    }\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n  jQuery.fn.extend({\n    find: function find(selector) {\n      var i,\n        ret,\n        len = this.length,\n        self = this;\n      if (typeof selector !== \"string\") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n      ret = this.pushStack([]);\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function filter(selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function not(selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function is(selector) {\n      return !!winnow(this,\n      // If this is a positional/relative selector, check membership in the returned set\n      // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n      typeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  });\n\n  // Initialize a jQuery object\n\n  // A central reference to the root jQuery(document)\n  var rootjQuery,\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n    // Strict HTML recognition (trac-11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n    init = jQuery.fn.init = function (selector, context, root) {\n      var match, elem;\n\n      // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n      if (!selector) {\n        return this;\n      }\n\n      // Method init() accepts an alternate rootjQuery\n      // so migrate can support jQuery.sub (gh-2101)\n      root = root || rootjQuery;\n\n      // Handle HTML strings\n      if (typeof selector === \"string\") {\n        if (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n          // Assume that strings that start and end with <> are HTML and skip the regex check\n          match = [null, selector, null];\n        } else {\n          match = rquickExpr.exec(selector);\n        }\n\n        // Match html or make sure no context is specified for #id\n        if (match && (match[1] || !context)) {\n          // HANDLE: $(html) -> $(array)\n          if (match[1]) {\n            context = context instanceof jQuery ? context[0] : context;\n\n            // Option to run scripts is true for back-compat\n            // Intentionally let the error be thrown if parseHTML is not present\n            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n            // HANDLE: $(html, props)\n            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n              for (match in context) {\n                // Properties of context are called as methods if possible\n                if (isFunction(this[match])) {\n                  this[match](context[match]);\n\n                  // ...and otherwise set as attributes\n                } else {\n                  this.attr(match, context[match]);\n                }\n              }\n            }\n            return this;\n\n            // HANDLE: $(#id)\n          } else {\n            elem = document.getElementById(match[2]);\n            if (elem) {\n              // Inject the element directly into the jQuery object\n              this[0] = elem;\n              this.length = 1;\n            }\n            return this;\n          }\n\n          // HANDLE: $(expr, $(...))\n        } else if (!context || context.jquery) {\n          return (context || root).find(selector);\n\n          // HANDLE: $(expr, context)\n          // (which is just equivalent to: $(context).find(expr)\n        } else {\n          return this.constructor(context).find(selector);\n        }\n\n        // HANDLE: $(DOMElement)\n      } else if (selector.nodeType) {\n        this[0] = selector;\n        this.length = 1;\n        return this;\n\n        // HANDLE: $(function)\n        // Shortcut for document ready\n      } else if (isFunction(selector)) {\n        return root.ready !== undefined ? root.ready(selector) :\n        // Execute immediately if ready is not present\n        selector(jQuery);\n      }\n      return jQuery.makeArray(selector, this);\n    };\n\n  // Give the init function the jQuery prototype for later instantiation\n  init.prototype = jQuery.fn;\n\n  // Initialize central reference\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n    // Methods guaranteed to produce a unique set when starting from a unique set\n    guaranteedUnique = {\n      children: true,\n      contents: true,\n      next: true,\n      prev: true\n    };\n  jQuery.fn.extend({\n    has: function has(target) {\n      var targets = jQuery(target, this),\n        l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function closest(selectors, context) {\n      var cur,\n        i = 0,\n        l = this.length,\n        matched = [],\n        targets = typeof selectors !== \"string\" && jQuery(selectors);\n\n      // Positional selectors never match, since there's no _selection_ context\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :\n            // Don't pass non-elements to Sizzle\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function index(elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      }\n\n      // Index in selector\n      if (typeof elem === \"string\") {\n        return indexOf.call(jQuery(elem), this[0]);\n      }\n\n      // Locate the position of the desired element\n      return indexOf.call(this,\n      // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function add(selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function addBack(selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n    return cur;\n  }\n  jQuery.each({\n    parent: function parent(elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function parents(elem) {\n      return dir(elem, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(elem, _i, until) {\n      return dir(elem, \"parentNode\", until);\n    },\n    next: function next(elem) {\n      return sibling(elem, \"nextSibling\");\n    },\n    prev: function prev(elem) {\n      return sibling(elem, \"previousSibling\");\n    },\n    nextAll: function nextAll(elem) {\n      return dir(elem, \"nextSibling\");\n    },\n    prevAll: function prevAll(elem) {\n      return dir(elem, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(elem, _i, until) {\n      return dir(elem, \"nextSibling\", until);\n    },\n    prevUntil: function prevUntil(elem, _i, until) {\n      return dir(elem, \"previousSibling\", until);\n    },\n    siblings: function siblings(elem) {\n      return _siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function children(elem) {\n      return _siblings(elem.firstChild);\n    },\n    contents: function contents(elem) {\n      if (elem.contentDocument != null &&\n      // Support: IE 11+\n      // <object> elements with no `data` attribute has an object\n      // `contentDocument` with a `null` prototype.\n      getProto(elem.contentDocument)) {\n        return elem.contentDocument;\n      }\n\n      // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don't support it.\n      if (nodeName(elem, \"template\")) {\n        elem = elem.content || elem;\n      }\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n      if (name.slice(-5) !== \"Until\") {\n        selector = until;\n      }\n      if (selector && typeof selector === \"string\") {\n        matched = jQuery.filter(selector, matched);\n      }\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        }\n\n        // Reverse order for parents* and prev-derivatives\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n      return this.pushStack(matched);\n    };\n  });\n  var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  // Convert String-formatted options into Object-formatted ones\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * \"fired\" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n    var\n      // Flag to know if list is currently firing\n      firing,\n      // Last fire value for non-forgettable lists\n      memory,\n      // Flag to know if list was already fired\n      _fired,\n      // Flag to prevent firing\n      _locked,\n      // Actual callback list\n      list = [],\n      // Queue of execution data for repeatable lists\n      queue = [],\n      // Index of currently firing callback (modified by add/remove as needed)\n      firingIndex = -1,\n      // Fire callbacks\n      fire = function fire() {\n        // Enforce single-firing\n        _locked = _locked || options.once;\n\n        // Execute callbacks for all pending executions,\n        // respecting firingIndex overrides and runtime changes\n        _fired = firing = true;\n        for (; queue.length; firingIndex = -1) {\n          memory = queue.shift();\n          while (++firingIndex < list.length) {\n            // Run callback and check for early termination\n            if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n              // Jump to end and forget the data so .add doesn't re-fire\n              firingIndex = list.length;\n              memory = false;\n            }\n          }\n        }\n\n        // Forget the data if we're done with it\n        if (!options.memory) {\n          memory = false;\n        }\n        firing = false;\n\n        // Clean up if we're done firing for good\n        if (_locked) {\n          // Keep an empty list if we have data for future add calls\n          if (memory) {\n            list = [];\n\n            // Otherwise, this object is spent\n          } else {\n            list = \"\";\n          }\n        }\n      },\n      // Actual Callbacks object\n      self = {\n        // Add a callback or a collection of callbacks to the list\n        add: function add() {\n          if (list) {\n            // If we have memory from a past run, we should fire after adding\n            if (memory && !firing) {\n              firingIndex = list.length - 1;\n              queue.push(memory);\n            }\n            (function add(args) {\n              jQuery.each(args, function (_, arg) {\n                if (isFunction(arg)) {\n                  if (!options.unique || !self.has(arg)) {\n                    list.push(arg);\n                  }\n                } else if (arg && arg.length && toType(arg) !== \"string\") {\n                  // Inspect recursively\n                  add(arg);\n                }\n              });\n            })(arguments);\n            if (memory && !firing) {\n              fire();\n            }\n          }\n          return this;\n        },\n        // Remove a callback from the list\n        remove: function remove() {\n          jQuery.each(arguments, function (_, arg) {\n            var index;\n            while ((index = jQuery.inArray(arg, list, index)) > -1) {\n              list.splice(index, 1);\n\n              // Handle firing indexes\n              if (index <= firingIndex) {\n                firingIndex--;\n              }\n            }\n          });\n          return this;\n        },\n        // Check if a given callback is in the list.\n        // If no argument is given, return whether or not list has callbacks attached.\n        has: function has(fn) {\n          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n        },\n        // Remove all callbacks from the list\n        empty: function empty() {\n          if (list) {\n            list = [];\n          }\n          return this;\n        },\n        // Disable .fire and .add\n        // Abort any current/pending executions\n        // Clear all callbacks and values\n        disable: function disable() {\n          _locked = queue = [];\n          list = memory = \"\";\n          return this;\n        },\n        disabled: function disabled() {\n          return !list;\n        },\n        // Disable .fire\n        // Also disable .add unless we have memory (since it would have no effect)\n        // Abort any pending executions\n        lock: function lock() {\n          _locked = queue = [];\n          if (!memory && !firing) {\n            list = memory = \"\";\n          }\n          return this;\n        },\n        locked: function locked() {\n          return !!_locked;\n        },\n        // Call all callbacks with the given context and arguments\n        fireWith: function fireWith(context, args) {\n          if (!_locked) {\n            args = args || [];\n            args = [context, args.slice ? args.slice() : args];\n            queue.push(args);\n            if (!firing) {\n              fire();\n            }\n          }\n          return this;\n        },\n        // Call all the callbacks with the given arguments\n        fire: function fire() {\n          self.fireWith(this, arguments);\n          return this;\n        },\n        // To know if the callbacks have already been called at least once\n        fired: function fired() {\n          return !!_fired;\n        }\n      };\n    return self;\n  };\n  function Identity(v) {\n    return v;\n  }\n  function Thrower(ex) {\n    throw ex;\n  }\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject);\n\n        // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject);\n\n        // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      }\n\n      // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n  jQuery.extend({\n    Deferred: function Deferred(func) {\n      var tuples = [\n        // action, add listener, callbacks,\n        // ... .then handlers, argument index, [final state]\n        [\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 1, \"rejected\"]],\n        _state = \"pending\",\n        _promise = {\n          state: function state() {\n            return _state;\n          },\n          always: function always() {\n            deferred.done(arguments).fail(arguments);\n            return this;\n          },\n          \"catch\": function _catch(fn) {\n            return _promise.then(null, fn);\n          },\n          // Keep pipe for back-compat\n          pipe: function pipe( /* fnDone, fnFail, fnProgress */\n          ) {\n            var fns = arguments;\n            return jQuery.Deferred(function (newDefer) {\n              jQuery.each(tuples, function (_i, tuple) {\n                // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];\n\n                // deferred.progress(function() { bind to newDefer or newDefer.notify })\n                // deferred.done(function() { bind to newDefer or newDefer.resolve })\n                // deferred.fail(function() { bind to newDefer or newDefer.reject })\n                deferred[tuple[1]](function () {\n                  var returned = fn && fn.apply(this, arguments);\n                  if (returned && isFunction(returned.promise)) {\n                    returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                  } else {\n                    newDefer[tuple[0] + \"With\"](this, fn ? [returned] : arguments);\n                  }\n                });\n              });\n              fns = null;\n            }).promise();\n          },\n          then: function then(onFulfilled, onRejected, onProgress) {\n            var maxDepth = 0;\n            function resolve(depth, deferred, handler, special) {\n              return function () {\n                var that = this,\n                  args = arguments,\n                  mightThrow = function mightThrow() {\n                    var returned, then;\n\n                    // Support: Promises/A+ section 2.3.3.3.3\n                    // https://promisesaplus.com/#point-59\n                    // Ignore double-resolution attempts\n                    if (depth < maxDepth) {\n                      return;\n                    }\n                    returned = handler.apply(that, args);\n\n                    // Support: Promises/A+ section 2.3.1\n                    // https://promisesaplus.com/#point-48\n                    if (returned === deferred.promise()) {\n                      throw new TypeError(\"Thenable self-resolution\");\n                    }\n\n                    // Support: Promises/A+ sections 2.3.3.1, 3.5\n                    // https://promisesaplus.com/#point-54\n                    // https://promisesaplus.com/#point-75\n                    // Retrieve `then` only once\n                    then = returned && (\n                    // Support: Promises/A+ section 2.3.4\n                    // https://promisesaplus.com/#point-64\n                    // Only check objects and functions for thenability\n                    _typeof(returned) === \"object\" || typeof returned === \"function\") && returned.then;\n\n                    // Handle a returned thenable\n                    if (isFunction(then)) {\n                      // Special processors (notify) just wait for resolution\n                      if (special) {\n                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));\n\n                        // Normal processors (resolve) also hook into progress\n                      } else {\n                        // ...and disregard older resolution values\n                        maxDepth++;\n                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                      }\n\n                      // Handle all other returned values\n                    } else {\n                      // Only substitute handlers pass on context\n                      // and multiple values (non-spec behavior)\n                      if (handler !== Identity) {\n                        that = undefined;\n                        args = [returned];\n                      }\n\n                      // Process the value(s)\n                      // Default process is resolve\n                      (special || deferred.resolveWith)(that, args);\n                    }\n                  },\n                  // Only normal processors (resolve) catch and reject exceptions\n                  process = special ? mightThrow : function () {\n                    try {\n                      mightThrow();\n                    } catch (e) {\n                      if (jQuery.Deferred.exceptionHook) {\n                        jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                      }\n\n                      // Support: Promises/A+ section 2.3.3.3.4.1\n                      // https://promisesaplus.com/#point-61\n                      // Ignore post-resolution exceptions\n                      if (depth + 1 >= maxDepth) {\n                        // Only substitute handlers pass on context\n                        // and multiple values (non-spec behavior)\n                        if (handler !== Thrower) {\n                          that = undefined;\n                          args = [e];\n                        }\n                        deferred.rejectWith(that, args);\n                      }\n                    }\n                  };\n\n                // Support: Promises/A+ section 2.3.3.3.1\n                // https://promisesaplus.com/#point-57\n                // Re-resolve promises immediately to dodge false rejection from\n                // subsequent errors\n                if (depth) {\n                  process();\n                } else {\n                  // Call an optional hook to record the stack, in case of exception\n                  // since it's otherwise lost when execution goes async\n                  if (jQuery.Deferred.getStackHook) {\n                    process.stackTrace = jQuery.Deferred.getStackHook();\n                  }\n                  window.setTimeout(process);\n                }\n              };\n            }\n            return jQuery.Deferred(function (newDefer) {\n              // progress_handlers.add( ... )\n              tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));\n\n              // fulfilled_handlers.add( ... )\n              tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));\n\n              // rejected_handlers.add( ... )\n              tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n            }).promise();\n          },\n          // Get a promise for this deferred\n          // If obj is provided, the promise aspect is added to the object\n          promise: function promise(obj) {\n            return obj != null ? jQuery.extend(obj, _promise) : _promise;\n          }\n        },\n        deferred = {};\n\n      // Add list-specific methods\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n          stateString = tuple[5];\n\n        // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n        _promise[tuple[1]] = list.add;\n\n        // Handle state\n        if (stateString) {\n          list.add(function () {\n            // state = \"resolved\" (i.e., fulfilled)\n            // state = \"rejected\"\n            _state = stateString;\n          },\n          // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable,\n          // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable,\n          // progress_callbacks.lock\n          tuples[0][2].lock,\n          // progress_handlers.lock\n          tuples[0][3].lock);\n        }\n\n        // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n        list.add(tuple[3].fire);\n\n        // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + \"With\"](this === deferred ? undefined : this, arguments);\n          return this;\n        };\n\n        // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n        deferred[tuple[0] + \"With\"] = list.fireWith;\n      });\n\n      // Make the deferred a promise\n      _promise.promise(deferred);\n\n      // Call given func if any\n      if (func) {\n        func.call(deferred, deferred);\n      }\n\n      // All done!\n      return deferred;\n    },\n    // Deferred helper\n    when: function when(singleValue) {\n      var\n        // count of uncompleted subordinates\n        remaining = arguments.length,\n        // count of unprocessed arguments\n        i = remaining,\n        // subordinate fulfillment data\n        resolveContexts = Array(i),\n        resolveValues = _slice.call(arguments),\n        // the primary Deferred\n        primary = jQuery.Deferred(),\n        // subordinate callback factory\n        updateFunc = function updateFunc(i) {\n          return function (value) {\n            resolveContexts[i] = this;\n            resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n            if (! --remaining) {\n              primary.resolveWith(resolveContexts, resolveValues);\n            }\n          };\n        };\n\n      // Single- and empty arguments are adopted like Promise.resolve\n      if (remaining <= 1) {\n        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);\n\n        // Use .then() to unwrap secondary thenables (cf. gh-3000)\n        if (primary.state() === \"pending\" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return primary.then();\n        }\n      }\n\n      // Multiple arguments are aggregated like Promise.all array elements\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), primary.reject);\n      }\n      return primary.promise();\n    }\n  });\n\n  // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  jQuery.Deferred.exceptionHook = function (error, stack) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn(\"jQuery.Deferred exception: \" + error.message, error.stack, stack);\n    }\n  };\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  };\n\n  // The deferred used on DOM ready\n  var readyList = jQuery.Deferred();\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn)\n\n    // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    .catch(function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See trac-6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function ready(wait) {\n      // Abort if there are pending holds or we're already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      }\n\n      // Remember that the DOM is ready\n      jQuery.isReady = true;\n\n      // If a normal DOM Ready event fired, decrement, and wait if need be\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      }\n\n      // If there are functions bound, to execute\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then;\n\n  // The ready event handler and self cleanup method\n  function completed() {\n    document.removeEventListener(\"DOMContentLoaded\", completed);\n    window.removeEventListener(\"load\", completed);\n    jQuery.ready();\n  }\n\n  // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals \"interactive\" too soon\n  if (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener(\"DOMContentLoaded\", completed);\n\n    // A fallback to window.onload, that will always work\n    window.addEventListener(\"load\", completed);\n  }\n\n  // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it's a function\n  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n      len = elems.length,\n      bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === \"object\") {\n      chainable = true;\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      }\n\n      // Sets one value\n    } else if (value !== undefined) {\n      chainable = true;\n      if (!isFunction(value)) {\n        raw = true;\n      }\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null;\n\n          // ...except when executing function values\n        } else {\n          bulk = fn;\n          fn = function fn(elem, _key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n    if (chainable) {\n      return elems;\n    }\n\n    // Gets\n    if (bulk) {\n      return fn.call(elems);\n    }\n    return len ? fn(elems[0], key) : emptyGet;\n  };\n\n  // Matches dashed string for camelizing\n  var rmsPrefix = /^-ms-/,\n    rdashAlpha = /-([a-z])/g;\n\n  // Used by camelCase as callback to replace()\n  function fcamelCase(_all, letter) {\n    return letter.toUpperCase();\n  }\n\n  // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (trac-9572)\n  function camelCase(string) {\n    return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n  }\n  var acceptData = function acceptData(owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function cache(owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando];\n\n      // If not, create one\n      if (!value) {\n        value = {};\n\n        // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see trac-8335.\n        // Always return an empty object.\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value;\n\n            // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n      return value;\n    },\n    set: function set(owner, data, value) {\n      var prop,\n        cache = this.cache(owner);\n\n      // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n      if (typeof data === \"string\") {\n        cache[camelCase(data)] = value;\n\n        // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n      return cache;\n    },\n    get: function get(owner, key) {\n      return key === undefined ? this.cache(owner) :\n      // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function access(owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the \"read\" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === \"string\" && value === undefined) {\n        return this.get(owner, key);\n      }\n\n      // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n      this.set(owner, key, value);\n\n      // Since the \"set\" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n      return value !== undefined ? value : key;\n    },\n    remove: function remove(owner, key) {\n      var i,\n        cache = owner[this.expando];\n      if (cache === undefined) {\n        return;\n      }\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key);\n\n          // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n        i = key.length;\n        while (i--) {\n          delete cache[key[i]];\n        }\n      }\n\n      // Remove the expando if there's no more data\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function hasData(owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  var dataPriv = new Data();\n  var dataUser = new Data();\n\n  //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module's maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n  //\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n    rmultiDash = /[A-Z]/g;\n  function getData(data) {\n    if (data === \"true\") {\n      return true;\n    }\n    if (data === \"false\") {\n      return false;\n    }\n    if (data === \"null\") {\n      return null;\n    }\n\n    // Only convert to a number if it doesn't change the string\n    if (data === +data + \"\") {\n      return +data;\n    }\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n    return data;\n  }\n  function dataAttr(elem, key, data) {\n    var name;\n\n    // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n    if (data === undefined && elem.nodeType === 1) {\n      name = \"data-\" + key.replace(rmultiDash, \"-$&\").toLowerCase();\n      data = elem.getAttribute(name);\n      if (typeof data === \"string\") {\n        try {\n          data = getData(data);\n        } catch (e) {}\n\n        // Make sure we set the data so it isn't changed later\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n    return data;\n  }\n  jQuery.extend({\n    hasData: function hasData(elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function data(elem, name, _data) {\n      return dataUser.access(elem, name, _data);\n    },\n    removeData: function removeData(elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function _data(elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function _removeData(elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function data(key, value) {\n      var i,\n        name,\n        data,\n        elem = this[0],\n        attrs = elem && elem.attributes;\n\n      // Gets all values\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n          if (elem.nodeType === 1 && !dataPriv.get(elem, \"hasDataAttrs\")) {\n            i = attrs.length;\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (trac-14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n                if (name.indexOf(\"data-\") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n            dataPriv.set(elem, \"hasDataAttrs\", true);\n          }\n        }\n        return data;\n      }\n\n      // Sets multiple values\n      if (_typeof(key) === \"object\") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n      return access(this, function (value) {\n        var data;\n\n        // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n          if (data !== undefined) {\n            return data;\n          }\n\n          // Attempt to \"discover\" the data in\n          // HTML5 custom data-* attrs\n          data = dataAttr(elem, key);\n          if (data !== undefined) {\n            return data;\n          }\n\n          // We tried really hard, but the data doesn't exist.\n          return;\n        }\n\n        // Set the data...\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function removeData(key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function queue(elem, type, data) {\n      var queue;\n      if (elem) {\n        type = (type || \"fx\") + \"queue\";\n        queue = dataPriv.get(elem, type);\n\n        // Speed up dequeue by getting out quickly if this is just a lookup\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n        return queue || [];\n      }\n    },\n    dequeue: function dequeue(elem, type) {\n      type = type || \"fx\";\n      var queue = jQuery.queue(elem, type),\n        startLength = queue.length,\n        fn = queue.shift(),\n        hooks = jQuery._queueHooks(elem, type),\n        next = function next() {\n          jQuery.dequeue(elem, type);\n        };\n\n      // If the fx queue is dequeued, always remove the progress sentinel\n      if (fn === \"inprogress\") {\n        fn = queue.shift();\n        startLength--;\n      }\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === \"fx\") {\n          queue.unshift(\"inprogress\");\n        }\n\n        // Clear up the last queue stop function\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function _queueHooks(elem, type) {\n      var key = type + \"queueHooks\";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks(\"once memory\").add(function () {\n          dataPriv.remove(elem, [type + \"queue\", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function queue(type, data) {\n      var setter = 2;\n      if (typeof type !== \"string\") {\n        data = type;\n        type = \"fx\";\n        setter--;\n      }\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data);\n\n        // Ensure a hooks for this queue\n        jQuery._queueHooks(this, type);\n        if (type === \"fx\" && queue[0] !== \"inprogress\") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function dequeue(type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function clearQueue(type) {\n      return this.queue(type || \"fx\", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function promise(type, obj) {\n      var tmp,\n        count = 1,\n        defer = jQuery.Deferred(),\n        elements = this,\n        i = this.length,\n        resolve = function resolve() {\n          if (! --count) {\n            defer.resolveWith(elements, [elements]);\n          }\n        };\n      if (typeof type !== \"string\") {\n        obj = type;\n        type = undefined;\n      }\n      type = type || \"fx\";\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + \"queueHooks\");\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var rcssNum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\");\n  var cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n  var documentElement = document.documentElement;\n  var isAttached = function isAttached(elem) {\n      return jQuery.contains(elem.ownerDocument, elem);\n    },\n    composed = {\n      composed: true\n    };\n\n  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n  if (documentElement.getRootNode) {\n    isAttached = function isAttached(elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem;\n\n    // Inline style trumps all\n    return elem.style.display === \"none\" || elem.style.display === \"\" &&\n    // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, \"display\") === \"none\";\n  };\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n      scale,\n      maxIterations = 20,\n      currentValue = tween ? function () {\n        return tween.cur();\n      } : function () {\n        return jQuery.css(elem, prop, \"\");\n      },\n      initial = currentValue(),\n      unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n      // Starting value computation is required for potential unit mismatches\n      initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2;\n\n      // Trust units reported by jQuery.css\n      unit = unit || initialInUnit[3];\n\n      // Iteratively approximate from a nonzero starting point\n      initialInUnit = +initial || 1;\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n        initialInUnit = initialInUnit / scale;\n      }\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit);\n\n      // Make sure we update the tween properties later on\n      valueParts = valueParts || [];\n    }\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0;\n\n      // Apply relative offset (+=/-=) if specified\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n    return adjusted;\n  }\n  var defaultDisplayMap = {};\n  function getDefaultDisplay(elem) {\n    var temp,\n      doc = elem.ownerDocument,\n      nodeName = elem.nodeName,\n      display = defaultDisplayMap[nodeName];\n    if (display) {\n      return display;\n    }\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, \"display\");\n    temp.parentNode.removeChild(temp);\n    if (display === \"none\") {\n      display = \"block\";\n    }\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n  function showHide(elements, show) {\n    var display,\n      elem,\n      values = [],\n      index = 0,\n      length = elements.length;\n\n    // Determine new display value for elements that need to change\n    for (; index < length; index++) {\n      elem = elements[index];\n      if (!elem.style) {\n        continue;\n      }\n      display = elem.style.display;\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === \"none\") {\n          values[index] = dataPriv.get(elem, \"display\") || null;\n          if (!values[index]) {\n            elem.style.display = \"\";\n          }\n        }\n        if (elem.style.display === \"\" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== \"none\") {\n          values[index] = \"none\";\n\n          // Remember what we're overwriting\n          dataPriv.set(elem, \"display\", display);\n        }\n      }\n    }\n\n    // Set the display of the elements in a second loop to avoid constant reflow\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n    return elements;\n  }\n  jQuery.fn.extend({\n    show: function show() {\n      return showHide(this, true);\n    },\n    hide: function hide() {\n      return showHide(this);\n    },\n    toggle: function toggle(state) {\n      if (typeof state === \"boolean\") {\n        return state ? this.show() : this.hide();\n      }\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n  var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n  var rscriptType = /^$|^module$|\\/(?:java|ecma)script/i;\n  (function () {\n    var fragment = document.createDocumentFragment(),\n      div = fragment.appendChild(document.createElement(\"div\")),\n      input = document.createElement(\"input\");\n\n    // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (trac-11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (trac-14901)\n    input.setAttribute(\"type\", \"radio\");\n    input.setAttribute(\"checked\", \"checked\");\n    input.setAttribute(\"name\", \"t\");\n    div.appendChild(input);\n\n    // Support: Android <=4.1 only\n    // Older WebKit doesn't clone checked state correctly in fragments\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\n\n    // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n    div.innerHTML = \"<textarea>x</textarea>\";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n\n    // Support: IE <=9 only\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\n    // the select element.\n    div.innerHTML = \"<option></option>\";\n    support.option = !!div.lastChild;\n  })();\n\n  // We have to close these tags to support XHTML (trac-13200)\n  var wrapMap = {\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td;\n\n  // Support: IE <=9 only\n  if (!support.option) {\n    wrapMap.optgroup = wrapMap.option = [1, \"<select multiple='multiple'>\", \"</select>\"];\n  }\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n    var ret;\n    if (typeof context.getElementsByTagName !== \"undefined\") {\n      ret = context.getElementsByTagName(tag || \"*\");\n    } else if (typeof context.querySelectorAll !== \"undefined\") {\n      ret = context.querySelectorAll(tag || \"*\");\n    } else {\n      ret = [];\n    }\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n    return ret;\n  }\n\n  // Mark scripts as having already been evaluated\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n      l = elems.length;\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], \"globalEval\", !refElements || dataPriv.get(refElements[i], \"globalEval\"));\n    }\n  }\n  var rhtml = /<|&#?\\w+;/;\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n      tmp,\n      tag,\n      wrap,\n      attached,\n      j,\n      fragment = context.createDocumentFragment(),\n      nodes = [],\n      i = 0,\n      l = elems.length;\n    for (; i < l; i++) {\n      elem = elems[i];\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === \"object\") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n          // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem));\n\n          // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement(\"div\"));\n\n          // Deserialize a standard representation\n          tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];\n\n          // Descend through wrappers to the right content\n          j = wrap[0];\n          while (j--) {\n            tmp = tmp.lastChild;\n          }\n\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, tmp.childNodes);\n\n          // Remember the top-level container\n          tmp = fragment.firstChild;\n\n          // Ensure the created nodes are orphaned (trac-12392)\n          tmp.textContent = \"\";\n        }\n      }\n    }\n\n    // Remove wrapper from fragment\n    fragment.textContent = \"\";\n    i = 0;\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n        continue;\n      }\n      attached = isAttached(elem);\n\n      // Append to fragment\n      tmp = getAll(fragment.appendChild(elem), \"script\");\n\n      // Preserve script evaluation history\n      if (attached) {\n        setGlobalEval(tmp);\n      }\n\n      // Capture executables\n      if (scripts) {\n        j = 0;\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || \"\")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n    return fragment;\n  }\n  var rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n  function returnTrue() {\n    return true;\n  }\n  function returnFalse() {\n    return false;\n  }\n\n  // Support: IE <=9 - 11+\n  // focus() and blur() are asynchronous, except when they are no-op.\n  // So expect focus to be synchronous when the element is already active,\n  // and blur to be synchronous when the element is not already active.\n  // (focus and blur are always synchronous in other supported browsers,\n  // this just defines when we can count on it).\n  function expectSync(elem, type) {\n    return elem === safeActiveElement() === (type === \"focus\");\n  }\n\n  // Support: IE <=9 only\n  // Accessing document.activeElement can throw unexpectedly\n  // https://bugs.jquery.com/ticket/13393\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n  function _on(elem, types, selector, data, fn, one) {\n    var origFn, type;\n\n    // Types can be a map of types/handlers\n    if (_typeof(types) === \"object\") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== \"string\") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n      for (type in types) {\n        _on(elem, type, selector, data, types[type], one);\n      }\n      return elem;\n    }\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === \"string\") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n    if (one === 1) {\n      origFn = fn;\n      fn = function fn(event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      };\n\n      // Use same guid so caller can remove using origFn\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards' addEvent library for many of the ideas.\n   */\n  jQuery.event = {\n    global: {},\n    add: function add(elem, types, handler, data, selector) {\n      var handleObjIn,\n        eventHandle,\n        tmp,\n        events,\n        t,\n        handleObj,\n        special,\n        handlers,\n        type,\n        namespaces,\n        origType,\n        elemData = dataPriv.get(elem);\n\n      // Only attach events to objects that accept data\n      if (!acceptData(elem)) {\n        return;\n      }\n\n      // Caller can pass in an object of custom data in lieu of the handler\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      }\n\n      // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      }\n\n      // Make sure that the handler has a unique ID, used to find/remove it later\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      }\n\n      // Init the element's event structure and main handler, if this is the first\n      if (!(events = elemData.events)) {\n        events = elemData.events = Object.create(null);\n      }\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      }\n\n      // Handle multiple events separated by a space\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n      t = types.length;\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort();\n\n        // There *must* be a type, no attaching namespace-only handlers\n        if (!type) {\n          continue;\n        }\n\n        // If event changes its type, use the special event handlers for the changed type\n        special = jQuery.event.special[type] || {};\n\n        // If selector defined, determine special event api type, otherwise given type\n        type = (selector ? special.delegateType : special.bindType) || type;\n\n        // Update special based on newly reset type\n        special = jQuery.event.special[type] || {};\n\n        // handleObj is passed to all event handlers\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(\".\")\n        }, handleObjIn);\n\n        // Init the event handler queue if we're the first\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0;\n\n          // Only use addEventListener if the special events handler returns false\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n        if (special.add) {\n          special.add.call(elem, handleObj);\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        }\n\n        // Add to the element's handler list, delegates in front\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        }\n\n        // Keep track of which events have ever been used, for event optimization\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\n      var j,\n        origCount,\n        tmp,\n        events,\n        t,\n        handleObj,\n        special,\n        handlers,\n        type,\n        namespaces,\n        origType,\n        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      }\n\n      // Once for each type.namespace in types; type may be omitted\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n      t = types.length;\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort();\n\n        // Unbind all events (on this namespace, if provided) for the element\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n          continue;\n        }\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\");\n\n        // Remove matching events\n        origCount = j = handlers.length;\n        while (j--) {\n          handleObj = handlers[j];\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n            handlers.splice(j, 1);\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        }\n\n        // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n          delete events[type];\n        }\n      }\n\n      // Remove data and the expando if it's no longer used\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(nativeEvent) {\n      var i,\n        j,\n        ret,\n        matched,\n        handleObj,\n        handlerQueue,\n        args = new Array(arguments.length),\n        // Make a writable jQuery.Event from the native event object\n        event = jQuery.event.fix(nativeEvent),\n        handlers = (dataPriv.get(this, \"events\") || Object.create(null))[event.type] || [],\n        special = jQuery.event.special[event.type] || {};\n\n      // Use the fix-ed jQuery.Event rather than the (read-only) native event\n      args[0] = event;\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n      event.delegateTarget = this;\n\n      // Call the preDispatch hook for the mapped type, and let it bail if desired\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      }\n\n      // Determine handlers\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n      // Run delegates first; they may want to stop propagation beneath us\n      i = 0;\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event's.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      }\n\n      // Call the postDispatch hook for the mapped type\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n      return event.result;\n    },\n    handlers: function handlers(event, _handlers) {\n      var i,\n        handleObj,\n        sel,\n        matchedHandlers,\n        matchedSelectors,\n        handlerQueue = [],\n        delegateCount = _handlers.delegateCount,\n        cur = event.target;\n\n      // Find delegate handlers\n      if (delegateCount &&\n      // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType &&\n      // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === \"click\" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don't check non-elements (trac-13208)\n          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n          if (cur.nodeType === 1 && !(event.type === \"click\" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = _handlers[i];\n\n              // Don't conflict with Object.prototype properties (trac-13203)\n              sel = handleObj.selector + \" \";\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      }\n\n      // Add the remaining (directly-bound) handlers\n      cur = this;\n      if (delegateCount < _handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: _handlers.slice(delegateCount)\n        });\n      }\n      return handlerQueue;\n    },\n    addProp: function addProp(name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function set(value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function fix(originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function setup(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data;\n\n          // Claim the first handler\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\")) {\n            // dataPriv.set( el, \"click\", ... )\n            leverageNative(el, \"click\", returnTrue);\n          }\n\n          // Return false to allow normal processing in the caller\n          return false;\n        },\n        trigger: function trigger(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data;\n\n          // Force setup before triggering a click\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\")) {\n            leverageNative(el, \"click\");\n          }\n\n          // Return non-false to allow normal event-path propagation\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we're currently inside a leveraged native-event stack\n        _default: function _default(event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, \"input\") && dataPriv.get(target, \"click\") || nodeName(target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(event) {\n          // Support: Firefox 20+\n          // Firefox doesn't alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  };\n\n  // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n  function leverageNative(el, type, expectSync) {\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n    if (!expectSync) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n      return;\n    }\n\n    // Register the controller as a special universal handler for all event namespaces\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function handler(event) {\n        var notAsync,\n          result,\n          saved = dataPriv.get(this, type);\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          // Saved data should be false in such cases, but might be a leftover capture object\n          // from an async native handler (gh-4350)\n          if (!saved.length) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = _slice.call(arguments);\n            dataPriv.set(this, type, saved);\n\n            // Trigger the native event and capture its result\n            // Support: IE <=9 - 11+\n            // focus() and blur() are asynchronous\n            notAsync = expectSync(this, type);\n            this[type]();\n            result = dataPriv.get(this, type);\n            if (saved !== result || notAsync) {\n              dataPriv.set(this, type, false);\n            } else {\n              result = {};\n            }\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault();\n\n              // Support: Chrome 86+\n              // In Chrome, if an element having a focusout handler is blurred by\n              // clicking outside of it, it invokes the handler synchronously. If\n              // that handler calls `.remove()` on the element, the data is cleared,\n              // leaving `result` undefined. We need to guard against this.\n              return result && result.value;\n            }\n\n            // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering the\n            // native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          }\n\n          // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n        } else if (saved.length) {\n          // ...and capture the result\n          dataPriv.set(this, type, {\n            value: jQuery.event.trigger(\n            // Support: IE <=9 - 11+\n            // Extend with the prototype to reset the above stopImmediatePropagation()\n            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)\n          });\n\n          // Abort handling of the native event\n          event.stopImmediatePropagation();\n        }\n      }\n    });\n  }\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This \"if\" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    }\n\n    // Event object\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type;\n\n      // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\n      // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse;\n\n      // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (trac-504, trac-13143)\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget;\n\n      // Event type\n    } else {\n      this.type = src;\n    }\n\n    // Put explicitly provided properties onto the event object\n    if (props) {\n      jQuery.extend(this, props);\n    }\n\n    // Create a timestamp if incoming event doesn't have one\n    this.timeStamp = src && src.timeStamp || Date.now();\n\n    // Mark it as fixed\n    this[jQuery.expando] = true;\n  };\n\n  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n      this.stopPropagation();\n    }\n  };\n\n  // Includes all common event props including KeyEvent and MouseEvent specific props\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    \"char\": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: true\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (type, delegateType) {\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function setup() {\n        // Claim the first handler\n        // dataPriv.set( this, \"focus\", ... )\n        // dataPriv.set( this, \"blur\", ... )\n        leverageNative(this, type, expectSync);\n\n        // Return false to allow normal processing in the caller\n        return false;\n      },\n      trigger: function trigger() {\n        // Force setup before trigger\n        leverageNative(this, type);\n\n        // Return non-false to allow normal event-path propagation\n        return true;\n      },\n      // Suppress native focus or blur if we're currently inside\n      // a leveraged native-event stack\n      _default: function _default(event) {\n        return dataPriv.get(event.target, type);\n      },\n      delegateType: delegateType\n    };\n  });\n\n  // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n  jQuery.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function handle(event) {\n        var ret,\n          target = this,\n          related = event.relatedTarget,\n          handleObj = event.handleObj;\n\n        // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function on(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn);\n    },\n    one: function one(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn, 1);\n    },\n    off: function off(types, selector, fn) {\n      var handleObj, type;\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n      if (_typeof(types) === \"object\") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n        return this;\n      }\n      if (selector === false || typeof selector === \"function\") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n      if (fn === false) {\n        fn = returnFalse;\n      }\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  var\n    // Support: IE <=10 - 11, Edge 12 - 13 only\n    // In IE/Edge using regex groups here causes severe slowdowns.\n    // See https://connect.microsoft.com/IE/feedback/details/1736512/\n    rnoInnerhtml = /<script|<style|<link/i,\n    // checked=\"checked\" or checked\n    rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n    rcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n  // Prefer a tbody over its parent table for containing new rows\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, \"table\") && nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\")) {\n      return jQuery(elem).children(\"tbody\")[0] || elem;\n    }\n    return elem;\n  }\n\n  // Replace/restore the type attribute of script elements for safe DOM manipulation\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n    return elem;\n  }\n  function restoreScript(elem) {\n    if ((elem.type || \"\").slice(0, 5) === \"true/\") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute(\"type\");\n    }\n    return elem;\n  }\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, udataOld, udataCur, events;\n    if (dest.nodeType !== 1) {\n      return;\n    }\n\n    // 1. Copy private data: events, handlers, etc.\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.get(src);\n      events = pdataOld.events;\n      if (events) {\n        dataPriv.remove(dest, \"handle events\");\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    }\n\n    // 2. Copy user data\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  }\n\n  // Fix IE bugs, see support tests\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase();\n\n    // Fails to persist the checked state of a cloned checkbox or radio button.\n    if (nodeName === \"input\" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked;\n\n      // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === \"input\" || nodeName === \"textarea\") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = flat(args);\n    var fragment,\n      first,\n      scripts,\n      hasScripts,\n      node,\n      doc,\n      i = 0,\n      l = collection.length,\n      iNoClone = l - 1,\n      value = args[0],\n      valueIsFunction = isFunction(value);\n\n    // We can't cloneNode fragments that contain checked, in WebKit\n    if (valueIsFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n        domManip(self, args, callback, ignored);\n      });\n    }\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      }\n\n      // Require either new content or an interest in ignored elements to invoke the callback\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n        hasScripts = scripts.length;\n\n        // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (trac-8070).\n        for (; i < l; i++) {\n          node = fragment;\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true);\n\n            // Keep references to cloned scripts for later restoration\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, \"script\"));\n            }\n          }\n          callback.call(collection[i], node, i);\n        }\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument;\n\n          // Reenable scripts\n          jQuery.map(scripts, restoreScript);\n\n          // Evaluate executable scripts on first document insertion\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n            if (rscriptType.test(node.type || \"\") && !dataPriv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || \"\").toLowerCase() !== \"module\") {\n                // Optional AJAX dependency, but won't run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute(\"nonce\")\n                  }, doc);\n                }\n              } else {\n                // Unwrap a CDATA section containing script contents. This shouldn't be\n                // needed as in XML documents they're already not visible when\n                // inspecting element contents and in HTML documents they have no\n                // meaning but we're preserving that logic for backwards compatibility.\n                // This will be removed completely in 4.0. See gh-4904.\n                DOMEval(node.textContent.replace(rcleanScript, \"\"), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n    return collection;\n  }\n  function _remove(elem, selector, keepData) {\n    var node,\n      nodes = selector ? jQuery.filter(selector, elem) : elem,\n      i = 0;\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, \"script\"));\n        }\n        node.parentNode.removeChild(node);\n      }\n    }\n    return elem;\n  }\n  jQuery.extend({\n    htmlPrefilter: function htmlPrefilter(html) {\n      return html;\n    },\n    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n        l,\n        srcElements,\n        destElements,\n        clone = elem.cloneNode(true),\n        inPage = isAttached(elem);\n\n      // Fix IE cloning issues\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      }\n\n      // Copy the events from the original to the clone\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      }\n\n      // Preserve script evaluation history\n      destElements = getAll(clone, \"script\");\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n      }\n\n      // Return the cloned set\n      return clone;\n    },\n    cleanData: function cleanData(elems) {\n      var data,\n        elem,\n        type,\n        special = jQuery.event.special,\n        i = 0;\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type);\n\n                  // This is a shortcut to avoid jQuery.event.remove's overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            }\n\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataPriv.expando] = undefined;\n          }\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function detach(selector) {\n      return _remove(this, selector, true);\n    },\n    remove: function remove(selector) {\n      return _remove(this, selector);\n    },\n    text: function text(value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function append() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function after() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function empty() {\n      var elem,\n        i = 0;\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false));\n\n          // Remove any remaining nodes\n          elem.textContent = \"\";\n        }\n      }\n      return this;\n    },\n    clone: function clone(dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function html(value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n          i = 0,\n          l = this.length;\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        }\n\n        // See if we can take a shortcut and just use innerHTML\n        if (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {};\n\n              // Remove element nodes and prevent memory leaks\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n            elem = 0;\n\n            // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var ignored = [];\n\n      // Make the changes, replacing each non-ignored context element with the new content\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        }\n\n        // Force callback invocation\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n        ret = [],\n        insert = jQuery(selector),\n        last = insert.length - 1,\n        i = 0;\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems);\n\n        // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n        push.apply(ret, elems.get());\n      }\n      return this.pushStack(ret);\n    };\n  });\n  var rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n  var rcustomProp = /^--/;\n  var getStyles = function getStyles(elem) {\n    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n    var view = elem.ownerDocument.defaultView;\n    if (!view || !view.opener) {\n      view = window;\n    }\n    return view.getComputedStyle(elem);\n  };\n  var swap = function swap(elem, options, callback) {\n    var ret,\n      name,\n      old = {};\n\n    // Remember the old values, and insert the new ones\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n    ret = callback.call(elem);\n\n    // Revert the old values\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n    return ret;\n  };\n  var rboxStyle = new RegExp(cssExpand.join(\"|\"), \"i\");\n  var whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n  var rtrimCSS = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\");\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they're executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n      container.style.cssText = \"position:absolute;left:-11111px;width:60px;\" + \"margin-top:1px;padding:0;border:0\";\n      div.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" + \"margin:auto;border:1px;padding:1px;\" + \"width:60%;top:1%\";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== \"1%\";\n\n      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;\n\n      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn't\n      div.style.right = \"60%\";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;\n\n      // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;\n\n      // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don't get tricked when zoom affects offsetWidth (gh-4029)\n      div.style.position = \"absolute\";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container);\n\n      // Nullify the div so it wouldn't be stored in the memory and\n      // it will also be a sign that checks already performed\n      div = null;\n    }\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n    var pixelPositionVal,\n      boxSizingReliableVal,\n      scrollboxSizeVal,\n      pixelBoxStylesVal,\n      reliableTrDimensionsVal,\n      reliableMarginLeftVal,\n      container = document.createElement(\"div\"),\n      div = document.createElement(\"div\");\n\n    // Finish early in limited (non-browser) environments\n    if (!div.style) {\n      return;\n    }\n\n    // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (trac-8908)\n    div.style.backgroundClip = \"content-box\";\n    div.cloneNode(true).style.backgroundClip = \"\";\n    support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n    jQuery.extend(support, {\n      boxSizingReliable: function boxSizingReliable() {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function pixelBoxStyles() {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function pixelPosition() {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function scrollboxSize() {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      },\n      // Support: IE 9 - 11+, Edge 15 - 18+\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\n      // set in CSS while `offset*` properties report correct values.\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\n      // some versions of this test; make sure not to make it pass there!\n      //\n      // Support: Firefox 70+\n      // Only Firefox includes border widths\n      // in computed dimensions. (gh-4529)\n      reliableTrDimensions: function reliableTrDimensions() {\n        var table, tr, trChild, trStyle;\n        if (reliableTrDimensionsVal == null) {\n          table = document.createElement(\"table\");\n          tr = document.createElement(\"tr\");\n          trChild = document.createElement(\"div\");\n          table.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n          tr.style.cssText = \"border:1px solid\";\n\n          // Support: Chrome 86+\n          // Height set through cssText does not get applied.\n          // Computed height then comes back as 0.\n          tr.style.height = \"1px\";\n          trChild.style.height = \"9px\";\n\n          // Support: Android 8 Chrome 86+\n          // In our bodyBackground.html iframe,\n          // display for all div elements is set to \"inline\",\n          // which causes a problem only in Android 8 Chrome 86.\n          // Ensuring the div is display: block\n          // gets around this issue.\n          trChild.style.display = \"block\";\n          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);\n          trStyle = window.getComputedStyle(tr);\n          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;\n          documentElement.removeChild(table);\n        }\n        return reliableTrDimensionsVal;\n      }\n    });\n  })();\n  function curCSS(elem, name, computed) {\n    var width,\n      minWidth,\n      maxWidth,\n      ret,\n      isCustomProp = rcustomProp.test(name),\n      // Support: Firefox 51+\n      // Retrieving style before computed somehow\n      // fixes an issue with getting wrong values\n      // on detached elements\n      style = elem.style;\n    computed = computed || getStyles(elem);\n\n    // getPropertyValue is needed for:\n    //   .css('filter') (IE 9 only, trac-12537)\n    //   .css('--customProperty) (gh-3144)\n    if (computed) {\n      // Support: IE <=9 - 11+\n      // IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n      // it's only available as `\"cssFloat\"`. We no longer modify properties\n      // sent to `.css()` apart from camelCasing, so we need to check both.\n      // Normally, this would create difference in behavior: if\n      // `getPropertyValue` returns an empty string, the value returned\n      // by `.css()` would be `undefined`. This is usually the case for\n      // disconnected elements. However, in IE even disconnected elements\n      // with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n      ret = computed.getPropertyValue(name) || computed[name];\n      if (isCustomProp && ret) {\n        // Support: Firefox 105+, Chrome <=105+\n        // Spec requires trimming whitespace for custom properties (gh-4926).\n        // Firefox only trims leading whitespace. Chrome just collapses\n        // both leading & trailing whitespace to a single space.\n        //\n        // Fall back to `undefined` if empty string returned.\n        // This collapses a missing definition with property defined\n        // and set to an empty string but there's no standard API\n        // allowing us to differentiate them without a performance penalty\n        // and returning `undefined` aligns with older jQuery.\n        //\n        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n        // as whitespace while CSS does not, but this is not a problem\n        // because CSS preprocessing replaces them with U+000A LINE FEED\n        // (which *is* CSS whitespace)\n        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n        ret = ret.replace(rtrimCSS, \"$1\") || undefined;\n      }\n      if (ret === \"\" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      }\n\n      // A tribute to the \"awesome hack by Dean Edwards\"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth;\n\n        // Put in the new values to get a computed value out\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width;\n\n        // Revert the changed values\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n    return ret !== undefined ?\n    // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + \"\" : ret;\n  }\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we'll check on the first run if it's really needed.\n    return {\n      get: function get() {\n        if (conditionFn()) {\n          // Hook not needed (or it's not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        }\n\n        // Hook needed; redefine it so that the support test is not executed again.\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n  var cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"],\n    emptyStyle = document.createElement(\"div\").style,\n    vendorProps = {};\n\n  // Return a vendor-prefixed property or undefined\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n      i = cssPrefixes.length;\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  }\n\n  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n  function finalPropName(name) {\n    var final = jQuery.cssProps[name] || vendorProps[name];\n    if (final) {\n      return final;\n    }\n    if (name in emptyStyle) {\n      return name;\n    }\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n  var\n    // Swappable if display is none or starts with table\n    // except \"table\", \"table-cell\", or \"table-caption\"\n    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n    rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n    cssShow = {\n      position: \"absolute\",\n      visibility: \"hidden\",\n      display: \"block\"\n    },\n    cssNormalTransform = {\n      letterSpacing: \"0\",\n      fontWeight: \"400\"\n    };\n  function setPositiveNumber(_elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ?\n    // Guard against undefined \"subtract\", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || \"px\") : value;\n  }\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === \"width\" ? 1 : 0,\n      extra = 0,\n      delta = 0;\n\n    // Adjustment may not be necessary\n    if (box === (isBorderBox ? \"border\" : \"content\")) {\n      return 0;\n    }\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      if (box === \"margin\") {\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      }\n\n      // If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\n        // For \"border\" or \"margin\", add border\n        if (box !== \"padding\") {\n          delta += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\n          // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n\n        // If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n        // \"padding\" or \"margin\"\n      } else {\n        // For \"content\", subtract padding\n        if (box === \"content\") {\n          delta -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n        }\n\n        // For \"content\" or \"padding\", subtract border\n        if (box !== \"margin\") {\n          delta -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n      }\n    }\n\n    // Account for positive content-box scroll gutter when requested by providing computedVal\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5\n\n      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n    return delta;\n  }\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n      // Fake content-box until we know it's needed to know the true value.\n      boxSizingNeeded = !support.boxSizingReliable() || extra,\n      isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\n      valueIsBorderBox = isBorderBox,\n      val = curCSS(elem, dimension, styles),\n      offsetProp = \"offset\" + dimension[0].toUpperCase() + dimension.slice(1);\n\n    // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n      val = \"auto\";\n    }\n\n    // Support: IE 9 - 11 only\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\n    // In those cases, the computed value can be trusted to be border-box.\n    if ((!support.boxSizingReliable() && isBorderBox ||\n    // Support: IE 10 - 11+, Edge 15 - 18+\n    // IE/Edge misreport `getComputedStyle` of table rows with width/height\n    // set in CSS while `offset*` properties report correct values.\n    // Interestingly, in some cases IE 9 doesn't suffer from this issue.\n    !support.reliableTrDimensions() && nodeName(elem, \"tr\") ||\n    // Fall back to offsetWidth/offsetHeight when value is \"auto\"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    val === \"auto\" ||\n    // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    !parseFloat(val) && jQuery.css(elem, \"display\", false, styles) === \"inline\") &&\n    // Make sure the element is visible & connected\n    elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\";\n\n      // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n      valueIsBorderBox = offsetProp in elem;\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    }\n\n    // Normalize \"\" and auto\n    val = parseFloat(val) || 0;\n\n    // Adjust for the element's box model\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles,\n    // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + \"px\";\n  }\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function get(elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, \"opacity\");\n            return ret === \"\" ? \"1\" : ret;\n          }\n        }\n      }\n    },\n    // Don't automatically add \"px\" to these possibly-unitless properties\n    cssNumber: {\n      \"animationIterationCount\": true,\n      \"columnCount\": true,\n      \"fillOpacity\": true,\n      \"flexGrow\": true,\n      \"flexShrink\": true,\n      \"fontWeight\": true,\n      \"gridArea\": true,\n      \"gridColumn\": true,\n      \"gridColumnEnd\": true,\n      \"gridColumnStart\": true,\n      \"gridRow\": true,\n      \"gridRowEnd\": true,\n      \"gridRowStart\": true,\n      \"lineHeight\": true,\n      \"opacity\": true,\n      \"order\": true,\n      \"orphans\": true,\n      \"widows\": true,\n      \"zIndex\": true,\n      \"zoom\": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function style(elem, name, value, extra) {\n      // Don't set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      }\n\n      // Make sure that we're working with the right name\n      var ret,\n        type,\n        hooks,\n        origName = camelCase(name),\n        isCustomProp = rcustomProp.test(name),\n        style = elem.style;\n\n      // Make sure that we're working with the right name. We don't\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      }\n\n      // Gets hook for the prefixed version, then unprefixed version\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n      // Check if we're setting a value\n      if (value !== undefined) {\n        type = _typeof(value);\n\n        // Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n        if (type === \"string\" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret);\n\n          // Fixes bug trac-9237\n          type = \"number\";\n        }\n\n        // Make sure that null and NaN values aren't set (trac-7116)\n        if (value == null || value !== value) {\n          return;\n        }\n\n        // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // \"px\" to a few hardcoded values.\n        if (type === \"number\" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? \"\" : \"px\");\n        }\n\n        // background-* props affect original clone's values\n        if (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n          style[name] = \"inherit\";\n        }\n\n        // If a hook was provided, use that value, otherwise just set the specified value\n        if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        }\n\n        // Otherwise just get the value from the style object\n        return style[name];\n      }\n    },\n    css: function css(elem, name, extra, styles) {\n      var val,\n        num,\n        hooks,\n        origName = camelCase(name),\n        isCustomProp = rcustomProp.test(name);\n\n      // Make sure that we're working with the right name. We don't\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      }\n\n      // Try prefixed name followed by the unprefixed name\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n      // If a hook was provided get the computed value from there\n      if (hooks && \"get\" in hooks) {\n        val = hooks.get(elem, true, extra);\n      }\n\n      // Otherwise, if a way to get the computed value exists, use that\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      }\n\n      // Convert \"normal\" to computed value\n      if (val === \"normal\" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      }\n\n      // Make numeric if forced or a qualifier was provided and val looks numeric\n      if (extra === \"\" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n      return val;\n    }\n  });\n  jQuery.each([\"height\", \"width\"], function (_i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function get(elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, \"display\")) && (\n          // Support: Safari 8+\n          // Table columns in Safari have non-zero offsetWidth & zero\n          // getBoundingClientRect().width unless display is changed.\n          // Support: IE <=11 only\n          // Running getBoundingClientRect on a disconnected node\n          // in IE throws an error.\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function set(elem, value, extra) {\n        var matches,\n          styles = getStyles(elem),\n          // Only read styles.position if the test has a chance to fail\n          // to avoid forcing a reflow.\n          scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === \"absolute\",\n          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n          boxSizingNeeded = scrollboxSizeBuggy || extra,\n          isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\n          subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;\n\n        // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, \"border\", false, styles) - 0.5);\n        }\n\n        // Convert to pixels if value adjustment is needed\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \"px\") !== \"px\") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, \"marginLeft\")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + \"px\";\n    }\n  });\n\n  // These hooks are used by animate to expand properties\n  jQuery.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function expand(value) {\n        var i = 0,\n          expanded = {},\n          // Assumes a single number if not a string\n          parts = typeof value === \"string\" ? value.split(\" \") : [value];\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n        return expanded;\n      }\n    };\n    if (prefix !== \"margin\") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function css(name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n          len,\n          map = {},\n          i = 0;\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n          return map;\n        }\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function init(elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function run(percent) {\n      var eased,\n        hooks = Tween.propHooks[this.prop];\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n      this.now = (this.end - this.start) * eased + this.start;\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function get(tween) {\n        var result;\n\n        // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        }\n\n        // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as \"10px\" are parsed to Float;\n        // complex values such as \"rotate(1rad)\" are returned as-is.\n        result = jQuery.css(tween.elem, tween.prop, \"\");\n\n        // Empty strings, null, undefined and \"auto\" are converted to 0.\n        return !result || result === \"auto\" ? 0 : result;\n      },\n      set: function set(tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  };\n\n  // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function set(tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function linear(p) {\n      return p;\n    },\n    swing: function swing(p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  };\n  jQuery.fx = Tween.prototype.init;\n\n  // Back compat <1.8 extension point\n  jQuery.fx.step = {};\n  var fxNow,\n    inProgress,\n    rfxtypes = /^(?:toggle|show|hide)$/,\n    rrun = /queueHooks$/;\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n      jQuery.fx.tick();\n    }\n  }\n\n  // Animations created synchronously will run synchronously\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  }\n\n  // Generate parameters to create a standard animation\n  function genFx(type, includeWidth) {\n    var which,\n      i = 0,\n      attrs = {\n        height: type\n      };\n\n    // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n    includeWidth = includeWidth ? 1 : 0;\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n    }\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n    return attrs;\n  }\n  function createTween(value, prop, animation) {\n    var tween,\n      collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\"*\"]),\n      index = 0,\n      length = collection.length;\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We're done with this property\n        return tween;\n      }\n    }\n  }\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n      value,\n      toggle,\n      hooks,\n      oldfire,\n      propTween,\n      restoreDisplay,\n      display,\n      isBox = \"width\" in props || \"height\" in props,\n      anim = this,\n      orig = {},\n      style = elem.style,\n      hidden = elem.nodeType && isHiddenWithinTree(elem),\n      dataShow = dataPriv.get(elem, \"fxshow\");\n\n    // Queue-skipping animations hijack the fx hooks\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, \"fx\");\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n          if (!jQuery.queue(elem, \"fx\").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    }\n\n    // Detect show/hide animations\n    for (prop in props) {\n      value = props[prop];\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === \"toggle\";\n        if (value === (hidden ? \"hide\" : \"show\")) {\n          // Pretend to be hidden if this is a \"show\" and\n          // there is still data from a stopped show/hide\n          if (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true;\n\n            // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    }\n\n    // Bail out if this is a no-op like .hide().hide()\n    propTween = !jQuery.isEmptyObject(props);\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    }\n\n    // Restrict \"overflow\" and \"display\" styles during box animations\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n      // Identify a display type, preferring old show/hide data over the CSS cascade\n      restoreDisplay = dataShow && dataShow.display;\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, \"display\");\n      }\n      display = jQuery.css(elem, \"display\");\n      if (display === \"none\") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, \"display\");\n          showHide([elem]);\n        }\n      }\n\n      // Animate inline elements as inline-block\n      if (display === \"inline\" || display === \"inline-block\" && restoreDisplay != null) {\n        if (jQuery.css(elem, \"float\") === \"none\") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === \"none\" ? \"\" : display;\n            }\n          }\n          style.display = \"inline-block\";\n        }\n      }\n    }\n    if (opts.overflow) {\n      style.overflow = \"hidden\";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    }\n\n    // Implement show/hide animations\n    propTween = false;\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if (\"hidden\" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, \"fxshow\", {\n            display: restoreDisplay\n          });\n        }\n\n        // Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        }\n\n        // Show elements before animating them\n        if (hidden) {\n          showHide([elem], true);\n        }\n\n        /* eslint-disable no-loop-func */\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n\n          // The final step of a \"hide\" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n          dataPriv.remove(elem, \"fxshow\");\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      }\n\n      // Per-property setup\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks;\n\n    // camelCase, specialEasing and expand cssHook pass\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n      hooks = jQuery.cssHooks[name];\n      if (hooks && \"expand\" in hooks) {\n        value = hooks.expand(value);\n        delete props[name];\n\n        // Not quite $.extend, this won't overwrite existing keys.\n        // Reusing 'index' because we have the correct \"name\"\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n  function Animation(elem, properties, options) {\n    var result,\n      stopped,\n      index = 0,\n      length = Animation.prefilters.length,\n      deferred = jQuery.Deferred().always(function () {\n        // Don't match elem in the :animated selector\n        delete tick.elem;\n      }),\n      tick = function tick() {\n        if (stopped) {\n          return false;\n        }\n        var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n          temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n        for (; index < length; index++) {\n          animation.tweens[index].run(percent);\n        }\n        deferred.notifyWith(elem, [animation, percent, remaining]);\n\n        // If there's more to do, yield\n        if (percent < 1 && length) {\n          return remaining;\n        }\n\n        // If this was an empty animation, synthesize a final progress notification\n        if (!length) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n        }\n\n        // Resolve the animation and report its conclusion\n        deferred.resolveWith(elem, [animation]);\n        return false;\n      },\n      animation = deferred.promise({\n        elem: elem,\n        props: jQuery.extend({}, properties),\n        opts: jQuery.extend(true, {\n          specialEasing: {},\n          easing: jQuery.easing._default\n        }, options),\n        originalProperties: properties,\n        originalOptions: options,\n        startTime: fxNow || createFxNow(),\n        duration: options.duration,\n        tweens: [],\n        createTween: function createTween(prop, end) {\n          var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n          animation.tweens.push(tween);\n          return tween;\n        },\n        stop: function stop(gotoEnd) {\n          var index = 0,\n            // If we are going to the end, we want to run all the tweens\n            // otherwise we skip this part\n            length = gotoEnd ? animation.tweens.length : 0;\n          if (stopped) {\n            return this;\n          }\n          stopped = true;\n          for (; index < length; index++) {\n            animation.tweens[index].run(1);\n          }\n\n          // Resolve when we played the last frame; otherwise, reject\n          if (gotoEnd) {\n            deferred.notifyWith(elem, [animation, 1, 0]);\n            deferred.resolveWith(elem, [animation, gotoEnd]);\n          } else {\n            deferred.rejectWith(elem, [animation, gotoEnd]);\n          }\n          return this;\n        }\n      }),\n      props = animation.props;\n    propFilter(props, animation.opts.specialEasing);\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n        return result;\n      }\n    }\n    jQuery.map(props, createTween, animation);\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    }\n\n    // Attach callbacks from options\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      \"*\": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function tweener(props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = [\"*\"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n      var prop,\n        index = 0,\n        length = props.length;\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function prefilter(callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && _typeof(speed) === \"object\" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    };\n\n    // Go to the end state if fx are off\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== \"number\") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    }\n\n    // Normalize opt.queue - true/undefined/null -> \"fx\"\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = \"fx\";\n    }\n\n    // Queueing\n    opt.old = opt.complete;\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n    return opt;\n  };\n  jQuery.fn.extend({\n    fadeTo: function fadeTo(speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css(\"opacity\", 0).show()\n\n      // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function animate(prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n        optall = jQuery.speed(speed, easing, callback),\n        doAnimation = function doAnimation() {\n          // Operate on a copy of prop so per-property easing won't be lost\n          var anim = Animation(this, jQuery.extend({}, prop), optall);\n\n          // Empty animations, or finishing resolves immediately\n          if (empty || dataPriv.get(this, \"finish\")) {\n            anim.stop(true);\n          }\n        };\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function stop(type, clearQueue, gotoEnd) {\n      var stopQueue = function stopQueue(hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n      if (typeof type !== \"string\") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n      if (clearQueue) {\n        this.queue(type || \"fx\", []);\n      }\n      return this.each(function () {\n        var dequeue = true,\n          index = type != null && type + \"queueHooks\",\n          timers = jQuery.timers,\n          data = dataPriv.get(this);\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        }\n\n        // Start the next in the queue if the last step wasn't forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function finish(type) {\n      if (type !== false) {\n        type = type || \"fx\";\n      }\n      return this.each(function () {\n        var index,\n          data = dataPriv.get(this),\n          queue = data[type + \"queue\"],\n          hooks = data[type + \"queueHooks\"],\n          timers = jQuery.timers,\n          length = queue ? queue.length : 0;\n\n        // Enable finishing flag on private data\n        data.finish = true;\n\n        // Empty the queue first\n        jQuery.queue(this, type, []);\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        }\n\n        // Look for any active animations, and finish them\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        }\n\n        // Look for any animations in the old queue and finish them\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        }\n\n        // Turn off finishing flag\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each([\"toggle\", \"show\", \"hide\"], function (_i, name) {\n    var cssFn = jQuery.fn[name];\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  });\n\n  // Generate shortcuts for custom animations\n  jQuery.each({\n    slideDown: genFx(\"show\"),\n    slideUp: genFx(\"hide\"),\n    slideToggle: genFx(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n  jQuery.fx.tick = function () {\n    var timer,\n      i = 0,\n      timers = jQuery.timers;\n    fxNow = Date.now();\n    for (; i < timers.length; i++) {\n      timer = timers[i];\n\n      // Run the timer and safely remove it when done (allowing for external removal)\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n    fxNow = undefined;\n  };\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n  jQuery.fx.interval = 13;\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n    inProgress = true;\n    schedule();\n  };\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  };\n\n  // Based off of the plugin by Clint Helfers, with permission.\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || \"fx\";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n  (function () {\n    var input = document.createElement(\"input\"),\n      select = document.createElement(\"select\"),\n      opt = select.appendChild(document.createElement(\"option\"));\n    input.type = \"checkbox\";\n\n    // Support: Android <=4.3 only\n    // Default value for a checkbox should be \"on\"\n    support.checkOn = input.value !== \"\";\n\n    // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n    support.optSelected = opt.selected;\n\n    // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n    input = document.createElement(\"input\");\n    input.value = \"t\";\n    input.type = \"radio\";\n    support.radioValue = input.value === \"t\";\n  })();\n  var boolHook,\n    attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function attr(name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function attr(elem, name, value) {\n      var ret,\n        hooks,\n        nType = elem.nodeType;\n\n      // Don't get/set attributes on text, comment and attribute nodes\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      // Fallback to prop when attributes are not supported\n      if (typeof elem.getAttribute === \"undefined\") {\n        return jQuery.prop(elem, name, value);\n      }\n\n      // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n        elem.setAttribute(name, value + \"\");\n        return value;\n      }\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n      ret = jQuery.find.attr(elem, name);\n\n      // Non-existent attributes return null, we normalize to undefined\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function set(elem, value) {\n          if (!support.radioValue && value === \"radio\" && nodeName(elem, \"input\")) {\n            var val = elem.value;\n            elem.setAttribute(\"type\", value);\n            if (val) {\n              elem.value = val;\n            }\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(elem, value) {\n      var name,\n        i = 0,\n        // Attribute names can contain non-HTML whitespace characters\n        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n        attrNames = value && value.match(rnothtmlwhite);\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  });\n\n  // Hooks for boolean attributes\n  boolHook = {\n    set: function set(elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n        handle,\n        lowercaseName = name.toLowerCase();\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n    rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function prop(name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function removeProp(name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function prop(elem, name, value) {\n      var ret,\n        hooks,\n        nType = elem.nodeType;\n\n      // Don't get/set properties on text, comment and attribute nodes\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n      if (value !== undefined) {\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n        return elem[name] = value;\n      }\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn't always return the\n          // correct value when it hasn't been explicitly set\n          // Use proper attribute retrieval (trac-12072)\n          var tabindex = jQuery.find.attr(elem, \"tabindex\");\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  });\n\n  // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule \"no-unused-expressions\" is disabled for this code\n  // since it considers such accessions noop\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function get(elem) {\n        /* eslint no-unused-expressions: \"off\" */\n\n        var parent = elem.parentNode;\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n        return null;\n      },\n      set: function set(elem) {\n        /* eslint no-unused-expressions: \"off\" */\n\n        var parent = elem.parentNode;\n        if (parent) {\n          parent.selectedIndex;\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n  jQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  });\n\n  // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(\" \");\n  }\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute(\"class\") || \"\";\n  }\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      return value.match(rnothtmlwhite) || [];\n    }\n    return [];\n  }\n  jQuery.fn.extend({\n    addClass: function addClass(value) {\n      var classNames, cur, curValue, className, i, finalValue;\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n      classNames = classesToArray(value);\n      if (classNames.length) {\n        return this.each(function () {\n          curValue = getClass(this);\n          cur = this.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n          if (cur) {\n            for (i = 0; i < classNames.length; i++) {\n              className = classNames[i];\n              if (cur.indexOf(\" \" + className + \" \") < 0) {\n                cur += className + \" \";\n              }\n            }\n\n            // Only assign if different to avoid unneeded rendering.\n            finalValue = stripAndCollapse(cur);\n            if (curValue !== finalValue) {\n              this.setAttribute(\"class\", finalValue);\n            }\n          }\n        });\n      }\n      return this;\n    },\n    removeClass: function removeClass(value) {\n      var classNames, cur, curValue, className, i, finalValue;\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n      if (!arguments.length) {\n        return this.attr(\"class\", \"\");\n      }\n      classNames = classesToArray(value);\n      if (classNames.length) {\n        return this.each(function () {\n          curValue = getClass(this);\n\n          // This expression is here for better compressibility (see addClass)\n          cur = this.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n          if (cur) {\n            for (i = 0; i < classNames.length; i++) {\n              className = classNames[i];\n\n              // Remove *all* instances\n              while (cur.indexOf(\" \" + className + \" \") > -1) {\n                cur = cur.replace(\" \" + className + \" \", \" \");\n              }\n            }\n\n            // Only assign if different to avoid unneeded rendering.\n            finalValue = stripAndCollapse(cur);\n            if (curValue !== finalValue) {\n              this.setAttribute(\"class\", finalValue);\n            }\n          }\n        });\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(value, stateVal) {\n      var classNames,\n        className,\n        i,\n        self,\n        type = _typeof(value),\n        isValidValue = type === \"string\" || Array.isArray(value);\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n      if (typeof stateVal === \"boolean\" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n      classNames = classesToArray(value);\n      return this.each(function () {\n        if (isValidValue) {\n          // Toggle individual class names\n          self = jQuery(this);\n          for (i = 0; i < classNames.length; i++) {\n            className = classNames[i];\n\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          }\n\n          // Toggle whole class name\n        } else if (value === undefined || type === \"boolean\") {\n          className = getClass(this);\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, \"__className__\", className);\n          }\n\n          // If the element has a class name or if we're passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n          if (this.setAttribute) {\n            this.setAttribute(\"class\", className || value === false ? \"\" : dataPriv.get(this, \"__className__\") || \"\");\n          }\n        }\n      });\n    },\n    hasClass: function hasClass(selector) {\n      var className,\n        elem,\n        i = 0;\n      className = \" \" + selector + \" \";\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (\" \" + stripAndCollapse(getClass(elem)) + \" \").indexOf(className) > -1) {\n          return true;\n        }\n      }\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function val(value) {\n      var hooks,\n        ret,\n        valueIsFunction,\n        elem = this[0];\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n          if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n            return ret;\n          }\n          ret = elem.value;\n\n          // Handle most common string cases\n          if (typeof ret === \"string\") {\n            return ret.replace(rreturn, \"\");\n          }\n\n          // Handle cases where value is null/undef or number\n          return ret == null ? \"\" : ret;\n        }\n        return;\n      }\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n        if (this.nodeType !== 1) {\n          return;\n        }\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        }\n\n        // Treat null/undefined as \"\"; convert numbers to string\n        if (val == null) {\n          val = \"\";\n        } else if (typeof val === \"number\") {\n          val += \"\";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? \"\" : value + \"\";\n          });\n        }\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n        // If set returns undefined, fall back to normal setting\n        if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function get(elem) {\n          var val = jQuery.find.attr(elem, \"value\");\n          return val != null ? val :\n          // Support: IE <=10 - 11 only\n          // option.text throws exceptions (trac-14686, trac-14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function get(elem) {\n          var value,\n            option,\n            i,\n            options = elem.options,\n            index = elem.selectedIndex,\n            one = elem.type === \"select-one\",\n            values = one ? null : [],\n            max = one ? index + 1 : options.length;\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          }\n\n          // Loop through all the selected options\n          for (; i < max; i++) {\n            option = options[i];\n\n            // Support: IE <=9 only\n            // IE8-9 doesn't update selected after form reset (trac-2551)\n            if ((option.selected || i === index) &&\n            // Don't return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, \"optgroup\"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val();\n\n              // We don't need an array for one selects\n              if (one) {\n                return value;\n              }\n\n              // Multi-Selects return an array\n              values.push(value);\n            }\n          }\n          return values;\n        },\n        set: function set(elem, value) {\n          var optionSet,\n            option,\n            options = elem.options,\n            values = jQuery.makeArray(value),\n            i = options.length;\n          while (i--) {\n            option = options[i];\n\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n\n            /* eslint-enable no-cond-assign */\n          }\n\n          // Force browsers to behave consistently when non-matching value is set\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n          return values;\n        }\n      }\n    }\n  });\n\n  // Radios and checkboxes getter/setter\n  jQuery.each([\"radio\", \"checkbox\"], function () {\n    jQuery.valHooks[this] = {\n      set: function set(elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n      };\n    }\n  });\n\n  // Return jQuery for attributes-only inclusion\n\n  support.focusin = \"onfocusin\" in window;\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n    stopPropagationCallback = function stopPropagationCallback(e) {\n      e.stopPropagation();\n    };\n  jQuery.extend(jQuery.event, {\n    trigger: function trigger(event, data, elem, onlyHandlers) {\n      var i,\n        cur,\n        tmp,\n        bubbleType,\n        ontype,\n        handle,\n        special,\n        lastElement,\n        eventPath = [elem || document],\n        type = hasOwn.call(event, \"type\") ? event.type : event,\n        namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n      cur = lastElement = tmp = elem = elem || document;\n\n      // Don't do events on text and comment nodes\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      }\n\n      // focus/blur morphs to focusin/out; ensure we're not firing them right now\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n      if (type.indexOf(\".\") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(\".\");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n      ontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n      // Caller can pass in a jQuery.Event object, Object, or just an event type string\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === \"object\" && event);\n\n      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(\".\");\n      event.rnamespace = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n\n      // Clean up the event in case it is being reused\n      event.result = undefined;\n      if (!event.target) {\n        event.target = elem;\n      }\n\n      // Clone any incoming data and prepend the event, creating the handler arg list\n      data = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n      // Allow special events to draw outside the lines\n      special = jQuery.event.special[type] || {};\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      }\n\n      // Determine event propagation path in advance, per W3C events spec (trac-9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        }\n\n        // Only add window if we got to document (e.g., not plain obj or detached DOM)\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      }\n\n      // Fire handlers on the event path\n      i = 0;\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type;\n\n        // jQuery handler\n        handle = (dataPriv.get(cur, \"events\") || Object.create(null))[event.type] && dataPriv.get(cur, \"handle\");\n        if (handle) {\n          handle.apply(cur, data);\n        }\n\n        // Native handler\n        handle = ontype && cur[ontype];\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n      event.type = type;\n\n      // If nobody prevented the default action, do it now\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don't do default actions on window, that's where global variables be (trac-6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don't re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n            if (tmp) {\n              elem[ontype] = null;\n            }\n\n            // Prevent re-triggering of the same event, since we already bubbled it above\n            jQuery.event.triggered = type;\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n            elem[type]();\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n            jQuery.event.triggered = undefined;\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function simulate(type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function trigger(type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function triggerHandler(type, data) {\n      var elem = this[0];\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  });\n\n  // Support: Firefox <=44\n  // Firefox doesn't have focus(in | out) events\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n  //\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n  // focus(in | out) events fire after focus & blur events,\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n  if (!support.focusin) {\n    jQuery.each({\n      focus: \"focusin\",\n      blur: \"focusout\"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function handler(event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n      };\n      jQuery.event.special[fix] = {\n        setup: function setup() {\n          // Handle: regular nodes (via `this.ownerDocument`), window\n          // (via `this.document`) & document (via `this`).\n          var doc = this.ownerDocument || this.document || this,\n            attaches = dataPriv.access(doc, fix);\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function teardown() {\n          var doc = this.ownerDocument || this.document || this,\n            attaches = dataPriv.access(doc, fix) - 1;\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            dataPriv.remove(doc, fix);\n          } else {\n            dataPriv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n  var location = window.location;\n  var nonce = {\n    guid: Date.now()\n  };\n  var rquery = /\\?/;\n\n  // Cross-browser xml parsing\n  jQuery.parseXML = function (data) {\n    var xml, parserErrorElem;\n    if (!data || typeof data !== \"string\") {\n      return null;\n    }\n\n    // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n    try {\n      xml = new window.DOMParser().parseFromString(data, \"text/xml\");\n    } catch (e) {}\n    parserErrorElem = xml && xml.getElementsByTagName(\"parsererror\")[0];\n    if (!xml || parserErrorElem) {\n      jQuery.error(\"Invalid XML: \" + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {\n        return el.textContent;\n      }).join(\"\\n\") : data));\n    }\n    return xml;\n  };\n  var rbracket = /\\[\\]$/,\n    rCRLF = /\\r?\\n/g,\n    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + \"[\" + (_typeof(v) === \"object\" && v != null ? i : \"\") + \"]\", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === \"object\") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  }\n\n  // Serialize an array of form elements or a set of\n  // key/values into a query string\n  jQuery.param = function (a, traditional) {\n    var prefix,\n      s = [],\n      add = function add(key, valueOrFunction) {\n        // If value is a function, invoke it and use its return value\n        var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n        s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value == null ? \"\" : value);\n      };\n    if (a == null) {\n      return \"\";\n    }\n\n    // If an array was passed in, assume that it is an array of form elements.\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    }\n\n    // Return the resulting serialization\n    return s.join(\"&\");\n  };\n  jQuery.fn.extend({\n    serialize: function serialize() {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        // Can add propHook for \"elements\" to filter or add form elements\n        var elements = jQuery.prop(this, \"elements\");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type;\n\n        // Use .is( \":disabled\" ) so that fieldset[disabled] works\n        return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (_i, elem) {\n        var val = jQuery(this).val();\n        if (val == null) {\n          return null;\n        }\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, \"\\r\\n\")\n            };\n          });\n        }\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var r20 = /%20/g,\n    rhash = /#.*$/,\n    rantiCache = /([?&])_=[^&]*/,\n    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n    // trac-7653, trac-8125, trac-8152: local protocol detection\n    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n    rnoContent = /^(?:GET|HEAD)$/,\n    rprotocol = /^\\/\\//,\n    /* Prefilters\n     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n     * 2) These are called:\n     *    - BEFORE asking for a transport\n     *    - AFTER param serialization (s.data is a string if s.processData is true)\n     * 3) key is the dataType\n     * 4) the catchall symbol \"*\" can be used\n     * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n     */\n    prefilters = {},\n    /* Transports bindings\n     * 1) key is the dataType\n     * 2) the catchall symbol \"*\" can be used\n     * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n     */\n    transports = {},\n    // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n    allTypes = \"*/\".concat(\"*\"),\n    // Anchor tag for parsing the document origin\n    originAnchor = document.createElement(\"a\");\n  originAnchor.href = location.href;\n\n  // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to \"*\"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== \"string\") {\n        func = dataTypeExpression;\n        dataTypeExpression = \"*\";\n      }\n      var dataType,\n        i = 0,\n        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === \"+\") {\n            dataType = dataType.slice(1) || \"*\";\n            (structure[dataType] = structure[dataType] || []).unshift(func);\n\n            // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  }\n\n  // Base inspection function for prefilters and transports\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n      seekingTransport = structure === transports;\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n        if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n    return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n  }\n\n  // A special extend for ajax options\n  // that takes \"flat\" options (not to be deep extended)\n  // Fixes trac-9887\n  function ajaxExtend(target, src) {\n    var key,\n      deep,\n      flatOptions = jQuery.ajaxSettings.flatOptions || {};\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n    return target;\n  }\n\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n      type,\n      finalDataType,\n      firstDataType,\n      contents = s.contents,\n      dataTypes = s.dataTypes;\n\n    // Remove auto dataType and get content-type in the process\n    while (dataTypes[0] === \"*\") {\n      dataTypes.shift();\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n      }\n    }\n\n    // Check if we're dealing with a known content-type\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    }\n\n    // Check to see if we have a response for the expected dataType\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      }\n\n      // Or just use first one\n      finalDataType = finalDataType || firstDataType;\n    }\n\n    // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n      return responses[finalDataType];\n    }\n  }\n\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n      current,\n      conv,\n      tmp,\n      prev,\n      converters = {},\n      // Work with a copy of dataTypes in case we need to modify it for conversion\n      dataTypes = s.dataTypes.slice();\n\n    // Create converters map with lowercased keys\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n    current = dataTypes.shift();\n\n    // Convert to each sequential dataType\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      }\n\n      // Apply the dataFilter if provided\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n      prev = current;\n      current = dataTypes.shift();\n      if (current) {\n        // There's only work to do if current dataType is non-auto\n        if (current === \"*\") {\n          current = prev;\n\n          // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== \"*\" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + \" \" + current] || converters[\"* \" + current];\n\n          // If none found, seek a pair\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(\" \");\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2];\n\n                    // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n                  break;\n                }\n              }\n            }\n          }\n\n          // Apply converter (if not an equivalence)\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s.throws) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n    return {\n      state: \"success\",\n      data: response\n    };\n  }\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: \"GET\",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n\n      accepts: {\n        \"*\": allTypes,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      // Data converters\n      // Keys separate source (or catchall \"*\") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        \"* text\": String,\n        // Text to html (true = no transformation)\n        \"text html\": true,\n        // Evaluate text as a json expression\n        \"text json\": JSON.parse,\n        // Parse text as xml\n        \"text xml\": jQuery.parseXML\n      },\n      // For options that shouldn't be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn't be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function ajaxSetup(target, settings) {\n      return settings ?\n      // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n      // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function ajax(url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (_typeof(url) === \"object\") {\n        options = url;\n        url = undefined;\n      }\n\n      // Force options to be an object\n      options = options || {};\n      var transport,\n        // URL without anti-cache param\n        cacheURL,\n        // Response headers\n        responseHeadersString,\n        responseHeaders,\n        // timeout handle\n        timeoutTimer,\n        // Url cleanup var\n        urlAnchor,\n        // Request state (becomes false upon send and true upon completion)\n        completed,\n        // To know if global events are to be dispatched\n        fireGlobals,\n        // Loop variable\n        i,\n        // uncached part of the url\n        uncached,\n        // Create the final options object\n        s = jQuery.ajaxSetup({}, options),\n        // Callbacks context\n        callbackContext = s.context || s,\n        // Context for global events is callbackContext if it is a DOM node or jQuery collection\n        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n        // Deferreds\n        deferred = jQuery.Deferred(),\n        completeDeferred = jQuery.Callbacks(\"once memory\"),\n        // Status-dependent callbacks\n        _statusCode = s.statusCode || {},\n        // Headers (they are sent all at once)\n        requestHeaders = {},\n        requestHeadersNames = {},\n        // Default abort message\n        strAbort = \"canceled\",\n        // Fake xhr\n        jqXHR = {\n          readyState: 0,\n          // Builds headers hashtable if needed\n          getResponseHeader: function getResponseHeader(key) {\n            var match;\n            if (completed) {\n              if (!responseHeaders) {\n                responseHeaders = {};\n                while (match = rheaders.exec(responseHeadersString)) {\n                  responseHeaders[match[1].toLowerCase() + \" \"] = (responseHeaders[match[1].toLowerCase() + \" \"] || []).concat(match[2]);\n                }\n              }\n              match = responseHeaders[key.toLowerCase() + \" \"];\n            }\n            return match == null ? null : match.join(\", \");\n          },\n          // Raw string\n          getAllResponseHeaders: function getAllResponseHeaders() {\n            return completed ? responseHeadersString : null;\n          },\n          // Caches the header\n          setRequestHeader: function setRequestHeader(name, value) {\n            if (completed == null) {\n              name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n              requestHeaders[name] = value;\n            }\n            return this;\n          },\n          // Overrides response content-type header\n          overrideMimeType: function overrideMimeType(type) {\n            if (completed == null) {\n              s.mimeType = type;\n            }\n            return this;\n          },\n          // Status-dependent callbacks\n          statusCode: function statusCode(map) {\n            var code;\n            if (map) {\n              if (completed) {\n                // Execute the appropriate callbacks\n                jqXHR.always(map[jqXHR.status]);\n              } else {\n                // Lazy-add the new callbacks in a way that preserves old ones\n                for (code in map) {\n                  _statusCode[code] = [_statusCode[code], map[code]];\n                }\n              }\n            }\n            return this;\n          },\n          // Cancel the request\n          abort: function abort(statusText) {\n            var finalText = statusText || strAbort;\n            if (transport) {\n              transport.abort(finalText);\n            }\n            done(0, finalText);\n            return this;\n          }\n        };\n\n      // Attach deferreds\n      deferred.promise(jqXHR);\n\n      // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (trac-10093: consistency with old signature)\n      // We also use the url parameter if available\n      s.url = ((url || s.url || location.href) + \"\").replace(rprotocol, location.protocol + \"//\");\n\n      // Alias method option to type as per ticket trac-12004\n      s.type = options.method || options.type || s.method || s.type;\n\n      // Extract dataTypes list\n      s.dataTypes = (s.dataType || \"*\").toLowerCase().match(rnothtmlwhite) || [\"\"];\n\n      // A cross-domain request is in order when the origin doesn't match the current origin.\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement(\"a\");\n\n        // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n        try {\n          urlAnchor.href = s.url;\n\n          // Support: IE <=8 - 11 only\n          // Anchor's host property isn't correctly set when s.url is relative\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      }\n\n      // Convert data if not already a string\n      if (s.data && s.processData && typeof s.data !== \"string\") {\n        s.data = jQuery.param(s.data, s.traditional);\n      }\n\n      // Apply prefilters\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n      // If request was aborted inside a prefilter, stop there\n      if (completed) {\n        return jqXHR;\n      }\n\n      // We can fire global events as of now if asked to\n      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n      fireGlobals = jQuery.event && s.global;\n\n      // Watch for a new set of requests\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger(\"ajaxStart\");\n      }\n\n      // Uppercase the type\n      s.type = s.type.toUpperCase();\n\n      // Determine if request has content\n      s.hasContent = !rnoContent.test(s.type);\n\n      // Save the URL in case we're toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n      cacheURL = s.url.replace(rhash, \"\");\n\n      // More options handling for requests with no content\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length);\n\n        // If data is available and should be processed, append data to url\n        if (s.data && (s.processData || typeof s.data === \"string\")) {\n          cacheURL += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\n\n          // trac-9682: remove data so that it's not used in an eventual retry\n          delete s.data;\n        }\n\n        // Add or update anti-cache param if needed\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, \"$1\");\n          uncached = (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce.guid++ + uncached;\n        }\n\n        // Put hash and anti-cache on the URL that will be requested (gh-1732)\n        s.url = cacheURL + uncached;\n\n        // Change '%20' to '+' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0) {\n        s.data = s.data.replace(r20, \"+\");\n      }\n\n      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n        }\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n        }\n      }\n\n      // Set the correct header, if data is being sent\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n      }\n\n      // Set the Accepts header for the server, depending on the dataType\n      jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\n\n      // Check for headers option\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      }\n\n      // Allow custom headers/mimetypes and early abort\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      }\n\n      // Aborting is no longer a cancellation\n      strAbort = \"abort\";\n\n      // Install callbacks on deferreds\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error);\n\n      // Get transport\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n      // If no transport, we auto-abort\n      if (!transport) {\n        done(-1, \"No Transport\");\n      } else {\n        jqXHR.readyState = 1;\n\n        // Send global event\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n        }\n\n        // If request was aborted inside ajaxSend, stop there\n        if (completed) {\n          return jqXHR;\n        }\n\n        // Timeout\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort(\"timeout\");\n          }, s.timeout);\n        }\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          }\n\n          // Propagate others as results\n          done(-1, e);\n        }\n      }\n\n      // Callback for when everything is done\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n          success,\n          error,\n          response,\n          modified,\n          statusText = nativeStatusText;\n\n        // Ignore repeat invocations\n        if (completed) {\n          return;\n        }\n        completed = true;\n\n        // Clear timeout if it exists\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        }\n\n        // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n        transport = undefined;\n\n        // Cache response headers\n        responseHeadersString = headers || \"\";\n\n        // Set readyState\n        jqXHR.readyState = status > 0 ? 4 : 0;\n\n        // Determine if successful\n        isSuccess = status >= 200 && status < 300 || status === 304;\n\n        // Get response data\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        }\n\n        // Use a noop converter for missing script but not if jsonp\n        if (!isSuccess && jQuery.inArray(\"script\", s.dataTypes) > -1 && jQuery.inArray(\"json\", s.dataTypes) < 0) {\n          s.converters[\"text script\"] = function () {};\n        }\n\n        // Convert no matter what (that way responseXXX fields are always set)\n        response = ajaxConvert(s, response, jqXHR, isSuccess);\n\n        // If successful, handle type chaining\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader(\"Last-Modified\");\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n            modified = jqXHR.getResponseHeader(\"etag\");\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          }\n\n          // if no content\n          if (status === 204 || s.type === \"HEAD\") {\n            statusText = \"nocontent\";\n\n            // if not modified\n          } else if (status === 304) {\n            statusText = \"notmodified\";\n\n            // If we have data, let's convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n          if (status || !statusText) {\n            statusText = \"error\";\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        }\n\n        // Set data for the fake xhr object\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + \"\";\n\n        // Success/Error\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        }\n\n        // Status-dependent callbacks\n        jqXHR.statusCode(_statusCode);\n        _statusCode = undefined;\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n        }\n\n        // Complete\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n\n          // Handle the global AJAX counter\n          if (! --jQuery.active) {\n            jQuery.event.trigger(\"ajaxStop\");\n          }\n        }\n      }\n      return jqXHR;\n    },\n    getJSON: function getJSON(url, data, callback) {\n      return jQuery.get(url, data, callback, \"json\");\n    },\n    getScript: function getScript(url, callback) {\n      return jQuery.get(url, undefined, callback, \"script\");\n    }\n  });\n  jQuery.each([\"get\", \"post\"], function (_i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      }\n\n      // The url can be an options object (which then must have .url)\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  jQuery.ajaxPrefilter(function (s) {\n    var i;\n    for (i in s.headers) {\n      if (i.toLowerCase() === \"content-type\") {\n        s.contentType = s.headers[i] || \"\";\n      }\n    }\n  });\n  jQuery._evalUrl = function (url, options, doc) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (trac-11264)\n      type: \"GET\",\n      dataType: \"script\",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        \"text script\": function textScript() {}\n      },\n      dataFilter: function dataFilter(response) {\n        jQuery.globalEval(response, options, doc);\n      }\n    });\n  };\n  jQuery.fn.extend({\n    wrapAll: function wrapAll(html) {\n      var wrap;\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        }\n\n        // The elements to wrap the target around\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n        wrap.map(function () {\n          var elem = this;\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n          return elem;\n        }).append(this);\n      }\n      return this;\n    },\n    wrapInner: function wrapInner(html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n      return this.each(function () {\n        var self = jQuery(this),\n          contents = self.contents();\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function wrap(html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function unwrap(selector) {\n      this.parent(selector).not(\"body\").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n  var xhrSuccessStatus = {\n      // File protocol always yields status code 0, assume 200\n      0: 200,\n      // Support: IE <=9 only\n      // trac-1450: sometimes IE returns 1223 when it should be 204\n      1223: 204\n    },\n    xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var _callback, errorCallback;\n\n    // Cross domain only allowed if supported through XMLHttpRequest\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function send(headers, complete) {\n          var i,\n            xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password);\n\n          // Apply custom fields if provided\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          }\n\n          // Override mime type if needed\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          }\n\n          // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won't change header if already provided.\n          if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n            headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n          }\n\n          // Set headers\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          }\n\n          // Callback\n          _callback = function callback(type) {\n            return function () {\n              if (_callback) {\n                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n                if (type === \"abort\") {\n                  xhr.abort();\n                } else if (type === \"error\") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== \"number\") {\n                    complete(0, \"error\");\n                  } else {\n                    complete(\n                    // File: protocol always yields status 0; see trac-8605, trac-14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,\n                  // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || \"text\") !== \"text\" || typeof xhr.responseText !== \"string\" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          };\n\n          // Listen to events\n          xhr.onload = _callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = _callback(\"error\");\n\n          // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (_callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          }\n\n          // Create the abort callback\n          _callback = _callback(\"abort\");\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // trac-14683: Only rethrow if this hasn't been notified as an error yet\n            if (_callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function abort() {\n          if (_callback) {\n            _callback();\n          }\n        }\n      };\n    }\n  });\n\n  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  });\n\n  // Install script dataType\n  jQuery.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, \" + \"application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function textScript(text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  });\n\n  // Handle cache's special case and crossDomain\n  jQuery.ajaxPrefilter(\"script\", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n    if (s.crossDomain) {\n      s.type = \"GET\";\n    }\n  });\n\n  // Bind script tag hack transport\n  jQuery.ajaxTransport(\"script\", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, _callback2;\n      return {\n        send: function send(_, complete) {\n          script = jQuery(\"<script>\").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on(\"load error\", _callback2 = function callback(evt) {\n            script.remove();\n            _callback2 = null;\n            if (evt) {\n              complete(evt.type === \"error\" ? 404 : 200, evt.type);\n            }\n          });\n\n          // Use native DOM manipulation to avoid our domManip AJAX trickery\n          document.head.appendChild(script[0]);\n        },\n        abort: function abort() {\n          if (_callback2) {\n            _callback2();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n  // Default jsonp settings\n  jQuery.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  });\n\n  // Detect, normalize options and install callbacks for jsonp requests\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n    var callbackName,\n      overwritten,\n      responseContainer,\n      jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\");\n\n    // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n      // Insert callback into url or form data\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n      }\n\n      // Use data converter to retrieve json after script execution\n      s.converters[\"script json\"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + \" was not called\");\n        }\n        return responseContainer[0];\n      };\n\n      // Force json dataType\n      s.dataTypes[0] = \"json\";\n\n      // Install callback\n      overwritten = window[callbackName];\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      };\n\n      // Clean-up function (fires after converters)\n      jqXHR.always(function () {\n        // If previous value didn't exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName);\n\n          // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        }\n\n        // Save back as free\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn't screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback;\n\n          // Save the callback name for future use\n          oldCallbacks.push(callbackName);\n        }\n\n        // Call if it was a function and we have a response\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n        responseContainer = overwritten = undefined;\n      });\n\n      // Delegate to script\n      return \"script\";\n    }\n  });\n\n  // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument(\"\").body;\n    body.innerHTML = \"<form></form><form></form>\";\n    return body.childNodes.length === 2;\n  }();\n\n  // Argument \"data\" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== \"string\") {\n      return [];\n    }\n    if (typeof context === \"boolean\") {\n      keepScripts = context;\n      context = false;\n    }\n    var base, parsed, scripts;\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument(\"\");\n\n        // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document's URL (gh-2965)\n        base = context.createElement(\"base\");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && [];\n\n    // Single tag\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n    parsed = buildFragment([data], context, scripts);\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n    return jQuery.merge([], parsed.childNodes);\n  };\n\n  /**\n   * Load a url into a page\n   */\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n      type,\n      response,\n      self = this,\n      off = url.indexOf(\" \");\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    }\n\n    // If it's a function\n    if (isFunction(params)) {\n      // We assume that it's the callback\n      callback = params;\n      params = undefined;\n\n      // Otherwise, build a param string\n    } else if (params && _typeof(params) === \"object\") {\n      type = \"POST\";\n    }\n\n    // If we have elements to modify, make the request\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If \"type\" variable is undefined, then \"GET\" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || \"GET\",\n        dataType: \"html\",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ?\n        // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE 'Permission Denied' errors\n        jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) :\n        // Otherwise use the full result\n        responseText);\n\n        // If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n    return this;\n  };\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n  jQuery.offset = {\n    setOffset: function setOffset(elem, options, i) {\n      var curPosition,\n        curLeft,\n        curCSSTop,\n        curTop,\n        curOffset,\n        curCSSLeft,\n        calculatePosition,\n        position = jQuery.css(elem, \"position\"),\n        curElem = jQuery(elem),\n        props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === \"static\") {\n        elem.style.position = \"relative\";\n      }\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, \"top\");\n      curCSSLeft = jQuery.css(elem, \"left\");\n      calculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n      if (\"using\" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element's border box to the document origin\n    offset: function offset(options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n      var rect,\n        win,\n        elem = this[0];\n      if (!elem) {\n        return;\n      }\n\n      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n\n      // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element's margin box to its offset parent's padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function position() {\n      if (!this[0]) {\n        return;\n      }\n      var offsetParent,\n        offset,\n        doc,\n        elem = this[0],\n        parentOffset = {\n          top: 0,\n          left: 0\n        };\n\n      // position:fixed elements are offset from the viewport, which itself always has zero offset\n      if (jQuery.css(elem, \"position\") === \"fixed\") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset();\n\n        // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.parentNode;\n        }\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, \"borderTopWidth\", true);\n          parentOffset.left += jQuery.css(offsetParent, \"borderLeftWidth\", true);\n        }\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n        while (offsetParent && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.offsetParent;\n        }\n        return offsetParent || documentElement;\n      });\n    }\n  });\n\n  // Create scrollLeft and scrollTop methods\n  jQuery.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (method, prop) {\n    var top = \"pageYOffset\" === prop;\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  });\n\n  // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n  jQuery.each([\"top\", \"left\"], function (_i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop);\n\n        // If curCSS returns percentage, fallback to offset\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n      }\n    });\n  });\n\n  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n  jQuery.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (name, type) {\n    jQuery.each({\n      padding: \"inner\" + name,\n      content: type,\n      \"\": \"outer\" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n          extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n        return access(this, function (elem, type, value) {\n          var doc;\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf(\"outer\") === 0 ? elem[\"inner\" + name] : elem.document.documentElement[\"client\" + name];\n          }\n\n          // Get document width or height\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement;\n\n            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n            return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n          }\n          return value === undefined ?\n          // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) :\n          // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (_i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.fn.extend({\n    bind: function bind(types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function unbind(types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function delegate(selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function undelegate(selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n    },\n    hover: function hover(fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n  jQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (_i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  });\n\n  // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n  // Require that the \"whitespace run\" starts from a non-whitespace\n  // to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n  // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n    if (typeof context === \"string\") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    }\n\n    // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n    if (!isFunction(fn)) {\n      return undefined;\n    }\n\n    // Simulated bind\n    args = _slice.call(arguments, 2);\n    proxy = function proxy() {\n      return fn.apply(context || this, args.concat(_slice.call(arguments)));\n    };\n\n    // Set the guid of unique handler to the same of original handler, so it can be removed\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === \"number\" || type === \"string\") &&\n    // parseFloat NaNs numeric-cast false positives (\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n  jQuery.trim = function (text) {\n    return text == null ? \"\" : (text + \"\").replace(rtrim, \"$1\");\n  };\n\n  // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  var\n    // Map over jQuery in case of overwrite\n    _jQuery = window.jQuery,\n    // Map over the $ in case of overwrite\n    _$ = window.$;\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n    return jQuery;\n  };\n\n  // Expose jQuery and $ identifiers, even in AMD\n  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (trac-13566)\n  if (typeof noGlobal === \"undefined\") {\n    window.jQuery = window.$ = jQuery;\n  }\n  return jQuery;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/just-validate/dist/just-validate.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/just-validate/dist/just-validate.es.js ***!
  \*************************************************************/
/*! exports provided: CustomStyleTagIds, GroupRules, Rules, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CustomStyleTagIds\", function() { return CustomStyleTagIds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GroupRules\", function() { return GroupRules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rules\", function() { return Rules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return JustValidate; });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, _typeof(key) !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar EMAIL_REGEXP = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nvar INTEGER_REGEXP = /^-?[0-9]\\d*$/;\nvar PASSWORD_REGEXP = /^(?=.*[A-Za-z])(?=.*\\d).{8,}$/;\nvar STRONG_PASSWORD_REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\nvar isEmpty = function isEmpty(value) {\n  var newVal = value;\n  if (typeof value === \"string\") {\n    newVal = value.trim();\n  }\n  return !newVal;\n};\nvar isEmail = function isEmail(value) {\n  return EMAIL_REGEXP.test(value);\n};\nvar isLengthMoreThanMax = function isLengthMoreThanMax(value, len) {\n  return value.length > len;\n};\nvar isLengthLessThanMin = function isLengthLessThanMin(value, len) {\n  return value.length < len;\n};\nvar isNumber = function isNumber(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  return !isNaN(+value) && !isNaN(parseFloat(value));\n};\nvar isInteger = function isInteger(value) {\n  return INTEGER_REGEXP.test(value);\n};\nvar isPassword = function isPassword(value) {\n  return PASSWORD_REGEXP.test(value);\n};\nvar isStrongPassword = function isStrongPassword(value) {\n  return STRONG_PASSWORD_REGEXP.test(value);\n};\nvar isNumberMoreThanMax = function isNumberMoreThanMax(value, len) {\n  return value > len;\n};\nvar isNumberLessThanMin = function isNumberLessThanMin(value, len) {\n  return value < len;\n};\nvar isInvalidOrEmptyString = function isInvalidOrEmptyString(value) {\n  return typeof value !== \"string\" || value === \"\";\n};\nvar Rules = /* @__PURE__ */function (Rules2) {\n  Rules2[\"Required\"] = \"required\";\n  Rules2[\"Email\"] = \"email\";\n  Rules2[\"MinLength\"] = \"minLength\";\n  Rules2[\"MaxLength\"] = \"maxLength\";\n  Rules2[\"Password\"] = \"password\";\n  Rules2[\"Number\"] = \"number\";\n  Rules2[\"Integer\"] = \"integer\";\n  Rules2[\"MaxNumber\"] = \"maxNumber\";\n  Rules2[\"MinNumber\"] = \"minNumber\";\n  Rules2[\"StrongPassword\"] = \"strongPassword\";\n  Rules2[\"CustomRegexp\"] = \"customRegexp\";\n  Rules2[\"MinFilesCount\"] = \"minFilesCount\";\n  Rules2[\"MaxFilesCount\"] = \"maxFilesCount\";\n  Rules2[\"Files\"] = \"files\";\n  return Rules2;\n}(Rules || {});\nvar GroupRules = /* @__PURE__ */function (GroupRules2) {\n  GroupRules2[\"Required\"] = \"required\";\n  return GroupRules2;\n}(GroupRules || {});\nvar CustomStyleTagIds = /* @__PURE__ */function (CustomStyleTagIds2) {\n  CustomStyleTagIds2[\"Label\"] = \"label\";\n  CustomStyleTagIds2[\"LabelArrow\"] = \"labelArrow\";\n  return CustomStyleTagIds2;\n}(CustomStyleTagIds || {});\nvar defaultDictionary = [{\n  key: Rules.Required,\n  dict: {\n    en: \"The field is required\"\n  }\n}, {\n  key: Rules.Email,\n  dict: {\n    en: \"Email has invalid format\"\n  }\n}, {\n  key: Rules.MaxLength,\n  dict: {\n    en: \"The field must contain a maximum of :value characters\"\n  }\n}, {\n  key: Rules.MinLength,\n  dict: {\n    en: \"The field must contain a minimum of :value characters\"\n  }\n}, {\n  key: Rules.Password,\n  dict: {\n    en: \"Password must contain minimum eight characters, at least one letter and one number\"\n  }\n}, {\n  key: Rules.StrongPassword,\n  dict: {\n    en: \"Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"\n  }\n}, {\n  key: Rules.Number,\n  dict: {\n    en: \"Value should be a number\"\n  }\n}, {\n  key: Rules.MaxNumber,\n  dict: {\n    en: \"Number should be less or equal than :value\"\n  }\n}, {\n  key: Rules.MinNumber,\n  dict: {\n    en: \"Number should be more or equal than :value\"\n  }\n}, {\n  key: Rules.MinFilesCount,\n  dict: {\n    en: \"Files count should be more or equal than :value\"\n  }\n}, {\n  key: Rules.MaxFilesCount,\n  dict: {\n    en: \"Files count should be less or equal than :value\"\n  }\n}, {\n  key: Rules.Files,\n  dict: {\n    en: \"Uploaded files have one or several invalid properties (extension/size/type etc).\"\n  }\n}];\nvar DEFAULT_ERROR_FIELD_MESSAGE = \"Value is incorrect\";\nvar isPromise = function isPromise(val) {\n  return _typeof(val) === \"object\" && val !== null && \"then\" in val && typeof val.then === \"function\";\n};\nvar getNodeParents = function getNodeParents(el) {\n  var elem = el;\n  var els = [];\n  while (elem) {\n    els.unshift(elem);\n    elem = elem.parentNode;\n  }\n  return els;\n};\nvar getClosestParent = function getClosestParent(groups, parents) {\n  var reversedParents = _toConsumableArray(parents).reverse();\n  for (var i = 0, len = reversedParents.length; i < len; ++i) {\n    var parent = reversedParents[i];\n    for (var key in groups) {\n      var group = groups[key];\n      if (group.groupElem === parent) {\n        return [key, group];\n      }\n    }\n  }\n  return null;\n};\nvar getClassList = function getClassList(classList) {\n  if (Array.isArray(classList)) {\n    return classList.filter(function (cls) {\n      return cls.length > 0;\n    });\n  }\n  if (typeof classList === \"string\" && classList.trim()) {\n    return _toConsumableArray(classList.split(\" \").filter(function (cls) {\n      return cls.length > 0;\n    }));\n  }\n  return [];\n};\nvar isElement = function isElement(element) {\n  return element instanceof Element || element instanceof HTMLDocument;\n};\nvar errorLabelCss = \".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}\";\nvar TOOLTIP_ARROW_HEIGHT = 5;\nvar defaultGlobalConfig = {\n  errorFieldStyle: {\n    color: \"#b81111\",\n    border: \"1px solid #B81111\"\n  },\n  errorFieldCssClass: \"just-validate-error-field\",\n  successFieldCssClass: \"just-validate-success-field\",\n  errorLabelStyle: {\n    color: \"#b81111\"\n  },\n  errorLabelCssClass: \"just-validate-error-label\",\n  successLabelCssClass: \"just-validate-success-label\",\n  focusInvalidField: true,\n  lockForm: true,\n  testingMode: false,\n  validateBeforeSubmitting: false\n};\nvar JustValidate = /*#__PURE__*/function () {\n  function JustValidate(form, globalConfig, dictLocale) {\n    var _this = this;\n    _classCallCheck(this, JustValidate);\n    __publicField(this, \"form\", null);\n    __publicField(this, \"fields\", {});\n    __publicField(this, \"groupFields\", {});\n    __publicField(this, \"errors\", {});\n    __publicField(this, \"isValid\", false);\n    __publicField(this, \"isSubmitted\", false);\n    __publicField(this, \"globalConfig\", defaultGlobalConfig);\n    __publicField(this, \"errorLabels\", {});\n    __publicField(this, \"successLabels\", {});\n    __publicField(this, \"eventListeners\", []);\n    __publicField(this, \"dictLocale\", defaultDictionary);\n    __publicField(this, \"currentLocale\", \"en\");\n    __publicField(this, \"customStyleTags\", {});\n    __publicField(this, \"onSuccessCallback\");\n    __publicField(this, \"onFailCallback\");\n    __publicField(this, \"onValidateCallback\");\n    __publicField(this, \"tooltips\", []);\n    __publicField(this, \"lastScrollPosition\");\n    __publicField(this, \"isScrollTick\");\n    __publicField(this, \"fieldIds\", /* @__PURE__ */new Map());\n    __publicField(this, \"getKeyByFieldSelector\", function (field) {\n      return _this.fieldIds.get(field);\n    });\n    __publicField(this, \"getFieldSelectorByKey\", function (key) {\n      var _iterator = _createForOfIteratorHelper(_this.fieldIds),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            fieldSelector = _step$value[0],\n            k = _step$value[1];\n          if (key === k) {\n            return fieldSelector;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return void 0;\n    });\n    __publicField(this, \"getCompatibleFields\", function () {\n      var fields = {};\n      Object.keys(_this.fields).forEach(function (key) {\n        var newKey = key;\n        var fieldSelector = _this.getFieldSelectorByKey(key);\n        if (typeof fieldSelector === \"string\") {\n          newKey = fieldSelector;\n        }\n        fields[newKey] = _objectSpread({}, _this.fields[key]);\n      });\n      return fields;\n    });\n    __publicField(this, \"setKeyByFieldSelector\", function (field) {\n      if (_this.fieldIds.has(field)) {\n        return _this.fieldIds.get(field);\n      }\n      var key = String(_this.fieldIds.size + 1);\n      _this.fieldIds.set(field, key);\n      return key;\n    });\n    __publicField(this, \"refreshAllTooltips\", function () {\n      _this.tooltips.forEach(function (item) {\n        item.refresh();\n      });\n    });\n    __publicField(this, \"handleDocumentScroll\", function () {\n      _this.lastScrollPosition = window.scrollY;\n      if (!_this.isScrollTick) {\n        window.requestAnimationFrame(function () {\n          _this.refreshAllTooltips();\n          _this.isScrollTick = false;\n        });\n        _this.isScrollTick = true;\n      }\n    });\n    __publicField(this, \"formSubmitHandler\", function (ev) {\n      ev.preventDefault();\n      _this.isSubmitted = true;\n      _this.validateHandler(ev);\n    });\n    __publicField(this, \"handleFieldChange\", function (target) {\n      var foundKey;\n      for (var key in _this.fields) {\n        var field = _this.fields[key];\n        if (field.elem === target) {\n          foundKey = key;\n          break;\n        }\n      }\n      if (!foundKey) {\n        return;\n      }\n      _this.fields[foundKey].touched = true;\n      _this.validateField(foundKey, true);\n    });\n    __publicField(this, \"handleGroupChange\", function (target) {\n      var foundKey;\n      for (var key in _this.groupFields) {\n        var group = _this.groupFields[key];\n        if (group.elems.find(function (elem) {\n          return elem === target;\n        })) {\n          foundKey = key;\n          break;\n        }\n      }\n      if (!foundKey) {\n        return;\n      }\n      _this.groupFields[foundKey].touched = true;\n      _this.validateGroup(foundKey, true);\n    });\n    __publicField(this, \"handlerChange\", function (ev) {\n      if (!ev.target) {\n        return;\n      }\n      _this.handleFieldChange(ev.target);\n      _this.handleGroupChange(ev.target);\n      _this.renderErrors();\n    });\n    this.initialize(form, globalConfig, dictLocale);\n  }\n  _createClass(JustValidate, [{\n    key: \"initialize\",\n    value: function initialize(form, globalConfig, dictLocale) {\n      this.form = null;\n      this.errors = {};\n      this.isValid = false;\n      this.isSubmitted = false;\n      this.globalConfig = defaultGlobalConfig;\n      this.errorLabels = {};\n      this.successLabels = {};\n      this.eventListeners = [];\n      this.customStyleTags = {};\n      this.tooltips = [];\n      this.currentLocale = \"en\";\n      if (typeof form === \"string\") {\n        var elem = document.querySelector(form);\n        if (!elem) {\n          throw Error(\"Form with \".concat(form, \" selector not found! Please check the form selector\"));\n        }\n        this.setForm(elem);\n      } else if (form instanceof HTMLFormElement) {\n        this.setForm(form);\n      } else {\n        throw Error(\"Form selector is not valid. Please specify a string selector or a DOM element.\");\n      }\n      this.globalConfig = _objectSpread(_objectSpread({}, defaultGlobalConfig), globalConfig);\n      if (dictLocale) {\n        this.dictLocale = [].concat(_toConsumableArray(dictLocale), defaultDictionary);\n      }\n      if (this.isTooltip()) {\n        var styleTag = document.createElement(\"style\");\n        styleTag.textContent = errorLabelCss;\n        this.customStyleTags[CustomStyleTagIds.Label] = document.head.appendChild(styleTag);\n        this.addListener(\"scroll\", document, this.handleDocumentScroll);\n      }\n    }\n  }, {\n    key: \"getLocalisedString\",\n    value: function getLocalisedString(rule, ruleValue, customMsg) {\n      var _a;\n      var search = customMsg != null ? customMsg : rule;\n      var localisedStr = (_a = this.dictLocale.find(function (item) {\n        return item.key === search;\n      })) == null ? void 0 : _a.dict[this.currentLocale];\n      if (!localisedStr) {\n        if (customMsg) {\n          localisedStr = customMsg;\n        }\n      }\n      if (localisedStr && ruleValue !== void 0) {\n        switch (rule) {\n          case Rules.MaxLength:\n          case Rules.MinLength:\n          case Rules.MaxNumber:\n          case Rules.MinNumber:\n          case Rules.MinFilesCount:\n          case Rules.MaxFilesCount:\n            localisedStr = localisedStr.replace(\":value\", String(ruleValue));\n        }\n      }\n      return localisedStr || customMsg || DEFAULT_ERROR_FIELD_MESSAGE;\n    }\n  }, {\n    key: \"getFieldErrorMessage\",\n    value: function getFieldErrorMessage(fieldRule, elem) {\n      var msg = typeof fieldRule.errorMessage === \"function\" ? fieldRule.errorMessage(this.getElemValue(elem), this.fields) : fieldRule.errorMessage;\n      return this.getLocalisedString(fieldRule.rule, fieldRule.value, msg);\n    }\n  }, {\n    key: \"getFieldSuccessMessage\",\n    value: function getFieldSuccessMessage(successMessage, elem) {\n      var msg = typeof successMessage === \"function\" ? successMessage(this.getElemValue(elem), this.fields) : successMessage;\n      return this.getLocalisedString(void 0, void 0, msg);\n    }\n  }, {\n    key: \"getGroupErrorMessage\",\n    value: function getGroupErrorMessage(groupRule) {\n      return this.getLocalisedString(groupRule.rule, void 0, groupRule.errorMessage);\n    }\n  }, {\n    key: \"getGroupSuccessMessage\",\n    value: function getGroupSuccessMessage(groupRule) {\n      if (!groupRule.successMessage) {\n        return void 0;\n      }\n      return this.getLocalisedString(void 0, void 0, groupRule.successMessage);\n    }\n  }, {\n    key: \"setFieldInvalid\",\n    value: function setFieldInvalid(key, fieldRule) {\n      this.fields[key].isValid = false;\n      this.fields[key].errorMessage = this.getFieldErrorMessage(fieldRule, this.fields[key].elem);\n    }\n  }, {\n    key: \"setFieldValid\",\n    value: function setFieldValid(key, successMessage) {\n      this.fields[key].isValid = true;\n      if (successMessage !== void 0) {\n        this.fields[key].successMessage = this.getFieldSuccessMessage(successMessage, this.fields[key].elem);\n      }\n    }\n  }, {\n    key: \"setGroupInvalid\",\n    value: function setGroupInvalid(key, groupRule) {\n      this.groupFields[key].isValid = false;\n      this.groupFields[key].errorMessage = this.getGroupErrorMessage(groupRule);\n    }\n  }, {\n    key: \"setGroupValid\",\n    value: function setGroupValid(key, groupRule) {\n      this.groupFields[key].isValid = true;\n      this.groupFields[key].successMessage = this.getGroupSuccessMessage(groupRule);\n    }\n  }, {\n    key: \"getElemValue\",\n    value: function getElemValue(elem) {\n      switch (elem.type) {\n        case \"checkbox\":\n          return elem.checked;\n        case \"file\":\n          return elem.files;\n        default:\n          return elem.value;\n      }\n    }\n  }, {\n    key: \"validateGroupRule\",\n    value: function validateGroupRule(key, elems, groupRule) {\n      switch (groupRule.rule) {\n        case GroupRules.Required:\n          {\n            if (elems.every(function (elem) {\n              return !elem.checked;\n            })) {\n              this.setGroupInvalid(key, groupRule);\n            } else {\n              this.setGroupValid(key, groupRule);\n            }\n          }\n      }\n    }\n  }, {\n    key: \"validateFieldRule\",\n    value: function validateFieldRule(key, elem, fieldRule) {\n      var _this2 = this;\n      var afterInputChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var ruleValue = fieldRule.value;\n      var elemValue = this.getElemValue(elem);\n      if (fieldRule.plugin) {\n        var result = fieldRule.plugin(elemValue, this.getCompatibleFields());\n        if (!result) {\n          this.setFieldInvalid(key, fieldRule);\n        }\n        return;\n      }\n      switch (fieldRule.rule) {\n        case Rules.Required:\n          {\n            if (isEmpty(elemValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.Email:\n          {\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            if (!isEmail(elemValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.MaxLength:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (typeof ruleValue !== \"number\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] should be a number. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            if (isLengthMoreThanMax(elemValue, ruleValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.MinLength:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (typeof ruleValue !== \"number\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] should be a number. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            if (isLengthLessThanMin(elemValue, ruleValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.Password:\n          {\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            if (!isPassword(elemValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.StrongPassword:\n          {\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            if (!isStrongPassword(elemValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.Number:\n          {\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            if (!isNumber(elemValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.Integer:\n          {\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            if (!isInteger(elemValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.MaxNumber:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (typeof ruleValue !== \"number\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field should be a number. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            var num = +elemValue;\n            if (Number.isNaN(num) || isNumberMoreThanMax(num, ruleValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.MinNumber:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (typeof ruleValue !== \"number\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field should be a number. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (isInvalidOrEmptyString(elemValue)) {\n              break;\n            }\n            var _num = +elemValue;\n            if (Number.isNaN(_num) || isNumberLessThanMin(_num, ruleValue)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.CustomRegexp:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              return;\n            }\n            var regexp;\n            try {\n              regexp = new RegExp(ruleValue);\n            } catch (e) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] should be a valid regexp. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            var str = String(elemValue);\n            if (str !== \"\" && !regexp.test(str)) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n            break;\n          }\n        case Rules.MinFilesCount:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (typeof ruleValue !== \"number\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field should be a number. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length < ruleValue) {\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            break;\n          }\n        case Rules.MaxFilesCount:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (typeof ruleValue !== \"number\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field should be a number. The field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length > ruleValue) {\n              this.setFieldInvalid(key, fieldRule);\n              break;\n            }\n            break;\n          }\n        case Rules.Files:\n          {\n            if (ruleValue === void 0) {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field is not defined. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              return;\n            }\n            if (_typeof(ruleValue) !== \"object\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field should be an object. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              return;\n            }\n            var filesConfig = ruleValue.files;\n            if (_typeof(filesConfig) !== \"object\") {\n              console.error(\"Value for \".concat(fieldRule.rule, \" rule for [\").concat(key, \"] field should be an object with files array. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              return;\n            }\n            var isFilePropsInvalid = function isFilePropsInvalid(file, fileConfig) {\n              var minSizeInvalid = Number.isFinite(fileConfig.minSize) && file.size < fileConfig.minSize;\n              var maxSizeInvalid = Number.isFinite(fileConfig.maxSize) && file.size > fileConfig.maxSize;\n              var nameInvalid = Array.isArray(fileConfig.names) && !fileConfig.names.includes(file.name);\n              var extInvalid = Array.isArray(fileConfig.extensions) && !fileConfig.extensions.includes(file.name.split(\".\")[file.name.split(\".\").length - 1]);\n              var typeInvalid = Array.isArray(fileConfig.types) && !fileConfig.types.includes(file.type);\n              return minSizeInvalid || maxSizeInvalid || nameInvalid || extInvalid || typeInvalid;\n            };\n            if (_typeof(elemValue) === \"object\" && elemValue !== null) {\n              for (var fileIdx = 0, len = elemValue.length; fileIdx < len; ++fileIdx) {\n                var file = elemValue.item(fileIdx);\n                if (!file) {\n                  this.setFieldInvalid(key, fieldRule);\n                  break;\n                }\n                var filesInvalid = isFilePropsInvalid(file, filesConfig);\n                if (filesInvalid) {\n                  this.setFieldInvalid(key, fieldRule);\n                  break;\n                }\n              }\n            }\n            break;\n          }\n        default:\n          {\n            if (typeof fieldRule.validator !== \"function\") {\n              console.error(\"Validator for custom rule for [\".concat(key, \"] field should be a function. This field will be always invalid.\"));\n              this.setFieldInvalid(key, fieldRule);\n              return;\n            }\n            var _result = fieldRule.validator(elemValue, this.getCompatibleFields());\n            if (typeof _result !== \"boolean\" && typeof _result !== \"function\") {\n              console.error(\"Validator return value for [\".concat(key, \"] field should be boolean or function. It will be cast to boolean.\"));\n            }\n            if (typeof _result === \"function\") {\n              if (afterInputChanged) {\n                this.fields[key].asyncCheckPending = true;\n              } else {\n                this.fields[key].asyncCheckPending = false;\n                var promise = _result();\n                if (!isPromise(promise)) {\n                  console.error(\"Validator function for custom rule for [\".concat(key, \"] field should return a Promise. This field will be always invalid.\"));\n                  this.setFieldInvalid(key, fieldRule);\n                  return;\n                }\n                return promise.then(function (resp) {\n                  if (!resp) {\n                    _this2.setFieldInvalid(key, fieldRule);\n                  }\n                }).catch(function () {\n                  _this2.setFieldInvalid(key, fieldRule);\n                });\n              }\n            }\n            if (!_result) {\n              this.setFieldInvalid(key, fieldRule);\n            }\n          }\n      }\n    }\n  }, {\n    key: \"isFormValid\",\n    value: function isFormValid() {\n      var isValid = true;\n      for (var i = 0, len = Object.values(this.fields).length; i < len; ++i) {\n        var item = Object.values(this.fields)[i];\n        if (item.isValid === void 0) {\n          isValid = void 0;\n          break;\n        }\n        if (item.isValid === false) {\n          isValid = false;\n          break;\n        }\n      }\n      for (var _i2 = 0, _len = Object.values(this.groupFields).length; _i2 < _len; ++_i2) {\n        var _item = Object.values(this.groupFields)[_i2];\n        if (_item.isValid === void 0) {\n          isValid = void 0;\n          break;\n        }\n        if (_item.isValid === false) {\n          isValid = false;\n          break;\n        }\n      }\n      return isValid;\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(key) {\n      var _this3 = this;\n      var afterInputChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _a;\n      var field = this.fields[key];\n      field.isValid = true;\n      var promises = [];\n      _toConsumableArray(field.rules).reverse().forEach(function (rule) {\n        var res = _this3.validateFieldRule(key, field.elem, rule, afterInputChanged);\n        if (isPromise(res)) {\n          promises.push(res);\n        }\n      });\n      if (field.isValid) {\n        this.setFieldValid(key, (_a = field.config) == null ? void 0 : _a.successMessage);\n      }\n      return Promise.allSettled(promises).finally(function () {\n        var _a2;\n        if (afterInputChanged) {\n          (_a2 = _this3.onValidateCallback) == null ? void 0 : _a2.call(_this3, {\n            isValid: _this3.isFormValid(),\n            isSubmitted: _this3.isSubmitted,\n            fields: _this3.getCompatibleFields(),\n            groups: _objectSpread({}, _this3.groupFields)\n          });\n        }\n      });\n    }\n  }, {\n    key: \"revalidateField\",\n    value: function revalidateField(fieldSelector) {\n      var _this4 = this;\n      if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n        throw Error(\"Field selector is not valid. Please specify a string selector or a valid DOM element.\");\n      }\n      var key = this.getKeyByFieldSelector(fieldSelector);\n      if (!key || !this.fields[key]) {\n        console.error(\"Field not found. Check the field selector.\");\n        return Promise.reject();\n      }\n      return new Promise(function (resolve) {\n        _this4.validateField(key, true).finally(function () {\n          _this4.clearFieldStyle(key);\n          _this4.clearFieldLabel(key);\n          _this4.renderFieldError(key, true);\n          resolve(!!_this4.fields[key].isValid);\n        });\n      });\n    }\n  }, {\n    key: \"revalidateGroup\",\n    value: function revalidateGroup(groupSelector) {\n      var _this5 = this;\n      if (typeof groupSelector !== \"string\" && !isElement(groupSelector)) {\n        throw Error(\"Group selector is not valid. Please specify a string selector or a valid DOM element.\");\n      }\n      var key = this.getKeyByFieldSelector(groupSelector);\n      if (!key || !this.groupFields[key]) {\n        console.error(\"Group not found. Check the group selector.\");\n        return Promise.reject();\n      }\n      return new Promise(function (resolve) {\n        _this5.validateGroup(key).finally(function () {\n          _this5.clearFieldLabel(key);\n          _this5.renderGroupError(key, true);\n          resolve(!!_this5.groupFields[key].isValid);\n        });\n      });\n    }\n  }, {\n    key: \"validateGroup\",\n    value: function validateGroup(key) {\n      var _this6 = this;\n      var afterInputChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var group = this.groupFields[key];\n      var promises = [];\n      _toConsumableArray(group.rules).reverse().forEach(function (rule) {\n        var res = _this6.validateGroupRule(key, group.elems, rule);\n        if (isPromise(res)) {\n          promises.push(res);\n        }\n      });\n      return Promise.allSettled(promises).finally(function () {\n        var _a;\n        if (afterInputChanged) {\n          (_a = _this6.onValidateCallback) == null ? void 0 : _a.call(_this6, {\n            isValid: _this6.isFormValid(),\n            isSubmitted: _this6.isSubmitted,\n            fields: _this6.getCompatibleFields(),\n            groups: _objectSpread({}, _this6.groupFields)\n          });\n        }\n      });\n    }\n  }, {\n    key: \"focusInvalidField\",\n    value: function focusInvalidField() {\n      var _this7 = this;\n      var _loop = function _loop() {\n        var field = _this7.fields[key];\n        if (!field.isValid) {\n          setTimeout(function () {\n            return field.elem.focus();\n          }, 0);\n          return \"break\";\n        }\n      };\n      for (var key in this.fields) {\n        var _ret = _loop();\n        if (_ret === \"break\") break;\n      }\n    }\n  }, {\n    key: \"afterSubmitValidation\",\n    value: function afterSubmitValidation() {\n      var forceRevalidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.renderErrors(forceRevalidation);\n      if (this.globalConfig.focusInvalidField) {\n        this.focusInvalidField();\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var _this8 = this;\n      var forceRevalidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Promise(function (resolve) {\n        var promises = [];\n        Object.keys(_this8.fields).forEach(function (key) {\n          var promise = _this8.validateField(key);\n          if (isPromise(promise)) {\n            promises.push(promise);\n          }\n        });\n        Object.keys(_this8.groupFields).forEach(function (key) {\n          var promise = _this8.validateGroup(key);\n          if (isPromise(promise)) {\n            promises.push(promise);\n          }\n        });\n        Promise.allSettled(promises).then(function () {\n          var _a;\n          _this8.afterSubmitValidation(forceRevalidation);\n          (_a = _this8.onValidateCallback) == null ? void 0 : _a.call(_this8, {\n            isValid: _this8.isFormValid(),\n            isSubmitted: _this8.isSubmitted,\n            fields: _this8.getCompatibleFields(),\n            groups: _objectSpread({}, _this8.groupFields)\n          });\n          resolve(!!promises.length);\n        });\n      });\n    }\n  }, {\n    key: \"revalidate\",\n    value: function revalidate() {\n      var _this9 = this;\n      return new Promise(function (resolve) {\n        _this9.validateHandler(void 0, true).finally(function () {\n          if (_this9.globalConfig.focusInvalidField) {\n            _this9.focusInvalidField();\n          }\n          resolve(_this9.isValid);\n        });\n      });\n    }\n  }, {\n    key: \"validateHandler\",\n    value: function validateHandler(ev) {\n      var _this10 = this;\n      var forceRevalidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.globalConfig.lockForm) {\n        this.lockForm();\n      }\n      return this.validate(forceRevalidation).finally(function () {\n        var _a, _b;\n        if (_this10.globalConfig.lockForm) {\n          _this10.unlockForm();\n        }\n        if (_this10.isValid) {\n          (_a = _this10.onSuccessCallback) == null ? void 0 : _a.call(_this10, ev);\n        } else {\n          (_b = _this10.onFailCallback) == null ? void 0 : _b.call(_this10, _this10.getCompatibleFields(), _this10.groupFields);\n        }\n      });\n    }\n  }, {\n    key: \"setForm\",\n    value: function setForm(form) {\n      this.form = form;\n      this.form.setAttribute(\"novalidate\", \"novalidate\");\n      this.removeListener(\"submit\", this.form, this.formSubmitHandler);\n      this.addListener(\"submit\", this.form, this.formSubmitHandler);\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(type, elem, handler) {\n      elem.addEventListener(type, handler);\n      this.eventListeners.push({\n        type: type,\n        elem: elem,\n        func: handler\n      });\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(type, elem, handler) {\n      elem.removeEventListener(type, handler);\n      this.eventListeners = this.eventListeners.filter(function (item) {\n        return item.type !== type || item.elem !== elem;\n      });\n    }\n  }, {\n    key: \"addField\",\n    value: function addField(fieldSelector, rules, config) {\n      if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n        throw Error(\"Field selector is not valid. Please specify a string selector or a valid DOM element.\");\n      }\n      var elem;\n      if (typeof fieldSelector === \"string\") {\n        elem = this.form.querySelector(fieldSelector);\n      } else {\n        elem = fieldSelector;\n      }\n      if (!elem) {\n        throw Error(\"Field doesn't exist in the DOM! Please check the field selector.\");\n      }\n      if (!Array.isArray(rules) || !rules.length) {\n        throw Error(\"Rules argument should be an array and should contain at least 1 element.\");\n      }\n      rules.forEach(function (item) {\n        if (!(\"rule\" in item || \"validator\" in item || \"plugin\" in item)) {\n          throw Error(\"Rules argument must contain at least one rule or validator property.\");\n        }\n        if (!item.validator && !item.plugin && (!item.rule || !Object.values(Rules).includes(item.rule))) {\n          throw Error(\"Rule should be one of these types: \".concat(Object.values(Rules).join(\", \"), \". Provided value: \").concat(item.rule));\n        }\n      });\n      var key = this.setKeyByFieldSelector(fieldSelector);\n      this.fields[key] = {\n        elem: elem,\n        rules: rules,\n        isValid: void 0,\n        touched: false,\n        config: config\n      };\n      this.setListeners(elem);\n      if (this.isSubmitted || this.globalConfig.validateBeforeSubmitting) {\n        this.validateField(key);\n      }\n      return this;\n    }\n  }, {\n    key: \"removeField\",\n    value: function removeField(fieldSelector) {\n      if (typeof fieldSelector !== \"string\" && !isElement(fieldSelector)) {\n        throw Error(\"Field selector is not valid. Please specify a string selector or a valid DOM element.\");\n      }\n      var key = this.getKeyByFieldSelector(fieldSelector);\n      if (!key || !this.fields[key]) {\n        console.error(\"Field not found. Check the field selector.\");\n        return this;\n      }\n      var type = this.getListenerType(this.fields[key].elem.type);\n      this.removeListener(type, this.fields[key].elem, this.handlerChange);\n      this.clearErrors();\n      delete this.fields[key];\n      return this;\n    }\n  }, {\n    key: \"removeGroup\",\n    value: function removeGroup(group) {\n      var _this11 = this;\n      if (typeof group !== \"string\") {\n        throw Error(\"Group selector is not valid. Please specify a string selector.\");\n      }\n      var key = this.getKeyByFieldSelector(group);\n      if (!key || !this.groupFields[key]) {\n        console.error(\"Group not found. Check the group selector.\");\n        return this;\n      }\n      this.groupFields[key].elems.forEach(function (elem) {\n        var type = _this11.getListenerType(elem.type);\n        _this11.removeListener(type, elem, _this11.handlerChange);\n      });\n      this.clearErrors();\n      delete this.groupFields[key];\n      return this;\n    }\n  }, {\n    key: \"addRequiredGroup\",\n    value: function addRequiredGroup(groupField, errorMessage, config, successMessage) {\n      var _this12 = this;\n      if (typeof groupField !== \"string\" && !isElement(groupField)) {\n        throw Error(\"Group selector is not valid. Please specify a string selector or a valid DOM element.\");\n      }\n      var elem;\n      if (typeof groupField === \"string\") {\n        elem = this.form.querySelector(groupField);\n      } else {\n        elem = groupField;\n      }\n      if (!elem) {\n        throw Error(\"Group selector not found! Please check the group selector.\");\n      }\n      var inputs = elem.querySelectorAll(\"input\");\n      var childrenInputs = Array.from(inputs).filter(function (input) {\n        var parent = getClosestParent(_this12.groupFields, getNodeParents(input));\n        if (!parent) {\n          return true;\n        }\n        return parent[1].elems.find(function (elem2) {\n          return elem2 !== input;\n        });\n      });\n      var key = this.setKeyByFieldSelector(groupField);\n      this.groupFields[key] = {\n        rules: [{\n          rule: GroupRules.Required,\n          errorMessage: errorMessage,\n          successMessage: successMessage\n        }],\n        groupElem: elem,\n        elems: childrenInputs,\n        touched: false,\n        isValid: void 0,\n        config: config\n      };\n      inputs.forEach(function (input) {\n        _this12.setListeners(input);\n      });\n      return this;\n    }\n  }, {\n    key: \"getListenerType\",\n    value: function getListenerType(type) {\n      switch (type) {\n        case \"checkbox\":\n        case \"select-one\":\n        case \"file\":\n        case \"radio\":\n          {\n            return \"change\";\n          }\n        default:\n          {\n            return \"input\";\n          }\n      }\n    }\n  }, {\n    key: \"setListeners\",\n    value: function setListeners(elem) {\n      var type = this.getListenerType(elem.type);\n      this.removeListener(type, elem, this.handlerChange);\n      this.addListener(type, elem, this.handlerChange);\n    }\n  }, {\n    key: \"clearFieldLabel\",\n    value: function clearFieldLabel(key) {\n      var _a, _b;\n      (_a = this.errorLabels[key]) == null ? void 0 : _a.remove();\n      (_b = this.successLabels[key]) == null ? void 0 : _b.remove();\n    }\n  }, {\n    key: \"clearFieldStyle\",\n    value: function clearFieldStyle(key) {\n      var _field$elem$classList;\n      var _a, _b, _c, _d;\n      var field = this.fields[key];\n      var errorStyle = ((_a = field.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;\n      Object.keys(errorStyle).forEach(function (key2) {\n        field.elem.style[key2] = \"\";\n      });\n      var successStyle = ((_b = field.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};\n      Object.keys(successStyle).forEach(function (key2) {\n        field.elem.style[key2] = \"\";\n      });\n      (_field$elem$classList = field.elem.classList).remove.apply(_field$elem$classList, _toConsumableArray(getClassList(((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass)).concat(_toConsumableArray(getClassList(((_d = field.config) == null ? void 0 : _d.successFieldCssClass) || this.globalConfig.successFieldCssClass))));\n    }\n  }, {\n    key: \"clearErrors\",\n    value: function clearErrors() {\n      var _this13 = this;\n      var _a, _b;\n      Object.keys(this.errorLabels).forEach(function (key) {\n        return _this13.errorLabels[key].remove();\n      });\n      Object.keys(this.successLabels).forEach(function (key) {\n        return _this13.successLabels[key].remove();\n      });\n      for (var key in this.fields) {\n        this.clearFieldStyle(key);\n      }\n      var _loop2 = function _loop2() {\n        var group = _this13.groupFields[_key];\n        var errorStyle = ((_a = group.config) == null ? void 0 : _a.errorFieldStyle) || _this13.globalConfig.errorFieldStyle;\n        Object.keys(errorStyle).forEach(function (key2) {\n          group.elems.forEach(function (elem) {\n            var _elem$classList;\n            var _a2;\n            elem.style[key2] = \"\";\n            (_elem$classList = elem.classList).remove.apply(_elem$classList, _toConsumableArray(getClassList(((_a2 = group.config) == null ? void 0 : _a2.errorFieldCssClass) || _this13.globalConfig.errorFieldCssClass)));\n          });\n        });\n        var successStyle = ((_b = group.config) == null ? void 0 : _b.successFieldStyle) || _this13.globalConfig.successFieldStyle || {};\n        Object.keys(successStyle).forEach(function (key2) {\n          group.elems.forEach(function (elem) {\n            var _elem$classList2;\n            var _a2;\n            elem.style[key2] = \"\";\n            (_elem$classList2 = elem.classList).remove.apply(_elem$classList2, _toConsumableArray(getClassList(((_a2 = group.config) == null ? void 0 : _a2.successFieldCssClass) || _this13.globalConfig.successFieldCssClass)));\n          });\n        });\n      };\n      for (var _key in this.groupFields) {\n        _loop2();\n      }\n      this.tooltips = [];\n    }\n  }, {\n    key: \"isTooltip\",\n    value: function isTooltip() {\n      return !!this.globalConfig.tooltip;\n    }\n  }, {\n    key: \"lockForm\",\n    value: function lockForm() {\n      var elems = this.form.querySelectorAll(\"input, textarea, button, select\");\n      for (var i = 0, len = elems.length; i < len; ++i) {\n        elems[i].setAttribute(\"data-just-validate-fallback-disabled\", elems[i].disabled ? \"true\" : \"false\");\n        elems[i].setAttribute(\"disabled\", \"disabled\");\n        elems[i].style.pointerEvents = \"none\";\n        elems[i].style.webkitFilter = \"grayscale(100%)\";\n        elems[i].style.filter = \"grayscale(100%)\";\n      }\n    }\n  }, {\n    key: \"unlockForm\",\n    value: function unlockForm() {\n      var elems = this.form.querySelectorAll(\"input, textarea, button, select\");\n      for (var i = 0, len = elems.length; i < len; ++i) {\n        if (elems[i].getAttribute(\"data-just-validate-fallback-disabled\") !== \"true\") {\n          elems[i].removeAttribute(\"disabled\");\n        }\n        elems[i].style.pointerEvents = \"\";\n        elems[i].style.webkitFilter = \"\";\n        elems[i].style.filter = \"\";\n      }\n    }\n  }, {\n    key: \"renderTooltip\",\n    value: function renderTooltip(elem, errorLabel, position) {\n      var _this14 = this;\n      var _a;\n      var _elem$getBoundingClie = elem.getBoundingClientRect(),\n        top = _elem$getBoundingClie.top,\n        left = _elem$getBoundingClie.left,\n        width = _elem$getBoundingClie.width,\n        height = _elem$getBoundingClie.height;\n      var errorLabelRect = errorLabel.getBoundingClientRect();\n      var pos = position || ((_a = this.globalConfig.tooltip) == null ? void 0 : _a.position);\n      switch (pos) {\n        case \"left\":\n          {\n            errorLabel.style.top = \"\".concat(top + height / 2 - errorLabelRect.height / 2, \"px\");\n            errorLabel.style.left = \"\".concat(left - errorLabelRect.width - TOOLTIP_ARROW_HEIGHT, \"px\");\n            break;\n          }\n        case \"top\":\n          {\n            errorLabel.style.top = \"\".concat(top - errorLabelRect.height - TOOLTIP_ARROW_HEIGHT, \"px\");\n            errorLabel.style.left = \"\".concat(left + width / 2 - errorLabelRect.width / 2, \"px\");\n            break;\n          }\n        case \"right\":\n          {\n            errorLabel.style.top = \"\".concat(top + height / 2 - errorLabelRect.height / 2, \"px\");\n            errorLabel.style.left = \"\".concat(left + width + TOOLTIP_ARROW_HEIGHT, \"px\");\n            break;\n          }\n        case \"bottom\":\n          {\n            errorLabel.style.top = \"\".concat(top + height + TOOLTIP_ARROW_HEIGHT, \"px\");\n            errorLabel.style.left = \"\".concat(left + width / 2 - errorLabelRect.width / 2, \"px\");\n            break;\n          }\n      }\n      errorLabel.dataset.direction = pos;\n      var refresh = function refresh() {\n        _this14.renderTooltip(elem, errorLabel, position);\n      };\n      return {\n        refresh: refresh\n      };\n    }\n  }, {\n    key: \"createErrorLabelElem\",\n    value: function createErrorLabelElem(key, errorMessage, config) {\n      var _errorLabel$classList;\n      var errorLabel = document.createElement(\"div\");\n      errorLabel.innerHTML = errorMessage;\n      var customErrorLabelStyle = this.isTooltip() ? config == null ? void 0 : config.errorLabelStyle : (config == null ? void 0 : config.errorLabelStyle) || this.globalConfig.errorLabelStyle;\n      Object.assign(errorLabel.style, customErrorLabelStyle);\n      (_errorLabel$classList = errorLabel.classList).add.apply(_errorLabel$classList, _toConsumableArray(getClassList((config == null ? void 0 : config.errorLabelCssClass) || this.globalConfig.errorLabelCssClass)).concat([\"just-validate-error-label\"]));\n      if (this.isTooltip()) {\n        errorLabel.dataset.tooltip = \"true\";\n      }\n      if (this.globalConfig.testingMode) {\n        errorLabel.dataset.testId = \"error-label-\".concat(key);\n      }\n      this.errorLabels[key] = errorLabel;\n      return errorLabel;\n    }\n  }, {\n    key: \"createSuccessLabelElem\",\n    value: function createSuccessLabelElem(key, successMessage, config) {\n      var _successLabel$classLi;\n      if (successMessage === void 0) {\n        return null;\n      }\n      var successLabel = document.createElement(\"div\");\n      successLabel.innerHTML = successMessage;\n      var customSuccessLabelStyle = (config == null ? void 0 : config.successLabelStyle) || this.globalConfig.successLabelStyle;\n      Object.assign(successLabel.style, customSuccessLabelStyle);\n      (_successLabel$classLi = successLabel.classList).add.apply(_successLabel$classLi, _toConsumableArray(getClassList((config == null ? void 0 : config.successLabelCssClass) || this.globalConfig.successLabelCssClass)).concat([\"just-validate-success-label\"]));\n      if (this.globalConfig.testingMode) {\n        successLabel.dataset.testId = \"success-label-\".concat(key);\n      }\n      this.successLabels[key] = successLabel;\n      return successLabel;\n    }\n  }, {\n    key: \"renderErrorsContainer\",\n    value: function renderErrorsContainer(label, errorsContainer) {\n      var container = errorsContainer || this.globalConfig.errorsContainer;\n      if (typeof container === \"string\") {\n        var elem = this.form.querySelector(container);\n        if (elem) {\n          elem.appendChild(label);\n          return true;\n        } else {\n          console.error(\"Error container with \".concat(container, \" selector not found. Errors will be rendered as usual\"));\n        }\n      }\n      if (container instanceof Element) {\n        container.appendChild(label);\n        return true;\n      }\n      if (container !== void 0) {\n        console.error(\"Error container not found. It should be a string or existing Element. Errors will be rendered as usual\");\n      }\n      return false;\n    }\n  }, {\n    key: \"renderGroupLabel\",\n    value: function renderGroupLabel(elem, label, errorsContainer, isSuccess) {\n      if (!isSuccess) {\n        var renderedInErrorsContainer = this.renderErrorsContainer(label, errorsContainer);\n        if (renderedInErrorsContainer) {\n          return;\n        }\n      }\n      elem.appendChild(label);\n    }\n  }, {\n    key: \"renderFieldLabel\",\n    value: function renderFieldLabel(elem, label, errorsContainer, isSuccess) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      if (!isSuccess) {\n        var renderedInErrorsContainer = this.renderErrorsContainer(label, errorsContainer);\n        if (renderedInErrorsContainer) {\n          return;\n        }\n      }\n      if (elem.type === \"checkbox\" || elem.type === \"radio\") {\n        var labelElem = document.querySelector(\"label[for=\\\"\".concat(elem.getAttribute(\"id\"), \"\\\"]\"));\n        if (((_b = (_a = elem.parentElement) == null ? void 0 : _a.tagName) == null ? void 0 : _b.toLowerCase()) === \"label\") {\n          (_d = (_c = elem.parentElement) == null ? void 0 : _c.parentElement) == null ? void 0 : _d.appendChild(label);\n        } else if (labelElem) {\n          (_e = labelElem.parentElement) == null ? void 0 : _e.appendChild(label);\n        } else {\n          (_f = elem.parentElement) == null ? void 0 : _f.appendChild(label);\n        }\n      } else {\n        (_g = elem.parentElement) == null ? void 0 : _g.appendChild(label);\n      }\n    }\n  }, {\n    key: \"showLabels\",\n    value: function showLabels(fields, isError) {\n      var _this15 = this;\n      Object.keys(fields).forEach(function (fieldName, i) {\n        var error = fields[fieldName];\n        var key = _this15.getKeyByFieldSelector(fieldName);\n        if (!key || !_this15.fields[key]) {\n          console.error(\"Field not found. Check the field selector.\");\n          return;\n        }\n        var field = _this15.fields[key];\n        field.isValid = !isError;\n        _this15.clearFieldStyle(key);\n        _this15.clearFieldLabel(key);\n        _this15.renderFieldError(key, false, error);\n        if (i === 0 && _this15.globalConfig.focusInvalidField) {\n          setTimeout(function () {\n            return field.elem.focus();\n          }, 0);\n        }\n      });\n    }\n  }, {\n    key: \"showErrors\",\n    value: function showErrors(fields) {\n      if (_typeof(fields) !== \"object\") {\n        throw Error(\"[showErrors]: Errors should be an object with key: value format\");\n      }\n      this.showLabels(fields, true);\n    }\n  }, {\n    key: \"showSuccessLabels\",\n    value: function showSuccessLabels(fields) {\n      if (_typeof(fields) !== \"object\") {\n        throw Error(\"[showSuccessLabels]: Labels should be an object with key: value format\");\n      }\n      this.showLabels(fields, false);\n    }\n  }, {\n    key: \"renderFieldError\",\n    value: function renderFieldError(key) {\n      var _field$elem$classList3;\n      var forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var message = arguments.length > 2 ? arguments[2] : undefined;\n      var _a, _b, _c, _d, _e, _f;\n      var field = this.fields[key];\n      if (field.isValid === false) {\n        this.isValid = false;\n      }\n      if (field.isValid === void 0 || !forced && !this.isSubmitted && !field.touched && message === void 0) {\n        return;\n      }\n      if (field.isValid) {\n        if (!field.asyncCheckPending) {\n          var _field$elem$classList2;\n          var successLabel = this.createSuccessLabelElem(key, message !== void 0 ? message : field.successMessage, field.config);\n          if (successLabel) {\n            this.renderFieldLabel(field.elem, successLabel, (_a = field.config) == null ? void 0 : _a.errorsContainer, true);\n          }\n          (_field$elem$classList2 = field.elem.classList).add.apply(_field$elem$classList2, _toConsumableArray(getClassList(((_b = field.config) == null ? void 0 : _b.successFieldCssClass) || this.globalConfig.successFieldCssClass)));\n        }\n        return;\n      }\n      (_field$elem$classList3 = field.elem.classList).add.apply(_field$elem$classList3, _toConsumableArray(getClassList(((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass)));\n      var errorLabel = this.createErrorLabelElem(key, message !== void 0 ? message : field.errorMessage, field.config);\n      this.renderFieldLabel(field.elem, errorLabel, (_d = field.config) == null ? void 0 : _d.errorsContainer);\n      if (this.isTooltip()) {\n        this.tooltips.push(this.renderTooltip(field.elem, errorLabel, (_f = (_e = field.config) == null ? void 0 : _e.tooltip) == null ? void 0 : _f.position));\n      }\n    }\n  }, {\n    key: \"renderGroupError\",\n    value: function renderGroupError(key) {\n      var _this16 = this;\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var _a, _b, _c, _d;\n      var group = this.groupFields[key];\n      if (group.isValid === false) {\n        this.isValid = false;\n      }\n      if (group.isValid === void 0 || !force && !this.isSubmitted && !group.touched) {\n        return;\n      }\n      if (group.isValid) {\n        group.elems.forEach(function (elem) {\n          var _elem$classList3;\n          var _a2, _b2;\n          Object.assign(elem.style, ((_a2 = group.config) == null ? void 0 : _a2.successFieldStyle) || _this16.globalConfig.successFieldStyle);\n          (_elem$classList3 = elem.classList).add.apply(_elem$classList3, _toConsumableArray(getClassList(((_b2 = group.config) == null ? void 0 : _b2.successFieldCssClass) || _this16.globalConfig.successFieldCssClass)));\n        });\n        var successLabel = this.createSuccessLabelElem(key, group.successMessage, group.config);\n        if (successLabel) {\n          this.renderGroupLabel(group.groupElem, successLabel, (_a = group.config) == null ? void 0 : _a.errorsContainer, true);\n        }\n        return;\n      }\n      this.isValid = false;\n      group.elems.forEach(function (elem) {\n        var _elem$classList4;\n        var _a2, _b2;\n        Object.assign(elem.style, ((_a2 = group.config) == null ? void 0 : _a2.errorFieldStyle) || _this16.globalConfig.errorFieldStyle);\n        (_elem$classList4 = elem.classList).add.apply(_elem$classList4, _toConsumableArray(getClassList(((_b2 = group.config) == null ? void 0 : _b2.errorFieldCssClass) || _this16.globalConfig.errorFieldCssClass)));\n      });\n      var errorLabel = this.createErrorLabelElem(key, group.errorMessage, group.config);\n      this.renderGroupLabel(group.groupElem, errorLabel, (_b = group.config) == null ? void 0 : _b.errorsContainer);\n      if (this.isTooltip()) {\n        this.tooltips.push(this.renderTooltip(group.groupElem, errorLabel, (_d = (_c = group.config) == null ? void 0 : _c.tooltip) == null ? void 0 : _d.position));\n      }\n    }\n  }, {\n    key: \"renderErrors\",\n    value: function renderErrors() {\n      var forceRevalidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.isSubmitted && !forceRevalidation && !this.globalConfig.validateBeforeSubmitting) {\n        return;\n      }\n      this.clearErrors();\n      this.isValid = true;\n      for (var key in this.groupFields) {\n        this.renderGroupError(key);\n      }\n      for (var _key2 in this.fields) {\n        this.renderFieldError(_key2);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this17 = this;\n      this.eventListeners.forEach(function (event) {\n        _this17.removeListener(event.type, event.elem, event.func);\n      });\n      Object.keys(this.customStyleTags).forEach(function (key) {\n        _this17.customStyleTags[key].remove();\n      });\n      this.clearErrors();\n      if (this.globalConfig.lockForm) {\n        this.unlockForm();\n      }\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this18 = this;\n      this.destroy();\n      if (!this.form) {\n        console.error(\"Cannot initialize the library! Form is not defined\");\n      } else {\n        this.initialize(this.form, this.globalConfig);\n        Object.keys(this.fields).forEach(function (key) {\n          var fieldSelector = _this18.getFieldSelectorByKey(key);\n          if (fieldSelector) {\n            _this18.addField(fieldSelector, _toConsumableArray(_this18.fields[key].rules), _this18.fields[key].config);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"setCurrentLocale\",\n    value: function setCurrentLocale(locale) {\n      if (typeof locale !== \"string\" && locale !== void 0) {\n        console.error(\"Current locale should be a string\");\n        return;\n      }\n      this.currentLocale = locale;\n      if (this.isSubmitted) {\n        this.validate();\n      }\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess(callback) {\n      this.onSuccessCallback = callback;\n      return this;\n    }\n  }, {\n    key: \"onFail\",\n    value: function onFail(callback) {\n      this.onFailCallback = callback;\n      return this;\n    }\n  }, {\n    key: \"onValidate\",\n    value: function onValidate(callback) {\n      this.onValidateCallback = callback;\n      return this;\n    }\n  }]);\n  return JustValidate;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanVzdC12YWxpZGF0ZS9kaXN0L2p1c3QtdmFsaWRhdGUuZXMuanM/NTM4OSJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19wdWJsaWNGaWVsZCIsIl90eXBlb2YiLCJFTUFJTF9SRUdFWFAiLCJJTlRFR0VSX1JFR0VYUCIsIlBBU1NXT1JEX1JFR0VYUCIsIlNUUk9OR19QQVNTV09SRF9SRUdFWFAiLCJpc0VtcHR5IiwibmV3VmFsIiwidHJpbSIsImlzRW1haWwiLCJ0ZXN0IiwiaXNMZW5ndGhNb3JlVGhhbk1heCIsImxlbiIsImxlbmd0aCIsImlzTGVuZ3RoTGVzc1RoYW5NaW4iLCJpc051bWJlciIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzSW50ZWdlciIsImlzUGFzc3dvcmQiLCJpc1N0cm9uZ1Bhc3N3b3JkIiwiaXNOdW1iZXJNb3JlVGhhbk1heCIsImlzTnVtYmVyTGVzc1RoYW5NaW4iLCJpc0ludmFsaWRPckVtcHR5U3RyaW5nIiwiUnVsZXMiLCJSdWxlczIiLCJHcm91cFJ1bGVzIiwiR3JvdXBSdWxlczIiLCJDdXN0b21TdHlsZVRhZ0lkcyIsIkN1c3RvbVN0eWxlVGFnSWRzMiIsImRlZmF1bHREaWN0aW9uYXJ5IiwiUmVxdWlyZWQiLCJkaWN0IiwiZW4iLCJFbWFpbCIsIk1heExlbmd0aCIsIk1pbkxlbmd0aCIsIlBhc3N3b3JkIiwiU3Ryb25nUGFzc3dvcmQiLCJOdW1iZXIiLCJNYXhOdW1iZXIiLCJNaW5OdW1iZXIiLCJNaW5GaWxlc0NvdW50IiwiTWF4RmlsZXNDb3VudCIsIkZpbGVzIiwiREVGQVVMVF9FUlJPUl9GSUVMRF9NRVNTQUdFIiwiaXNQcm9taXNlIiwidmFsIiwidGhlbiIsImdldE5vZGVQYXJlbnRzIiwiZWwiLCJlbGVtIiwiZWxzIiwidW5zaGlmdCIsInBhcmVudE5vZGUiLCJnZXRDbG9zZXN0UGFyZW50IiwiZ3JvdXBzIiwicGFyZW50cyIsInJldmVyc2VkUGFyZW50cyIsIl90b0NvbnN1bWFibGVBcnJheSIsInJldmVyc2UiLCJpIiwicGFyZW50IiwiZ3JvdXAiLCJncm91cEVsZW0iLCJnZXRDbGFzc0xpc3QiLCJjbGFzc0xpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJmaWx0ZXIiLCJjbHMiLCJzcGxpdCIsImlzRWxlbWVudCIsImVsZW1lbnQiLCJFbGVtZW50IiwiSFRNTERvY3VtZW50IiwiZXJyb3JMYWJlbENzcyIsIlRPT0xUSVBfQVJST1dfSEVJR0hUIiwiZGVmYXVsdEdsb2JhbENvbmZpZyIsImVycm9yRmllbGRTdHlsZSIsImNvbG9yIiwiYm9yZGVyIiwiZXJyb3JGaWVsZENzc0NsYXNzIiwic3VjY2Vzc0ZpZWxkQ3NzQ2xhc3MiLCJlcnJvckxhYmVsU3R5bGUiLCJlcnJvckxhYmVsQ3NzQ2xhc3MiLCJzdWNjZXNzTGFiZWxDc3NDbGFzcyIsImZvY3VzSW52YWxpZEZpZWxkIiwibG9ja0Zvcm0iLCJ0ZXN0aW5nTW9kZSIsInZhbGlkYXRlQmVmb3JlU3VibWl0dGluZyIsIkp1c3RWYWxpZGF0ZSIsImZvcm0iLCJnbG9iYWxDb25maWciLCJkaWN0TG9jYWxlIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJNYXAiLCJmaWVsZCIsImZpZWxkSWRzIiwiZ2V0IiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJfc3RlcCIsInMiLCJuIiwiZG9uZSIsIl9zdGVwJHZhbHVlIiwiX3NsaWNlZFRvQXJyYXkiLCJmaWVsZFNlbGVjdG9yIiwiayIsImVyciIsImUiLCJmIiwiZmllbGRzIiwia2V5cyIsImZvckVhY2giLCJuZXdLZXkiLCJnZXRGaWVsZFNlbGVjdG9yQnlLZXkiLCJfb2JqZWN0U3ByZWFkIiwiaGFzIiwiU3RyaW5nIiwic2l6ZSIsInNldCIsInRvb2x0aXBzIiwiaXRlbSIsInJlZnJlc2giLCJsYXN0U2Nyb2xsUG9zaXRpb24iLCJ3aW5kb3ciLCJzY3JvbGxZIiwiaXNTY3JvbGxUaWNrIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVmcmVzaEFsbFRvb2x0aXBzIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsImlzU3VibWl0dGVkIiwidmFsaWRhdGVIYW5kbGVyIiwidGFyZ2V0IiwiZm91bmRLZXkiLCJ0b3VjaGVkIiwidmFsaWRhdGVGaWVsZCIsImdyb3VwRmllbGRzIiwiZWxlbXMiLCJmaW5kIiwidmFsaWRhdGVHcm91cCIsImhhbmRsZUZpZWxkQ2hhbmdlIiwiaGFuZGxlR3JvdXBDaGFuZ2UiLCJyZW5kZXJFcnJvcnMiLCJpbml0aWFsaXplIiwiX2NyZWF0ZUNsYXNzIiwiZXJyb3JzIiwiaXNWYWxpZCIsImVycm9yTGFiZWxzIiwic3VjY2Vzc0xhYmVscyIsImV2ZW50TGlzdGVuZXJzIiwiY3VzdG9tU3R5bGVUYWdzIiwiY3VycmVudExvY2FsZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIkVycm9yIiwiY29uY2F0Iiwic2V0Rm9ybSIsIkhUTUxGb3JtRWxlbWVudCIsImlzVG9vbHRpcCIsInN0eWxlVGFnIiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiTGFiZWwiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJhZGRMaXN0ZW5lciIsImhhbmRsZURvY3VtZW50U2Nyb2xsIiwiZ2V0TG9jYWxpc2VkU3RyaW5nIiwicnVsZSIsInJ1bGVWYWx1ZSIsImN1c3RvbU1zZyIsIl9hIiwic2VhcmNoIiwibG9jYWxpc2VkU3RyIiwicmVwbGFjZSIsImdldEZpZWxkRXJyb3JNZXNzYWdlIiwiZmllbGRSdWxlIiwibXNnIiwiZXJyb3JNZXNzYWdlIiwiZ2V0RWxlbVZhbHVlIiwiZ2V0RmllbGRTdWNjZXNzTWVzc2FnZSIsInN1Y2Nlc3NNZXNzYWdlIiwiZ2V0R3JvdXBFcnJvck1lc3NhZ2UiLCJncm91cFJ1bGUiLCJnZXRHcm91cFN1Y2Nlc3NNZXNzYWdlIiwic2V0RmllbGRJbnZhbGlkIiwic2V0RmllbGRWYWxpZCIsInNldEdyb3VwSW52YWxpZCIsInNldEdyb3VwVmFsaWQiLCJ0eXBlIiwiY2hlY2tlZCIsImZpbGVzIiwidmFsaWRhdGVHcm91cFJ1bGUiLCJldmVyeSIsInZhbGlkYXRlRmllbGRSdWxlIiwiX3RoaXMyIiwiYWZ0ZXJJbnB1dENoYW5nZWQiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJlbGVtVmFsdWUiLCJwbHVnaW4iLCJyZXN1bHQiLCJnZXRDb21wYXRpYmxlRmllbGRzIiwiY29uc29sZSIsImVycm9yIiwiSW50ZWdlciIsIm51bSIsIkN1c3RvbVJlZ2V4cCIsInJlZ2V4cCIsIlJlZ0V4cCIsInN0ciIsImlzRmluaXRlIiwiZmlsZXNDb25maWciLCJpc0ZpbGVQcm9wc0ludmFsaWQiLCJmaWxlIiwiZmlsZUNvbmZpZyIsIm1pblNpemVJbnZhbGlkIiwibWluU2l6ZSIsIm1heFNpemVJbnZhbGlkIiwibWF4U2l6ZSIsIm5hbWVJbnZhbGlkIiwibmFtZXMiLCJpbmNsdWRlcyIsIm5hbWUiLCJleHRJbnZhbGlkIiwiZXh0ZW5zaW9ucyIsInR5cGVJbnZhbGlkIiwidHlwZXMiLCJmaWxlSWR4IiwiZmlsZXNJbnZhbGlkIiwidmFsaWRhdG9yIiwiYXN5bmNDaGVja1BlbmRpbmciLCJwcm9taXNlIiwicmVzcCIsImNhdGNoIiwiaXNGb3JtVmFsaWQiLCJ2YWx1ZXMiLCJfdGhpczMiLCJwcm9taXNlcyIsInJ1bGVzIiwicmVzIiwicHVzaCIsImNvbmZpZyIsIlByb21pc2UiLCJhbGxTZXR0bGVkIiwiZmluYWxseSIsIl9hMiIsIm9uVmFsaWRhdGVDYWxsYmFjayIsImNhbGwiLCJyZXZhbGlkYXRlRmllbGQiLCJfdGhpczQiLCJnZXRLZXlCeUZpZWxkU2VsZWN0b3IiLCJyZWplY3QiLCJyZXNvbHZlIiwiY2xlYXJGaWVsZFN0eWxlIiwiY2xlYXJGaWVsZExhYmVsIiwicmVuZGVyRmllbGRFcnJvciIsInJldmFsaWRhdGVHcm91cCIsImdyb3VwU2VsZWN0b3IiLCJfdGhpczUiLCJyZW5kZXJHcm91cEVycm9yIiwiX3RoaXM2IiwiX3RoaXM3IiwiX2xvb3AiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJfcmV0IiwiYWZ0ZXJTdWJtaXRWYWxpZGF0aW9uIiwiZm9yY2VSZXZhbGlkYXRpb24iLCJ2YWxpZGF0ZSIsIl90aGlzOCIsInJldmFsaWRhdGUiLCJfdGhpczkiLCJfdGhpczEwIiwiX2IiLCJ1bmxvY2tGb3JtIiwib25TdWNjZXNzQ2FsbGJhY2siLCJvbkZhaWxDYWxsYmFjayIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUxpc3RlbmVyIiwiZm9ybVN1Ym1pdEhhbmRsZXIiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZ1bmMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRmllbGQiLCJqb2luIiwic2V0S2V5QnlGaWVsZFNlbGVjdG9yIiwic2V0TGlzdGVuZXJzIiwicmVtb3ZlRmllbGQiLCJnZXRMaXN0ZW5lclR5cGUiLCJoYW5kbGVyQ2hhbmdlIiwiY2xlYXJFcnJvcnMiLCJyZW1vdmVHcm91cCIsIl90aGlzMTEiLCJhZGRSZXF1aXJlZEdyb3VwIiwiZ3JvdXBGaWVsZCIsIl90aGlzMTIiLCJpbnB1dHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2hpbGRyZW5JbnB1dHMiLCJmcm9tIiwiaW5wdXQiLCJlbGVtMiIsInJlbW92ZSIsIl9maWVsZCRlbGVtJGNsYXNzTGlzdCIsIl9jIiwiX2QiLCJlcnJvclN0eWxlIiwia2V5MiIsInN0eWxlIiwic3VjY2Vzc1N0eWxlIiwic3VjY2Vzc0ZpZWxkU3R5bGUiLCJhcHBseSIsIl90aGlzMTMiLCJfbG9vcDIiLCJfZWxlbSRjbGFzc0xpc3QiLCJfZWxlbSRjbGFzc0xpc3QyIiwidG9vbHRpcCIsImRpc2FibGVkIiwicG9pbnRlckV2ZW50cyIsIndlYmtpdEZpbHRlciIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInJlbmRlclRvb2x0aXAiLCJlcnJvckxhYmVsIiwicG9zaXRpb24iLCJfdGhpczE0IiwiX2VsZW0kZ2V0Qm91bmRpbmdDbGllIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiZXJyb3JMYWJlbFJlY3QiLCJwb3MiLCJkYXRhc2V0IiwiZGlyZWN0aW9uIiwiY3JlYXRlRXJyb3JMYWJlbEVsZW0iLCJfZXJyb3JMYWJlbCRjbGFzc0xpc3QiLCJpbm5lckhUTUwiLCJjdXN0b21FcnJvckxhYmVsU3R5bGUiLCJhc3NpZ24iLCJhZGQiLCJ0ZXN0SWQiLCJjcmVhdGVTdWNjZXNzTGFiZWxFbGVtIiwiX3N1Y2Nlc3NMYWJlbCRjbGFzc0xpIiwic3VjY2Vzc0xhYmVsIiwiY3VzdG9tU3VjY2Vzc0xhYmVsU3R5bGUiLCJzdWNjZXNzTGFiZWxTdHlsZSIsInJlbmRlckVycm9yc0NvbnRhaW5lciIsImxhYmVsIiwiZXJyb3JzQ29udGFpbmVyIiwiY29udGFpbmVyIiwicmVuZGVyR3JvdXBMYWJlbCIsImlzU3VjY2VzcyIsInJlbmRlcmVkSW5FcnJvcnNDb250YWluZXIiLCJyZW5kZXJGaWVsZExhYmVsIiwiX2UiLCJfZiIsIl9nIiwibGFiZWxFbGVtIiwicGFyZW50RWxlbWVudCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInNob3dMYWJlbHMiLCJpc0Vycm9yIiwiX3RoaXMxNSIsImZpZWxkTmFtZSIsInNob3dFcnJvcnMiLCJzaG93U3VjY2Vzc0xhYmVscyIsIl9maWVsZCRlbGVtJGNsYXNzTGlzdDMiLCJmb3JjZWQiLCJtZXNzYWdlIiwiX2ZpZWxkJGVsZW0kY2xhc3NMaXN0MiIsIl90aGlzMTYiLCJmb3JjZSIsIl9lbGVtJGNsYXNzTGlzdDMiLCJfYjIiLCJfZWxlbSRjbGFzc0xpc3Q0IiwiZGVzdHJveSIsIl90aGlzMTciLCJldmVudCIsIl90aGlzMTgiLCJzZXRDdXJyZW50TG9jYWxlIiwibG9jYWxlIiwib25TdWNjZXNzIiwiY2FsbGJhY2siLCJvbkZhaWwiLCJvblZhbGlkYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7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O0lBQ2I7RUFBQztJQUFBN1ksR0FBQTtJQUFBQyxLQUFBLEVBQ0QsU0FBQThZLFdBQVdGLFFBQVEsRUFBRTtNQUNuQixJQUFJLENBQUM1SSxrQkFBa0IsR0FBRzRJLFFBQVE7TUFDbEMsT0FBTyxJQUFJO0lBQ2I7RUFBQztFQUFBLE9BQUE3UyxZQUFBO0FBQUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanVzdC12YWxpZGF0ZS9kaXN0L2p1c3QtdmFsaWRhdGUuZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5jb25zdCBFTUFJTF9SRUdFWFAgPSAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuY29uc3QgSU5URUdFUl9SRUdFWFAgPSAvXi0/WzAtOV1cXGQqJC87XG5jb25zdCBQQVNTV09SRF9SRUdFWFAgPSAvXig/PS4qW0EtWmEtel0pKD89LipcXGQpLns4LH0kLztcbmNvbnN0IFNUUk9OR19QQVNTV09SRF9SRUdFWFAgPSAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZCkoPz0uKltAJCElKj8mXSlbQS1aYS16XFxkQCQhJSo/Jl17OCx9JC87XG5jb25zdCBpc0VtcHR5ID0gKHZhbHVlKSA9PiB7XG4gIGxldCBuZXdWYWwgPSB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIG5ld1ZhbCA9IHZhbHVlLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gIW5ld1ZhbDtcbn07XG5jb25zdCBpc0VtYWlsID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG59O1xuY29uc3QgaXNMZW5ndGhNb3JlVGhhbk1heCA9ICh2YWx1ZSwgbGVuKSA9PiB7XG4gIHJldHVybiB2YWx1ZS5sZW5ndGggPiBsZW47XG59O1xuY29uc3QgaXNMZW5ndGhMZXNzVGhhbk1pbiA9ICh2YWx1ZSwgbGVuKSA9PiB7XG4gIHJldHVybiB2YWx1ZS5sZW5ndGggPCBsZW47XG59O1xuY29uc3QgaXNOdW1iZXIgPSAodmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gIWlzTmFOKCt2YWx1ZSkgJiYgIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG5jb25zdCBpc0ludGVnZXIgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIElOVEVHRVJfUkVHRVhQLnRlc3QodmFsdWUpO1xufTtcbmNvbnN0IGlzUGFzc3dvcmQgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIFBBU1NXT1JEX1JFR0VYUC50ZXN0KHZhbHVlKTtcbn07XG5jb25zdCBpc1N0cm9uZ1Bhc3N3b3JkID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiBTVFJPTkdfUEFTU1dPUkRfUkVHRVhQLnRlc3QodmFsdWUpO1xufTtcbmNvbnN0IGlzTnVtYmVyTW9yZVRoYW5NYXggPSAodmFsdWUsIGxlbikgPT4ge1xuICByZXR1cm4gdmFsdWUgPiBsZW47XG59O1xuY29uc3QgaXNOdW1iZXJMZXNzVGhhbk1pbiA9ICh2YWx1ZSwgbGVuKSA9PiB7XG4gIHJldHVybiB2YWx1ZSA8IGxlbjtcbn07XG5jb25zdCBpc0ludmFsaWRPckVtcHR5U3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgfHwgdmFsdWUgPT09IFwiXCI7XG59O1xudmFyIFJ1bGVzID0gLyogQF9fUFVSRV9fICovICgoUnVsZXMyKSA9PiB7XG4gIFJ1bGVzMltcIlJlcXVpcmVkXCJdID0gXCJyZXF1aXJlZFwiO1xuICBSdWxlczJbXCJFbWFpbFwiXSA9IFwiZW1haWxcIjtcbiAgUnVsZXMyW1wiTWluTGVuZ3RoXCJdID0gXCJtaW5MZW5ndGhcIjtcbiAgUnVsZXMyW1wiTWF4TGVuZ3RoXCJdID0gXCJtYXhMZW5ndGhcIjtcbiAgUnVsZXMyW1wiUGFzc3dvcmRcIl0gPSBcInBhc3N3b3JkXCI7XG4gIFJ1bGVzMltcIk51bWJlclwiXSA9IFwibnVtYmVyXCI7XG4gIFJ1bGVzMltcIkludGVnZXJcIl0gPSBcImludGVnZXJcIjtcbiAgUnVsZXMyW1wiTWF4TnVtYmVyXCJdID0gXCJtYXhOdW1iZXJcIjtcbiAgUnVsZXMyW1wiTWluTnVtYmVyXCJdID0gXCJtaW5OdW1iZXJcIjtcbiAgUnVsZXMyW1wiU3Ryb25nUGFzc3dvcmRcIl0gPSBcInN0cm9uZ1Bhc3N3b3JkXCI7XG4gIFJ1bGVzMltcIkN1c3RvbVJlZ2V4cFwiXSA9IFwiY3VzdG9tUmVnZXhwXCI7XG4gIFJ1bGVzMltcIk1pbkZpbGVzQ291bnRcIl0gPSBcIm1pbkZpbGVzQ291bnRcIjtcbiAgUnVsZXMyW1wiTWF4RmlsZXNDb3VudFwiXSA9IFwibWF4RmlsZXNDb3VudFwiO1xuICBSdWxlczJbXCJGaWxlc1wiXSA9IFwiZmlsZXNcIjtcbiAgcmV0dXJuIFJ1bGVzMjtcbn0pKFJ1bGVzIHx8IHt9KTtcbnZhciBHcm91cFJ1bGVzID0gLyogQF9fUFVSRV9fICovICgoR3JvdXBSdWxlczIpID0+IHtcbiAgR3JvdXBSdWxlczJbXCJSZXF1aXJlZFwiXSA9IFwicmVxdWlyZWRcIjtcbiAgcmV0dXJuIEdyb3VwUnVsZXMyO1xufSkoR3JvdXBSdWxlcyB8fCB7fSk7XG52YXIgQ3VzdG9tU3R5bGVUYWdJZHMgPSAvKiBAX19QVVJFX18gKi8gKChDdXN0b21TdHlsZVRhZ0lkczIpID0+IHtcbiAgQ3VzdG9tU3R5bGVUYWdJZHMyW1wiTGFiZWxcIl0gPSBcImxhYmVsXCI7XG4gIEN1c3RvbVN0eWxlVGFnSWRzMltcIkxhYmVsQXJyb3dcIl0gPSBcImxhYmVsQXJyb3dcIjtcbiAgcmV0dXJuIEN1c3RvbVN0eWxlVGFnSWRzMjtcbn0pKEN1c3RvbVN0eWxlVGFnSWRzIHx8IHt9KTtcbmNvbnN0IGRlZmF1bHREaWN0aW9uYXJ5ID0gW1xuICB7XG4gICAga2V5OiBSdWxlcy5SZXF1aXJlZCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJUaGUgZmllbGQgaXMgcmVxdWlyZWRcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuRW1haWwsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiRW1haWwgaGFzIGludmFsaWQgZm9ybWF0XCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBrZXk6IFJ1bGVzLk1heExlbmd0aCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJUaGUgZmllbGQgbXVzdCBjb250YWluIGEgbWF4aW11bSBvZiA6dmFsdWUgY2hhcmFjdGVyc1wiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5NaW5MZW5ndGgsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiVGhlIGZpZWxkIG11c3QgY29udGFpbiBhIG1pbmltdW0gb2YgOnZhbHVlIGNoYXJhY3RlcnNcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuUGFzc3dvcmQsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiUGFzc3dvcmQgbXVzdCBjb250YWluIG1pbmltdW0gZWlnaHQgY2hhcmFjdGVycywgYXQgbGVhc3Qgb25lIGxldHRlciBhbmQgb25lIG51bWJlclwiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5TdHJvbmdQYXNzd29yZCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJQYXNzd29yZCBzaG91bGQgY29udGFpbiBtaW5pbXVtIGVpZ2h0IGNoYXJhY3RlcnMsIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBvbmUgbG93ZXJjYXNlIGxldHRlciwgb25lIG51bWJlciBhbmQgb25lIHNwZWNpYWwgY2hhcmFjdGVyXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBrZXk6IFJ1bGVzLk51bWJlcixcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJWYWx1ZSBzaG91bGQgYmUgYSBudW1iZXJcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuTWF4TnVtYmVyLFxuICAgIGRpY3Q6IHtcbiAgICAgIGVuOiBcIk51bWJlciBzaG91bGQgYmUgbGVzcyBvciBlcXVhbCB0aGFuIDp2YWx1ZVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5NaW5OdW1iZXIsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiTnVtYmVyIHNob3VsZCBiZSBtb3JlIG9yIGVxdWFsIHRoYW4gOnZhbHVlXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBrZXk6IFJ1bGVzLk1pbkZpbGVzQ291bnQsXG4gICAgZGljdDoge1xuICAgICAgZW46IFwiRmlsZXMgY291bnQgc2hvdWxkIGJlIG1vcmUgb3IgZXF1YWwgdGhhbiA6dmFsdWVcIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIGtleTogUnVsZXMuTWF4RmlsZXNDb3VudCxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJGaWxlcyBjb3VudCBzaG91bGQgYmUgbGVzcyBvciBlcXVhbCB0aGFuIDp2YWx1ZVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAga2V5OiBSdWxlcy5GaWxlcyxcbiAgICBkaWN0OiB7XG4gICAgICBlbjogXCJVcGxvYWRlZCBmaWxlcyBoYXZlIG9uZSBvciBzZXZlcmFsIGludmFsaWQgcHJvcGVydGllcyAoZXh0ZW5zaW9uL3NpemUvdHlwZSBldGMpLlwiXG4gICAgfVxuICB9XG5dO1xuY29uc3QgREVGQVVMVF9FUlJPUl9GSUVMRF9NRVNTQUdFID0gXCJWYWx1ZSBpcyBpbmNvcnJlY3RcIjtcbmNvbnN0IGlzUHJvbWlzZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIgJiYgdmFsICE9PSBudWxsICYmIFwidGhlblwiIGluIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGdldE5vZGVQYXJlbnRzID0gKGVsKSA9PiB7XG4gIGxldCBlbGVtID0gZWw7XG4gIGNvbnN0IGVscyA9IFtdO1xuICB3aGlsZSAoZWxlbSkge1xuICAgIGVscy51bnNoaWZ0KGVsZW0pO1xuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIGVscztcbn07XG5jb25zdCBnZXRDbG9zZXN0UGFyZW50ID0gKGdyb3VwcywgcGFyZW50cykgPT4ge1xuICBjb25zdCByZXZlcnNlZFBhcmVudHMgPSBbLi4ucGFyZW50c10ucmV2ZXJzZSgpO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmV2ZXJzZWRQYXJlbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcmV2ZXJzZWRQYXJlbnRzW2ldO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGdyb3Vwcykge1xuICAgICAgY29uc3QgZ3JvdXAgPSBncm91cHNba2V5XTtcbiAgICAgIGlmIChncm91cC5ncm91cEVsZW0gPT09IHBhcmVudCkge1xuICAgICAgICByZXR1cm4gW2tleSwgZ3JvdXBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBnZXRDbGFzc0xpc3QgPSAoY2xhc3NMaXN0KSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNsYXNzTGlzdCkpIHtcbiAgICByZXR1cm4gY2xhc3NMaXN0LmZpbHRlcigoY2xzKSA9PiBjbHMubGVuZ3RoID4gMCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjbGFzc0xpc3QgPT09IFwic3RyaW5nXCIgJiYgY2xhc3NMaXN0LnRyaW0oKSkge1xuICAgIHJldHVybiBbLi4uY2xhc3NMaXN0LnNwbGl0KFwiIFwiKS5maWx0ZXIoKGNscykgPT4gY2xzLmxlbmd0aCA+IDApXTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuY29uc3QgaXNFbGVtZW50ID0gKGVsZW1lbnQpID0+IHtcbiAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQ7XG59O1xuY29uc3QgZXJyb3JMYWJlbENzcyA9IGAuanVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFtkYXRhLXRvb2x0aXA9dHJ1ZV17cG9zaXRpb246Zml4ZWQ7cGFkZGluZzo0cHggOHB4O2JhY2tncm91bmQ6IzQyM2YzZjtjb2xvcjojZmZmO3doaXRlLXNwYWNlOm5vd3JhcDt6LWluZGV4OjEwO2JvcmRlci1yYWRpdXM6NHB4O3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01cHgpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXTpiZWZvcmV7Y29udGVudDonJzt3aWR0aDowO2hlaWdodDowO2JvcmRlci1sZWZ0OnNvbGlkIDVweCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6c29saWQgNXB4IHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206c29saWQgNXB4ICM0MjNmM2Y7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDozO2Rpc3BsYXk6YmxvY2s7Ym90dG9tOi01cHg7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpO2xlZnQ6Y2FsYyg1MCUgLSA1cHgpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXVtkYXRhLWRpcmVjdGlvbj1sZWZ0XXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNXB4KX0uanVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFtkYXRhLXRvb2x0aXA9dHJ1ZV1bZGF0YS1kaXJlY3Rpb249bGVmdF06YmVmb3Jle3JpZ2h0Oi03cHg7Ym90dG9tOmF1dG87bGVmdDphdXRvO3RvcDpjYWxjKDUwJSAtIDJweCk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdW2RhdGEtZGlyZWN0aW9uPXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXVtkYXRhLWRpcmVjdGlvbj1yaWdodF06YmVmb3Jle3JpZ2h0OmF1dG87Ym90dG9tOmF1dG87bGVmdDotN3B4O3RvcDpjYWxjKDUwJSAtIDJweCk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXVtkYXRhLWRpcmVjdGlvbj1ib3R0b21de3RyYW5zZm9ybTp0cmFuc2xhdGVZKDVweCl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdW2RhdGEtZGlyZWN0aW9uPWJvdHRvbV06YmVmb3Jle3JpZ2h0OmF1dG87Ym90dG9tOmF1dG87bGVmdDpjYWxjKDUwJSAtIDVweCk7dG9wOi01cHg7dHJhbnNmb3JtOnJvdGF0ZSgwKX1gO1xuY29uc3QgVE9PTFRJUF9BUlJPV19IRUlHSFQgPSA1O1xuY29uc3QgZGVmYXVsdEdsb2JhbENvbmZpZyA9IHtcbiAgZXJyb3JGaWVsZFN0eWxlOiB7XG4gICAgY29sb3I6IFwiI2I4MTExMVwiLFxuICAgIGJvcmRlcjogXCIxcHggc29saWQgI0I4MTExMVwiXG4gIH0sXG4gIGVycm9yRmllbGRDc3NDbGFzczogXCJqdXN0LXZhbGlkYXRlLWVycm9yLWZpZWxkXCIsXG4gIHN1Y2Nlc3NGaWVsZENzc0NsYXNzOiBcImp1c3QtdmFsaWRhdGUtc3VjY2Vzcy1maWVsZFwiLFxuICBlcnJvckxhYmVsU3R5bGU6IHtcbiAgICBjb2xvcjogXCIjYjgxMTExXCJcbiAgfSxcbiAgZXJyb3JMYWJlbENzc0NsYXNzOiBcImp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxcIixcbiAgc3VjY2Vzc0xhYmVsQ3NzQ2xhc3M6IFwianVzdC12YWxpZGF0ZS1zdWNjZXNzLWxhYmVsXCIsXG4gIGZvY3VzSW52YWxpZEZpZWxkOiB0cnVlLFxuICBsb2NrRm9ybTogdHJ1ZSxcbiAgdGVzdGluZ01vZGU6IGZhbHNlLFxuICB2YWxpZGF0ZUJlZm9yZVN1Ym1pdHRpbmc6IGZhbHNlXG59O1xuY2xhc3MgSnVzdFZhbGlkYXRlIHtcbiAgY29uc3RydWN0b3IoZm9ybSwgZ2xvYmFsQ29uZmlnLCBkaWN0TG9jYWxlKSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvcm1cIiwgbnVsbCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZpZWxkc1wiLCB7fSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImdyb3VwRmllbGRzXCIsIHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZXJyb3JzXCIsIHt9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaXNWYWxpZFwiLCBmYWxzZSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImlzU3VibWl0dGVkXCIsIGZhbHNlKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZ2xvYmFsQ29uZmlnXCIsIGRlZmF1bHRHbG9iYWxDb25maWcpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJlcnJvckxhYmVsc1wiLCB7fSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInN1Y2Nlc3NMYWJlbHNcIiwge30pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJldmVudExpc3RlbmVyc1wiLCBbXSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRpY3RMb2NhbGVcIiwgZGVmYXVsdERpY3Rpb25hcnkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjdXJyZW50TG9jYWxlXCIsIFwiZW5cIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImN1c3RvbVN0eWxlVGFnc1wiLCB7fSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uU3VjY2Vzc0NhbGxiYWNrXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkZhaWxDYWxsYmFja1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25WYWxpZGF0ZUNhbGxiYWNrXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ0b29sdGlwc1wiLCBbXSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImxhc3RTY3JvbGxQb3NpdGlvblwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaXNTY3JvbGxUaWNrXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmaWVsZElkc1wiLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZ2V0S2V5QnlGaWVsZFNlbGVjdG9yXCIsIChmaWVsZCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZmllbGRJZHMuZ2V0KGZpZWxkKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZ2V0RmllbGRTZWxlY3RvckJ5S2V5XCIsIChrZXkpID0+IHtcbiAgICAgIGZvciAoY29uc3QgW2ZpZWxkU2VsZWN0b3IsIGtdIG9mIHRoaXMuZmllbGRJZHMpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gaykge1xuICAgICAgICAgIHJldHVybiBmaWVsZFNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJnZXRDb21wYXRpYmxlRmllbGRzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IHt9O1xuICAgICAgT2JqZWN0LmtleXModGhpcy5maWVsZHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBsZXQgbmV3S2V5ID0ga2V5O1xuICAgICAgICBjb25zdCBmaWVsZFNlbGVjdG9yID0gdGhpcy5nZXRGaWVsZFNlbGVjdG9yQnlLZXkoa2V5KTtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZFNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgbmV3S2V5ID0gZmllbGRTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZHNbbmV3S2V5XSA9IHsgLi4udGhpcy5maWVsZHNba2V5XSB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmllbGRzO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJzZXRLZXlCeUZpZWxkU2VsZWN0b3JcIiwgKGZpZWxkKSA9PiB7XG4gICAgICBpZiAodGhpcy5maWVsZElkcy5oYXMoZmllbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkSWRzLmdldChmaWVsZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBrZXkgPSBTdHJpbmcodGhpcy5maWVsZElkcy5zaXplICsgMSk7XG4gICAgICB0aGlzLmZpZWxkSWRzLnNldChmaWVsZCwga2V5KTtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlZnJlc2hBbGxUb29sdGlwc1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLnRvb2x0aXBzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaXRlbS5yZWZyZXNoKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGFuZGxlRG9jdW1lbnRTY3JvbGxcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5sYXN0U2Nyb2xsUG9zaXRpb24gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgIGlmICghdGhpcy5pc1Njcm9sbFRpY2spIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZWZyZXNoQWxsVG9vbHRpcHMoKTtcbiAgICAgICAgICB0aGlzLmlzU2Nyb2xsVGljayA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pc1Njcm9sbFRpY2sgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb3JtU3VibWl0SGFuZGxlclwiLCAoZXYpID0+IHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmlzU3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsaWRhdGVIYW5kbGVyKGV2KTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGFuZGxlRmllbGRDaGFuZ2VcIiwgKHRhcmdldCkgPT4ge1xuICAgICAgbGV0IGZvdW5kS2V5O1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5maWVsZHMpIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1trZXldO1xuICAgICAgICBpZiAoZmllbGQuZWxlbSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgZm91bmRLZXkgPSBrZXk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghZm91bmRLZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5maWVsZHNbZm91bmRLZXldLnRvdWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy52YWxpZGF0ZUZpZWxkKGZvdW5kS2V5LCB0cnVlKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGFuZGxlR3JvdXBDaGFuZ2VcIiwgKHRhcmdldCkgPT4ge1xuICAgICAgbGV0IGZvdW5kS2V5O1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5ncm91cEZpZWxkcykge1xuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuZ3JvdXBGaWVsZHNba2V5XTtcbiAgICAgICAgaWYgKGdyb3VwLmVsZW1zLmZpbmQoKGVsZW0pID0+IGVsZW0gPT09IHRhcmdldCkpIHtcbiAgICAgICAgICBmb3VuZEtleSA9IGtleTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFmb3VuZEtleSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmdyb3VwRmllbGRzW2ZvdW5kS2V5XS50b3VjaGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsaWRhdGVHcm91cChmb3VuZEtleSwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImhhbmRsZXJDaGFuZ2VcIiwgKGV2KSA9PiB7XG4gICAgICBpZiAoIWV2LnRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmhhbmRsZUZpZWxkQ2hhbmdlKGV2LnRhcmdldCk7XG4gICAgICB0aGlzLmhhbmRsZUdyb3VwQ2hhbmdlKGV2LnRhcmdldCk7XG4gICAgICB0aGlzLnJlbmRlckVycm9ycygpO1xuICAgIH0pO1xuICAgIHRoaXMuaW5pdGlhbGl6ZShmb3JtLCBnbG9iYWxDb25maWcsIGRpY3RMb2NhbGUpO1xuICB9XG4gIGluaXRpYWxpemUoZm9ybSwgZ2xvYmFsQ29uZmlnLCBkaWN0TG9jYWxlKSB7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmVycm9ycyA9IHt9O1xuICAgIHRoaXMuaXNWYWxpZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNTdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmdsb2JhbENvbmZpZyA9IGRlZmF1bHRHbG9iYWxDb25maWc7XG4gICAgdGhpcy5lcnJvckxhYmVscyA9IHt9O1xuICAgIHRoaXMuc3VjY2Vzc0xhYmVscyA9IHt9O1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmN1c3RvbVN0eWxlVGFncyA9IHt9O1xuICAgIHRoaXMudG9vbHRpcHMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRMb2NhbGUgPSBcImVuXCI7XG4gICAgaWYgKHR5cGVvZiBmb3JtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihmb3JtKTtcbiAgICAgIGlmICghZWxlbSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBgRm9ybSB3aXRoICR7Zm9ybX0gc2VsZWN0b3Igbm90IGZvdW5kISBQbGVhc2UgY2hlY2sgdGhlIGZvcm0gc2VsZWN0b3JgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldEZvcm0oZWxlbSk7XG4gICAgfSBlbHNlIGlmIChmb3JtIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50KSB7XG4gICAgICB0aGlzLnNldEZvcm0oZm9ybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRm9ybSBzZWxlY3RvciBpcyBub3QgdmFsaWQuIFBsZWFzZSBzcGVjaWZ5IGEgc3RyaW5nIHNlbGVjdG9yIG9yIGEgRE9NIGVsZW1lbnQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5nbG9iYWxDb25maWcgPSB7IC4uLmRlZmF1bHRHbG9iYWxDb25maWcsIC4uLmdsb2JhbENvbmZpZyB9O1xuICAgIGlmIChkaWN0TG9jYWxlKSB7XG4gICAgICB0aGlzLmRpY3RMb2NhbGUgPSBbLi4uZGljdExvY2FsZSwgLi4uZGVmYXVsdERpY3Rpb25hcnldO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc1Rvb2x0aXAoKSkge1xuICAgICAgY29uc3Qgc3R5bGVUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICBzdHlsZVRhZy50ZXh0Q29udGVudCA9IGVycm9yTGFiZWxDc3M7XG4gICAgICB0aGlzLmN1c3RvbVN0eWxlVGFnc1tDdXN0b21TdHlsZVRhZ0lkcy5MYWJlbF0gPSBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlVGFnKTtcbiAgICAgIHRoaXMuYWRkTGlzdGVuZXIoXCJzY3JvbGxcIiwgZG9jdW1lbnQsIHRoaXMuaGFuZGxlRG9jdW1lbnRTY3JvbGwpO1xuICAgIH1cbiAgfVxuICBnZXRMb2NhbGlzZWRTdHJpbmcocnVsZSwgcnVsZVZhbHVlLCBjdXN0b21Nc2cpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgc2VhcmNoID0gY3VzdG9tTXNnICE9IG51bGwgPyBjdXN0b21Nc2cgOiBydWxlO1xuICAgIGxldCBsb2NhbGlzZWRTdHIgPSAoX2EgPSB0aGlzLmRpY3RMb2NhbGUuZmluZCgoaXRlbSkgPT4gaXRlbS5rZXkgPT09IHNlYXJjaCkpID09IG51bGwgPyB2b2lkIDAgOiBfYS5kaWN0W3RoaXMuY3VycmVudExvY2FsZV07XG4gICAgaWYgKCFsb2NhbGlzZWRTdHIpIHtcbiAgICAgIGlmIChjdXN0b21Nc2cpIHtcbiAgICAgICAgbG9jYWxpc2VkU3RyID0gY3VzdG9tTXNnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobG9jYWxpc2VkU3RyICYmIHJ1bGVWYWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICBzd2l0Y2ggKHJ1bGUpIHtcbiAgICAgICAgY2FzZSBSdWxlcy5NYXhMZW5ndGg6XG4gICAgICAgIGNhc2UgUnVsZXMuTWluTGVuZ3RoOlxuICAgICAgICBjYXNlIFJ1bGVzLk1heE51bWJlcjpcbiAgICAgICAgY2FzZSBSdWxlcy5NaW5OdW1iZXI6XG4gICAgICAgIGNhc2UgUnVsZXMuTWluRmlsZXNDb3VudDpcbiAgICAgICAgY2FzZSBSdWxlcy5NYXhGaWxlc0NvdW50OlxuICAgICAgICAgIGxvY2FsaXNlZFN0ciA9IGxvY2FsaXNlZFN0ci5yZXBsYWNlKFwiOnZhbHVlXCIsIFN0cmluZyhydWxlVmFsdWUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsaXNlZFN0ciB8fCBjdXN0b21Nc2cgfHwgREVGQVVMVF9FUlJPUl9GSUVMRF9NRVNTQUdFO1xuICB9XG4gIGdldEZpZWxkRXJyb3JNZXNzYWdlKGZpZWxkUnVsZSwgZWxlbSkge1xuICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBmaWVsZFJ1bGUuZXJyb3JNZXNzYWdlID09PSBcImZ1bmN0aW9uXCIgPyBmaWVsZFJ1bGUuZXJyb3JNZXNzYWdlKHRoaXMuZ2V0RWxlbVZhbHVlKGVsZW0pLCB0aGlzLmZpZWxkcykgOiBmaWVsZFJ1bGUuZXJyb3JNZXNzYWdlO1xuICAgIHJldHVybiB0aGlzLmdldExvY2FsaXNlZFN0cmluZyhmaWVsZFJ1bGUucnVsZSwgZmllbGRSdWxlLnZhbHVlLCBtc2cpO1xuICB9XG4gIGdldEZpZWxkU3VjY2Vzc01lc3NhZ2Uoc3VjY2Vzc01lc3NhZ2UsIGVsZW0pIHtcbiAgICBjb25zdCBtc2cgPSB0eXBlb2Ygc3VjY2Vzc01lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIiA/IHN1Y2Nlc3NNZXNzYWdlKHRoaXMuZ2V0RWxlbVZhbHVlKGVsZW0pLCB0aGlzLmZpZWxkcykgOiBzdWNjZXNzTWVzc2FnZTtcbiAgICByZXR1cm4gdGhpcy5nZXRMb2NhbGlzZWRTdHJpbmcodm9pZCAwLCB2b2lkIDAsIG1zZyk7XG4gIH1cbiAgZ2V0R3JvdXBFcnJvck1lc3NhZ2UoZ3JvdXBSdWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TG9jYWxpc2VkU3RyaW5nKFxuICAgICAgZ3JvdXBSdWxlLnJ1bGUsXG4gICAgICB2b2lkIDAsXG4gICAgICBncm91cFJ1bGUuZXJyb3JNZXNzYWdlXG4gICAgKTtcbiAgfVxuICBnZXRHcm91cFN1Y2Nlc3NNZXNzYWdlKGdyb3VwUnVsZSkge1xuICAgIGlmICghZ3JvdXBSdWxlLnN1Y2Nlc3NNZXNzYWdlKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRMb2NhbGlzZWRTdHJpbmcoXG4gICAgICB2b2lkIDAsXG4gICAgICB2b2lkIDAsXG4gICAgICBncm91cFJ1bGUuc3VjY2Vzc01lc3NhZ2VcbiAgICApO1xuICB9XG4gIHNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSkge1xuICAgIHRoaXMuZmllbGRzW2tleV0uaXNWYWxpZCA9IGZhbHNlO1xuICAgIHRoaXMuZmllbGRzW2tleV0uZXJyb3JNZXNzYWdlID0gdGhpcy5nZXRGaWVsZEVycm9yTWVzc2FnZShcbiAgICAgIGZpZWxkUnVsZSxcbiAgICAgIHRoaXMuZmllbGRzW2tleV0uZWxlbVxuICAgICk7XG4gIH1cbiAgc2V0RmllbGRWYWxpZChrZXksIHN1Y2Nlc3NNZXNzYWdlKSB7XG4gICAgdGhpcy5maWVsZHNba2V5XS5pc1ZhbGlkID0gdHJ1ZTtcbiAgICBpZiAoc3VjY2Vzc01lc3NhZ2UgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5maWVsZHNba2V5XS5zdWNjZXNzTWVzc2FnZSA9IHRoaXMuZ2V0RmllbGRTdWNjZXNzTWVzc2FnZShcbiAgICAgICAgc3VjY2Vzc01lc3NhZ2UsXG4gICAgICAgIHRoaXMuZmllbGRzW2tleV0uZWxlbVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgc2V0R3JvdXBJbnZhbGlkKGtleSwgZ3JvdXBSdWxlKSB7XG4gICAgdGhpcy5ncm91cEZpZWxkc1trZXldLmlzVmFsaWQgPSBmYWxzZTtcbiAgICB0aGlzLmdyb3VwRmllbGRzW2tleV0uZXJyb3JNZXNzYWdlID0gdGhpcy5nZXRHcm91cEVycm9yTWVzc2FnZShncm91cFJ1bGUpO1xuICB9XG4gIHNldEdyb3VwVmFsaWQoa2V5LCBncm91cFJ1bGUpIHtcbiAgICB0aGlzLmdyb3VwRmllbGRzW2tleV0uaXNWYWxpZCA9IHRydWU7XG4gICAgdGhpcy5ncm91cEZpZWxkc1trZXldLnN1Y2Nlc3NNZXNzYWdlID0gdGhpcy5nZXRHcm91cFN1Y2Nlc3NNZXNzYWdlKGdyb3VwUnVsZSk7XG4gIH1cbiAgZ2V0RWxlbVZhbHVlKGVsZW0pIHtcbiAgICBzd2l0Y2ggKGVsZW0udHlwZSkge1xuICAgICAgY2FzZSBcImNoZWNrYm94XCI6XG4gICAgICAgIHJldHVybiBlbGVtLmNoZWNrZWQ7XG4gICAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgICByZXR1cm4gZWxlbS5maWxlcztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBlbGVtLnZhbHVlO1xuICAgIH1cbiAgfVxuICB2YWxpZGF0ZUdyb3VwUnVsZShrZXksIGVsZW1zLCBncm91cFJ1bGUpIHtcbiAgICBzd2l0Y2ggKGdyb3VwUnVsZS5ydWxlKSB7XG4gICAgICBjYXNlIEdyb3VwUnVsZXMuUmVxdWlyZWQ6IHtcbiAgICAgICAgaWYgKGVsZW1zLmV2ZXJ5KChlbGVtKSA9PiAhZWxlbS5jaGVja2VkKSkge1xuICAgICAgICAgIHRoaXMuc2V0R3JvdXBJbnZhbGlkKGtleSwgZ3JvdXBSdWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldEdyb3VwVmFsaWQoa2V5LCBncm91cFJ1bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhbGlkYXRlRmllbGRSdWxlKGtleSwgZWxlbSwgZmllbGRSdWxlLCBhZnRlcklucHV0Q2hhbmdlZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgcnVsZVZhbHVlID0gZmllbGRSdWxlLnZhbHVlO1xuICAgIGNvbnN0IGVsZW1WYWx1ZSA9IHRoaXMuZ2V0RWxlbVZhbHVlKGVsZW0pO1xuICAgIGlmIChmaWVsZFJ1bGUucGx1Z2luKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBmaWVsZFJ1bGUucGx1Z2luKFxuICAgICAgICBlbGVtVmFsdWUsXG4gICAgICAgIHRoaXMuZ2V0Q29tcGF0aWJsZUZpZWxkcygpXG4gICAgICApO1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGZpZWxkUnVsZS5ydWxlKSB7XG4gICAgICBjYXNlIFJ1bGVzLlJlcXVpcmVkOiB7XG4gICAgICAgIGlmIChpc0VtcHR5KGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLkVtYWlsOiB7XG4gICAgICAgIGlmIChpc0ludmFsaWRPckVtcHR5U3RyaW5nKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRW1haWwoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuTWF4TGVuZ3RoOiB7XG4gICAgICAgIGlmIChydWxlVmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBydWxlVmFsdWUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBzaG91bGQgYmUgYSBudW1iZXIuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJbnZhbGlkT3JFbXB0eVN0cmluZyhlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTGVuZ3RoTW9yZVRoYW5NYXgoZWxlbVZhbHVlLCBydWxlVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5NaW5MZW5ndGg6IHtcbiAgICAgICAgaWYgKHJ1bGVWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgaXMgbm90IGRlZmluZWQuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVWYWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIHNob3VsZCBiZSBhIG51bWJlci4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ludmFsaWRPckVtcHR5U3RyaW5nKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNMZW5ndGhMZXNzVGhhbk1pbihlbGVtVmFsdWUsIHJ1bGVWYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLlBhc3N3b3JkOiB7XG4gICAgICAgIGlmIChpc0ludmFsaWRPckVtcHR5U3RyaW5nKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUGFzc3dvcmQoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuU3Ryb25nUGFzc3dvcmQ6IHtcbiAgICAgICAgaWYgKGlzSW52YWxpZE9yRW1wdHlTdHJpbmcoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNTdHJvbmdQYXNzd29yZChlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5OdW1iZXI6IHtcbiAgICAgICAgaWYgKGlzSW52YWxpZE9yRW1wdHlTdHJpbmcoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOdW1iZXIoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuSW50ZWdlcjoge1xuICAgICAgICBpZiAoaXNJbnZhbGlkT3JFbXB0eVN0cmluZyhlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0ludGVnZXIoZWxlbVZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuTWF4TnVtYmVyOiB7XG4gICAgICAgIGlmIChydWxlVmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBydWxlVmFsdWUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBzaG91bGQgYmUgYSBudW1iZXIuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJbnZhbGlkT3JFbXB0eVN0cmluZyhlbGVtVmFsdWUpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtID0gK2VsZW1WYWx1ZTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihudW0pIHx8IGlzTnVtYmVyTW9yZVRoYW5NYXgobnVtLCBydWxlVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5NaW5OdW1iZXI6IHtcbiAgICAgICAgaWYgKHJ1bGVWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgaXMgbm90IGRlZmluZWQuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVWYWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIHNob3VsZCBiZSBhIG51bWJlci4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ludmFsaWRPckVtcHR5U3RyaW5nKGVsZW1WYWx1ZSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW0gPSArZWxlbVZhbHVlO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG51bSkgfHwgaXNOdW1iZXJMZXNzVGhhbk1pbihudW0sIHJ1bGVWYWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLkN1c3RvbVJlZ2V4cDoge1xuICAgICAgICBpZiAocnVsZVZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlZ2V4cDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZWdleHAgPSBuZXcgUmVnRXhwKHJ1bGVWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBzaG91bGQgYmUgYSB2YWxpZCByZWdleHAuIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyID0gU3RyaW5nKGVsZW1WYWx1ZSk7XG4gICAgICAgIGlmIChzdHIgIT09IFwiXCIgJiYgIXJlZ2V4cC50ZXN0KHN0cikpIHtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFJ1bGVzLk1pbkZpbGVzQ291bnQ6IHtcbiAgICAgICAgaWYgKHJ1bGVWYWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBWYWx1ZSBmb3IgJHtmaWVsZFJ1bGUucnVsZX0gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgaXMgbm90IGRlZmluZWQuIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBydWxlVmFsdWUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBzaG91bGQgYmUgYSBudW1iZXIuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKGVsZW1WYWx1ZSA9PSBudWxsID8gdm9pZCAwIDogZWxlbVZhbHVlLmxlbmd0aCkgJiYgZWxlbVZhbHVlLmxlbmd0aCA8IHJ1bGVWYWx1ZSkge1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUnVsZXMuTWF4RmlsZXNDb3VudDoge1xuICAgICAgICBpZiAocnVsZVZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJ1bGVWYWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIHNob3VsZCBiZSBhIG51bWJlci4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChOdW1iZXIuaXNGaW5pdGUoZWxlbVZhbHVlID09IG51bGwgPyB2b2lkIDAgOiBlbGVtVmFsdWUubGVuZ3RoKSAmJiBlbGVtVmFsdWUubGVuZ3RoID4gcnVsZVZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBSdWxlcy5GaWxlczoge1xuICAgICAgICBpZiAocnVsZVZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBydWxlVmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbHVlIGZvciAke2ZpZWxkUnVsZS5ydWxlfSBydWxlIGZvciBbJHtrZXl9XSBmaWVsZCBzaG91bGQgYmUgYW4gb2JqZWN0LiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxlc0NvbmZpZyA9IHJ1bGVWYWx1ZS5maWxlcztcbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlc0NvbmZpZyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsdWUgZm9yICR7ZmllbGRSdWxlLnJ1bGV9IHJ1bGUgZm9yIFske2tleX1dIGZpZWxkIHNob3VsZCBiZSBhbiBvYmplY3Qgd2l0aCBmaWxlcyBhcnJheS4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNGaWxlUHJvcHNJbnZhbGlkID0gKGZpbGUsIGZpbGVDb25maWcpID0+IHtcbiAgICAgICAgICBjb25zdCBtaW5TaXplSW52YWxpZCA9IE51bWJlci5pc0Zpbml0ZShmaWxlQ29uZmlnLm1pblNpemUpICYmIGZpbGUuc2l6ZSA8IGZpbGVDb25maWcubWluU2l6ZTtcbiAgICAgICAgICBjb25zdCBtYXhTaXplSW52YWxpZCA9IE51bWJlci5pc0Zpbml0ZShmaWxlQ29uZmlnLm1heFNpemUpICYmIGZpbGUuc2l6ZSA+IGZpbGVDb25maWcubWF4U2l6ZTtcbiAgICAgICAgICBjb25zdCBuYW1lSW52YWxpZCA9IEFycmF5LmlzQXJyYXkoZmlsZUNvbmZpZy5uYW1lcykgJiYgIWZpbGVDb25maWcubmFtZXMuaW5jbHVkZXMoZmlsZS5uYW1lKTtcbiAgICAgICAgICBjb25zdCBleHRJbnZhbGlkID0gQXJyYXkuaXNBcnJheShmaWxlQ29uZmlnLmV4dGVuc2lvbnMpICYmICFmaWxlQ29uZmlnLmV4dGVuc2lvbnMuaW5jbHVkZXMoXG4gICAgICAgICAgICBmaWxlLm5hbWUuc3BsaXQoXCIuXCIpW2ZpbGUubmFtZS5zcGxpdChcIi5cIikubGVuZ3RoIC0gMV1cbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHR5cGVJbnZhbGlkID0gQXJyYXkuaXNBcnJheShmaWxlQ29uZmlnLnR5cGVzKSAmJiAhZmlsZUNvbmZpZy50eXBlcy5pbmNsdWRlcyhmaWxlLnR5cGUpO1xuICAgICAgICAgIHJldHVybiBtaW5TaXplSW52YWxpZCB8fCBtYXhTaXplSW52YWxpZCB8fCBuYW1lSW52YWxpZCB8fCBleHRJbnZhbGlkIHx8IHR5cGVJbnZhbGlkO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1WYWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBlbGVtVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGxldCBmaWxlSWR4ID0gMCwgbGVuID0gZWxlbVZhbHVlLmxlbmd0aDsgZmlsZUlkeCA8IGxlbjsgKytmaWxlSWR4KSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZWxlbVZhbHVlLml0ZW0oZmlsZUlkeCk7XG4gICAgICAgICAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpbGVzSW52YWxpZCA9IGlzRmlsZVByb3BzSW52YWxpZChmaWxlLCBmaWxlc0NvbmZpZyk7XG4gICAgICAgICAgICBpZiAoZmlsZXNJbnZhbGlkKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodHlwZW9mIGZpZWxkUnVsZS52YWxpZGF0b3IgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBgVmFsaWRhdG9yIGZvciBjdXN0b20gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgc2hvdWxkIGJlIGEgZnVuY3Rpb24uIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZpZWxkUnVsZS52YWxpZGF0b3IoXG4gICAgICAgICAgZWxlbVZhbHVlLFxuICAgICAgICAgIHRoaXMuZ2V0Q29tcGF0aWJsZUZpZWxkcygpXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSBcImJvb2xlYW5cIiAmJiB0eXBlb2YgcmVzdWx0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYFZhbGlkYXRvciByZXR1cm4gdmFsdWUgZm9yIFske2tleX1dIGZpZWxkIHNob3VsZCBiZSBib29sZWFuIG9yIGZ1bmN0aW9uLiBJdCB3aWxsIGJlIGNhc3QgdG8gYm9vbGVhbi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgaWYgKGFmdGVySW5wdXRDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkc1trZXldLmFzeW5jQ2hlY2tQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5maWVsZHNba2V5XS5hc3luY0NoZWNrUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHJlc3VsdCgpO1xuICAgICAgICAgICAgaWYgKCFpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBgVmFsaWRhdG9yIGZ1bmN0aW9uIGZvciBjdXN0b20gcnVsZSBmb3IgWyR7a2V5fV0gZmllbGQgc2hvdWxkIHJldHVybiBhIFByb21pc2UuIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuc2V0RmllbGRJbnZhbGlkKGtleSwgZmllbGRSdWxlKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigocmVzcCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIXJlc3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZpZWxkSW52YWxpZChrZXksIGZpZWxkUnVsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgdGhpcy5zZXRGaWVsZEludmFsaWQoa2V5LCBmaWVsZFJ1bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlzRm9ybVZhbGlkKCkge1xuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gT2JqZWN0LnZhbHVlcyh0aGlzLmZpZWxkcykubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBPYmplY3QudmFsdWVzKHRoaXMuZmllbGRzKVtpXTtcbiAgICAgIGlmIChpdGVtLmlzVmFsaWQgPT09IHZvaWQgMCkge1xuICAgICAgICBpc1ZhbGlkID0gdm9pZCAwO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmlzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBPYmplY3QudmFsdWVzKHRoaXMuZ3JvdXBGaWVsZHMpLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjb25zdCBpdGVtID0gT2JqZWN0LnZhbHVlcyh0aGlzLmdyb3VwRmllbGRzKVtpXTtcbiAgICAgIGlmIChpdGVtLmlzVmFsaWQgPT09IHZvaWQgMCkge1xuICAgICAgICBpc1ZhbGlkID0gdm9pZCAwO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmlzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc1ZhbGlkO1xuICB9XG4gIHZhbGlkYXRlRmllbGQoa2V5LCBhZnRlcklucHV0Q2hhbmdlZCA9IGZhbHNlKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZHNba2V5XTtcbiAgICBmaWVsZC5pc1ZhbGlkID0gdHJ1ZTtcbiAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgIFsuLi5maWVsZC5ydWxlc10ucmV2ZXJzZSgpLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IHRoaXMudmFsaWRhdGVGaWVsZFJ1bGUoXG4gICAgICAgIGtleSxcbiAgICAgICAgZmllbGQuZWxlbSxcbiAgICAgICAgcnVsZSxcbiAgICAgICAgYWZ0ZXJJbnB1dENoYW5nZWRcbiAgICAgICk7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgcHJvbWlzZXMucHVzaChyZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChmaWVsZC5pc1ZhbGlkKSB7XG4gICAgICB0aGlzLnNldEZpZWxkVmFsaWQoa2V5LCAoX2EgPSBmaWVsZC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5zdWNjZXNzTWVzc2FnZSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXMpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgdmFyIF9hMjtcbiAgICAgIGlmIChhZnRlcklucHV0Q2hhbmdlZCkge1xuICAgICAgICAoX2EyID0gdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2spID09IG51bGwgPyB2b2lkIDAgOiBfYTIuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgaXNWYWxpZDogdGhpcy5pc0Zvcm1WYWxpZCgpLFxuICAgICAgICAgIGlzU3VibWl0dGVkOiB0aGlzLmlzU3VibWl0dGVkLFxuICAgICAgICAgIGZpZWxkczogdGhpcy5nZXRDb21wYXRpYmxlRmllbGRzKCksXG4gICAgICAgICAgZ3JvdXBzOiB7IC4uLnRoaXMuZ3JvdXBGaWVsZHMgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXZhbGlkYXRlRmllbGQoZmllbGRTZWxlY3Rvcikge1xuICAgIGlmICh0eXBlb2YgZmllbGRTZWxlY3RvciAhPT0gXCJzdHJpbmdcIiAmJiAhaXNFbGVtZW50KGZpZWxkU2VsZWN0b3IpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEZpZWxkIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3Igb3IgYSB2YWxpZCBET00gZWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSB0aGlzLmdldEtleUJ5RmllbGRTZWxlY3RvcihmaWVsZFNlbGVjdG9yKTtcbiAgICBpZiAoIWtleSB8fCAhdGhpcy5maWVsZHNba2V5XSkge1xuICAgICAgY29uc29sZS5lcnJvcihgRmllbGQgbm90IGZvdW5kLiBDaGVjayB0aGUgZmllbGQgc2VsZWN0b3IuYCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlRmllbGQoa2V5LCB0cnVlKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgdGhpcy5jbGVhckZpZWxkU3R5bGUoa2V5KTtcbiAgICAgICAgdGhpcy5jbGVhckZpZWxkTGFiZWwoa2V5KTtcbiAgICAgICAgdGhpcy5yZW5kZXJGaWVsZEVycm9yKGtleSwgdHJ1ZSk7XG4gICAgICAgIHJlc29sdmUoISF0aGlzLmZpZWxkc1trZXldLmlzVmFsaWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV2YWxpZGF0ZUdyb3VwKGdyb3VwU2VsZWN0b3IpIHtcbiAgICBpZiAodHlwZW9mIGdyb3VwU2VsZWN0b3IgIT09IFwic3RyaW5nXCIgJiYgIWlzRWxlbWVudChncm91cFNlbGVjdG9yKSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBHcm91cCBzZWxlY3RvciBpcyBub3QgdmFsaWQuIFBsZWFzZSBzcGVjaWZ5IGEgc3RyaW5nIHNlbGVjdG9yIG9yIGEgdmFsaWQgRE9NIGVsZW1lbnQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXlCeUZpZWxkU2VsZWN0b3IoZ3JvdXBTZWxlY3Rvcik7XG4gICAgaWYgKCFrZXkgfHwgIXRoaXMuZ3JvdXBGaWVsZHNba2V5XSkge1xuICAgICAgY29uc29sZS5lcnJvcihgR3JvdXAgbm90IGZvdW5kLiBDaGVjayB0aGUgZ3JvdXAgc2VsZWN0b3IuYCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlR3JvdXAoa2V5KS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgdGhpcy5jbGVhckZpZWxkTGFiZWwoa2V5KTtcbiAgICAgICAgdGhpcy5yZW5kZXJHcm91cEVycm9yKGtleSwgdHJ1ZSk7XG4gICAgICAgIHJlc29sdmUoISF0aGlzLmdyb3VwRmllbGRzW2tleV0uaXNWYWxpZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICB2YWxpZGF0ZUdyb3VwKGtleSwgYWZ0ZXJJbnB1dENoYW5nZWQgPSBmYWxzZSkge1xuICAgIGNvbnN0IGdyb3VwID0gdGhpcy5ncm91cEZpZWxkc1trZXldO1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgWy4uLmdyb3VwLnJ1bGVzXS5yZXZlcnNlKCkuZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gdGhpcy52YWxpZGF0ZUdyb3VwUnVsZShrZXksIGdyb3VwLmVsZW1zLCBydWxlKTtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICBwcm9taXNlcy5wdXNoKHJlcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsU2V0dGxlZChwcm9taXNlcykuZmluYWxseSgoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAoYWZ0ZXJJbnB1dENoYW5nZWQpIHtcbiAgICAgICAgKF9hID0gdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2spID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICBpc1ZhbGlkOiB0aGlzLmlzRm9ybVZhbGlkKCksXG4gICAgICAgICAgaXNTdWJtaXR0ZWQ6IHRoaXMuaXNTdWJtaXR0ZWQsXG4gICAgICAgICAgZmllbGRzOiB0aGlzLmdldENvbXBhdGlibGVGaWVsZHMoKSxcbiAgICAgICAgICBncm91cHM6IHsgLi4udGhpcy5ncm91cEZpZWxkcyB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZvY3VzSW52YWxpZEZpZWxkKCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZmllbGRzKSB7XG4gICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRzW2tleV07XG4gICAgICBpZiAoIWZpZWxkLmlzVmFsaWQpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBmaWVsZC5lbGVtLmZvY3VzKCksIDApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYWZ0ZXJTdWJtaXRWYWxpZGF0aW9uKGZvcmNlUmV2YWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICB0aGlzLnJlbmRlckVycm9ycyhmb3JjZVJldmFsaWRhdGlvbik7XG4gICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnLmZvY3VzSW52YWxpZEZpZWxkKSB7XG4gICAgICB0aGlzLmZvY3VzSW52YWxpZEZpZWxkKCk7XG4gICAgfVxuICB9XG4gIHZhbGlkYXRlKGZvcmNlUmV2YWxpZGF0aW9uID0gZmFsc2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnZhbGlkYXRlRmllbGQoa2V5KTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmtleXModGhpcy5ncm91cEZpZWxkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnZhbGlkYXRlR3JvdXAoa2V5KTtcbiAgICAgICAgaWYgKGlzUHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgUHJvbWlzZS5hbGxTZXR0bGVkKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmFmdGVyU3VibWl0VmFsaWRhdGlvbihmb3JjZVJldmFsaWRhdGlvbik7XG4gICAgICAgIChfYSA9IHRoaXMub25WYWxpZGF0ZUNhbGxiYWNrKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgaXNWYWxpZDogdGhpcy5pc0Zvcm1WYWxpZCgpLFxuICAgICAgICAgIGlzU3VibWl0dGVkOiB0aGlzLmlzU3VibWl0dGVkLFxuICAgICAgICAgIGZpZWxkczogdGhpcy5nZXRDb21wYXRpYmxlRmllbGRzKCksXG4gICAgICAgICAgZ3JvdXBzOiB7IC4uLnRoaXMuZ3JvdXBGaWVsZHMgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x2ZSghIXByb21pc2VzLmxlbmd0aCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXZhbGlkYXRlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy52YWxpZGF0ZUhhbmRsZXIodm9pZCAwLCB0cnVlKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnLmZvY3VzSW52YWxpZEZpZWxkKSB7XG4gICAgICAgICAgdGhpcy5mb2N1c0ludmFsaWRGaWVsZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUodGhpcy5pc1ZhbGlkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHZhbGlkYXRlSGFuZGxlcihldiwgZm9yY2VSZXZhbGlkYXRpb24gPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLmdsb2JhbENvbmZpZy5sb2NrRm9ybSkge1xuICAgICAgdGhpcy5sb2NrRm9ybSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZShmb3JjZVJldmFsaWRhdGlvbikuZmluYWxseSgoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iO1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsQ29uZmlnLmxvY2tGb3JtKSB7XG4gICAgICAgIHRoaXMudW5sb2NrRm9ybSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgICAoX2EgPSB0aGlzLm9uU3VjY2Vzc0NhbGxiYWNrKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBldik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoX2IgPSB0aGlzLm9uRmFpbENhbGxiYWNrKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbCh0aGlzLCB0aGlzLmdldENvbXBhdGlibGVGaWVsZHMoKSwgdGhpcy5ncm91cEZpZWxkcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc2V0Rm9ybShmb3JtKSB7XG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICB0aGlzLmZvcm0uc2V0QXR0cmlidXRlKFwibm92YWxpZGF0ZVwiLCBcIm5vdmFsaWRhdGVcIik7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLmZvcm0sIHRoaXMuZm9ybVN1Ym1pdEhhbmRsZXIpO1xuICAgIHRoaXMuYWRkTGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5mb3JtLCB0aGlzLmZvcm1TdWJtaXRIYW5kbGVyKTtcbiAgfVxuICBhZGRMaXN0ZW5lcih0eXBlLCBlbGVtLCBoYW5kbGVyKSB7XG4gICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaCh7IHR5cGUsIGVsZW0sIGZ1bmM6IGhhbmRsZXIgfSk7XG4gIH1cbiAgcmVtb3ZlTGlzdGVuZXIodHlwZSwgZWxlbSwgaGFuZGxlcikge1xuICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycy5maWx0ZXIoXG4gICAgICAoaXRlbSkgPT4gaXRlbS50eXBlICE9PSB0eXBlIHx8IGl0ZW0uZWxlbSAhPT0gZWxlbVxuICAgICk7XG4gIH1cbiAgYWRkRmllbGQoZmllbGRTZWxlY3RvciwgcnVsZXMsIGNvbmZpZykge1xuICAgIGlmICh0eXBlb2YgZmllbGRTZWxlY3RvciAhPT0gXCJzdHJpbmdcIiAmJiAhaXNFbGVtZW50KGZpZWxkU2VsZWN0b3IpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEZpZWxkIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3Igb3IgYSB2YWxpZCBET00gZWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgZWxlbTtcbiAgICBpZiAodHlwZW9mIGZpZWxkU2VsZWN0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGVsZW0gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihmaWVsZFNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbSA9IGZpZWxkU2VsZWN0b3I7XG4gICAgfVxuICAgIGlmICghZWxlbSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBGaWVsZCBkb2Vzbid0IGV4aXN0IGluIHRoZSBET00hIFBsZWFzZSBjaGVjayB0aGUgZmllbGQgc2VsZWN0b3IuYFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJ1bGVzKSB8fCAhcnVsZXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYFJ1bGVzIGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheSBhbmQgc2hvdWxkIGNvbnRhaW4gYXQgbGVhc3QgMSBlbGVtZW50LmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJ1bGVzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmICghKFwicnVsZVwiIGluIGl0ZW0gfHwgXCJ2YWxpZGF0b3JcIiBpbiBpdGVtIHx8IFwicGx1Z2luXCIgaW4gaXRlbSkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgYFJ1bGVzIGFyZ3VtZW50IG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgcnVsZSBvciB2YWxpZGF0b3IgcHJvcGVydHkuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFpdGVtLnZhbGlkYXRvciAmJiAhaXRlbS5wbHVnaW4gJiYgKCFpdGVtLnJ1bGUgfHwgIU9iamVjdC52YWx1ZXMoUnVsZXMpLmluY2x1ZGVzKGl0ZW0ucnVsZSkpKSB7XG4gICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgIGBSdWxlIHNob3VsZCBiZSBvbmUgb2YgdGhlc2UgdHlwZXM6ICR7T2JqZWN0LnZhbHVlcyhSdWxlcykuam9pbihcbiAgICAgICAgICAgIFwiLCBcIlxuICAgICAgICAgICl9LiBQcm92aWRlZCB2YWx1ZTogJHtpdGVtLnJ1bGV9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGtleSA9IHRoaXMuc2V0S2V5QnlGaWVsZFNlbGVjdG9yKGZpZWxkU2VsZWN0b3IpO1xuICAgIHRoaXMuZmllbGRzW2tleV0gPSB7XG4gICAgICBlbGVtLFxuICAgICAgcnVsZXMsXG4gICAgICBpc1ZhbGlkOiB2b2lkIDAsXG4gICAgICB0b3VjaGVkOiBmYWxzZSxcbiAgICAgIGNvbmZpZ1xuICAgIH07XG4gICAgdGhpcy5zZXRMaXN0ZW5lcnMoZWxlbSk7XG4gICAgaWYgKHRoaXMuaXNTdWJtaXR0ZWQgfHwgdGhpcy5nbG9iYWxDb25maWcudmFsaWRhdGVCZWZvcmVTdWJtaXR0aW5nKSB7XG4gICAgICB0aGlzLnZhbGlkYXRlRmllbGQoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmVtb3ZlRmllbGQoZmllbGRTZWxlY3Rvcikge1xuICAgIGlmICh0eXBlb2YgZmllbGRTZWxlY3RvciAhPT0gXCJzdHJpbmdcIiAmJiAhaXNFbGVtZW50KGZpZWxkU2VsZWN0b3IpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEZpZWxkIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3Igb3IgYSB2YWxpZCBET00gZWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSB0aGlzLmdldEtleUJ5RmllbGRTZWxlY3RvcihmaWVsZFNlbGVjdG9yKTtcbiAgICBpZiAoIWtleSB8fCAhdGhpcy5maWVsZHNba2V5XSkge1xuICAgICAgY29uc29sZS5lcnJvcihgRmllbGQgbm90IGZvdW5kLiBDaGVjayB0aGUgZmllbGQgc2VsZWN0b3IuYCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IHRoaXMuZ2V0TGlzdGVuZXJUeXBlKHRoaXMuZmllbGRzW2tleV0uZWxlbS50eXBlKTtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIHRoaXMuZmllbGRzW2tleV0uZWxlbSwgdGhpcy5oYW5kbGVyQ2hhbmdlKTtcbiAgICB0aGlzLmNsZWFyRXJyb3JzKCk7XG4gICAgZGVsZXRlIHRoaXMuZmllbGRzW2tleV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmVtb3ZlR3JvdXAoZ3JvdXApIHtcbiAgICBpZiAodHlwZW9mIGdyb3VwICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEdyb3VwIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3IuYFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXlCeUZpZWxkU2VsZWN0b3IoZ3JvdXApO1xuICAgIGlmICgha2V5IHx8ICF0aGlzLmdyb3VwRmllbGRzW2tleV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEdyb3VwIG5vdCBmb3VuZC4gQ2hlY2sgdGhlIGdyb3VwIHNlbGVjdG9yLmApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRoaXMuZ3JvdXBGaWVsZHNba2V5XS5lbGVtcy5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gdGhpcy5nZXRMaXN0ZW5lclR5cGUoZWxlbS50eXBlKTtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZWxlbSwgdGhpcy5oYW5kbGVyQ2hhbmdlKTtcbiAgICB9KTtcbiAgICB0aGlzLmNsZWFyRXJyb3JzKCk7XG4gICAgZGVsZXRlIHRoaXMuZ3JvdXBGaWVsZHNba2V5XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhZGRSZXF1aXJlZEdyb3VwKGdyb3VwRmllbGQsIGVycm9yTWVzc2FnZSwgY29uZmlnLCBzdWNjZXNzTWVzc2FnZSkge1xuICAgIGlmICh0eXBlb2YgZ3JvdXBGaWVsZCAhPT0gXCJzdHJpbmdcIiAmJiAhaXNFbGVtZW50KGdyb3VwRmllbGQpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEdyb3VwIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3Igb3IgYSB2YWxpZCBET00gZWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgZWxlbTtcbiAgICBpZiAodHlwZW9mIGdyb3VwRmllbGQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGVsZW0gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3Rvcihncm91cEZpZWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbSA9IGdyb3VwRmllbGQ7XG4gICAgfVxuICAgIGlmICghZWxlbSkge1xuICAgICAgdGhyb3cgRXJyb3IoYEdyb3VwIHNlbGVjdG9yIG5vdCBmb3VuZCEgUGxlYXNlIGNoZWNrIHRoZSBncm91cCBzZWxlY3Rvci5gKTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRzID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIik7XG4gICAgY29uc3QgY2hpbGRyZW5JbnB1dHMgPSBBcnJheS5mcm9tKGlucHV0cykuZmlsdGVyKChpbnB1dCkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gZ2V0Q2xvc2VzdFBhcmVudCh0aGlzLmdyb3VwRmllbGRzLCBnZXROb2RlUGFyZW50cyhpbnB1dCkpO1xuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyZW50WzFdLmVsZW1zLmZpbmQoKGVsZW0yKSA9PiBlbGVtMiAhPT0gaW5wdXQpO1xuICAgIH0pO1xuICAgIGNvbnN0IGtleSA9IHRoaXMuc2V0S2V5QnlGaWVsZFNlbGVjdG9yKGdyb3VwRmllbGQpO1xuICAgIHRoaXMuZ3JvdXBGaWVsZHNba2V5XSA9IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBydWxlOiBHcm91cFJ1bGVzLlJlcXVpcmVkLFxuICAgICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgICBzdWNjZXNzTWVzc2FnZVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZ3JvdXBFbGVtOiBlbGVtLFxuICAgICAgZWxlbXM6IGNoaWxkcmVuSW5wdXRzLFxuICAgICAgdG91Y2hlZDogZmFsc2UsXG4gICAgICBpc1ZhbGlkOiB2b2lkIDAsXG4gICAgICBjb25maWdcbiAgICB9O1xuICAgIGlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgdGhpcy5zZXRMaXN0ZW5lcnMoaW5wdXQpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGdldExpc3RlbmVyVHlwZSh0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiY2hlY2tib3hcIjpcbiAgICAgIGNhc2UgXCJzZWxlY3Qtb25lXCI6XG4gICAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgY2FzZSBcInJhZGlvXCI6IHtcbiAgICAgICAgcmV0dXJuIFwiY2hhbmdlXCI7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHJldHVybiBcImlucHV0XCI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNldExpc3RlbmVycyhlbGVtKSB7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMuZ2V0TGlzdGVuZXJUeXBlKGVsZW0udHlwZSk7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBlbGVtLCB0aGlzLmhhbmRsZXJDaGFuZ2UpO1xuICAgIHRoaXMuYWRkTGlzdGVuZXIodHlwZSwgZWxlbSwgdGhpcy5oYW5kbGVyQ2hhbmdlKTtcbiAgfVxuICBjbGVhckZpZWxkTGFiZWwoa2V5KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICAoX2EgPSB0aGlzLmVycm9yTGFiZWxzW2tleV0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5yZW1vdmUoKTtcbiAgICAoX2IgPSB0aGlzLnN1Y2Nlc3NMYWJlbHNba2V5XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnJlbW92ZSgpO1xuICB9XG4gIGNsZWFyRmllbGRTdHlsZShrZXkpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1trZXldO1xuICAgIGNvbnN0IGVycm9yU3R5bGUgPSAoKF9hID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZXJyb3JGaWVsZFN0eWxlKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkU3R5bGU7XG4gICAgT2JqZWN0LmtleXMoZXJyb3JTdHlsZSkuZm9yRWFjaCgoa2V5MikgPT4ge1xuICAgICAgZmllbGQuZWxlbS5zdHlsZVtrZXkyXSA9IFwiXCI7XG4gICAgfSk7XG4gICAgY29uc3Qgc3VjY2Vzc1N0eWxlID0gKChfYiA9IGZpZWxkLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnN1Y2Nlc3NGaWVsZFN0eWxlKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzRmllbGRTdHlsZSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhzdWNjZXNzU3R5bGUpLmZvckVhY2goKGtleTIpID0+IHtcbiAgICAgIGZpZWxkLmVsZW0uc3R5bGVba2V5Ml0gPSBcIlwiO1xuICAgIH0pO1xuICAgIGZpZWxkLmVsZW0uY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgIC4uLmdldENsYXNzTGlzdChcbiAgICAgICAgKChfYyA9IGZpZWxkLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmVycm9yRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuZXJyb3JGaWVsZENzc0NsYXNzXG4gICAgICApLFxuICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAoKF9kID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2Quc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3MpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZENzc0NsYXNzXG4gICAgICApXG4gICAgKTtcbiAgfVxuICBjbGVhckVycm9ycygpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIE9iamVjdC5rZXlzKHRoaXMuZXJyb3JMYWJlbHMpLmZvckVhY2goXG4gICAgICAoa2V5KSA9PiB0aGlzLmVycm9yTGFiZWxzW2tleV0ucmVtb3ZlKClcbiAgICApO1xuICAgIE9iamVjdC5rZXlzKHRoaXMuc3VjY2Vzc0xhYmVscykuZm9yRWFjaChcbiAgICAgIChrZXkpID0+IHRoaXMuc3VjY2Vzc0xhYmVsc1trZXldLnJlbW92ZSgpXG4gICAgKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmZpZWxkcykge1xuICAgICAgdGhpcy5jbGVhckZpZWxkU3R5bGUoa2V5KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5ncm91cEZpZWxkcykge1xuICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdyb3VwRmllbGRzW2tleV07XG4gICAgICBjb25zdCBlcnJvclN0eWxlID0gKChfYSA9IGdyb3VwLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmVycm9yRmllbGRTdHlsZSkgfHwgdGhpcy5nbG9iYWxDb25maWcuZXJyb3JGaWVsZFN0eWxlO1xuICAgICAgT2JqZWN0LmtleXMoZXJyb3JTdHlsZSkuZm9yRWFjaCgoa2V5MikgPT4ge1xuICAgICAgICBncm91cC5lbGVtcy5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICAgICAgdmFyIF9hMjtcbiAgICAgICAgICBlbGVtLnN0eWxlW2tleTJdID0gXCJcIjtcbiAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICAuLi5nZXRDbGFzc0xpc3QoXG4gICAgICAgICAgICAgICgoX2EyID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmVycm9yRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuZXJyb3JGaWVsZENzc0NsYXNzXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NTdHlsZSA9ICgoX2IgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYi5zdWNjZXNzRmllbGRTdHlsZSkgfHwgdGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0ZpZWxkU3R5bGUgfHwge307XG4gICAgICBPYmplY3Qua2V5cyhzdWNjZXNzU3R5bGUpLmZvckVhY2goKGtleTIpID0+IHtcbiAgICAgICAgZ3JvdXAuZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgICAgIHZhciBfYTI7XG4gICAgICAgICAgZWxlbS5zdHlsZVtrZXkyXSA9IFwiXCI7XG4gICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAgICAgICAoKF9hMiA9IGdyb3VwLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5zdWNjZXNzRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3NcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnRvb2x0aXBzID0gW107XG4gIH1cbiAgaXNUb29sdGlwKCkge1xuICAgIHJldHVybiAhIXRoaXMuZ2xvYmFsQ29uZmlnLnRvb2x0aXA7XG4gIH1cbiAgbG9ja0Zvcm0oKSB7XG4gICAgY29uc3QgZWxlbXMgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIFwiaW5wdXQsIHRleHRhcmVhLCBidXR0b24sIHNlbGVjdFwiXG4gICAgKTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGVsZW1zW2ldLnNldEF0dHJpYnV0ZShcbiAgICAgICAgXCJkYXRhLWp1c3QtdmFsaWRhdGUtZmFsbGJhY2stZGlzYWJsZWRcIixcbiAgICAgICAgZWxlbXNbaV0uZGlzYWJsZWQgPyBcInRydWVcIiA6IFwiZmFsc2VcIlxuICAgICAgKTtcbiAgICAgIGVsZW1zW2ldLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gICAgICBlbGVtc1tpXS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICBlbGVtc1tpXS5zdHlsZS53ZWJraXRGaWx0ZXIgPSBcImdyYXlzY2FsZSgxMDAlKVwiO1xuICAgICAgZWxlbXNbaV0uc3R5bGUuZmlsdGVyID0gXCJncmF5c2NhbGUoMTAwJSlcIjtcbiAgICB9XG4gIH1cbiAgdW5sb2NrRm9ybSgpIHtcbiAgICBjb25zdCBlbGVtcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0XCJcbiAgICApO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgaWYgKGVsZW1zW2ldLmdldEF0dHJpYnV0ZShcImRhdGEtanVzdC12YWxpZGF0ZS1mYWxsYmFjay1kaXNhYmxlZFwiKSAhPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgZWxlbXNbaV0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICB9XG4gICAgICBlbGVtc1tpXS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJcIjtcbiAgICAgIGVsZW1zW2ldLnN0eWxlLndlYmtpdEZpbHRlciA9IFwiXCI7XG4gICAgICBlbGVtc1tpXS5zdHlsZS5maWx0ZXIgPSBcIlwiO1xuICAgIH1cbiAgfVxuICByZW5kZXJUb29sdGlwKGVsZW0sIGVycm9yTGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH0gPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGVycm9yTGFiZWxSZWN0ID0gZXJyb3JMYWJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBwb3MgPSBwb3NpdGlvbiB8fCAoKF9hID0gdGhpcy5nbG9iYWxDb25maWcudG9vbHRpcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBvc2l0aW9uKTtcbiAgICBzd2l0Y2ggKHBvcykge1xuICAgICAgY2FzZSBcImxlZnRcIjoge1xuICAgICAgICBlcnJvckxhYmVsLnN0eWxlLnRvcCA9IGAke3RvcCArIGhlaWdodCAvIDIgLSBlcnJvckxhYmVsUmVjdC5oZWlnaHQgLyAyfXB4YDtcbiAgICAgICAgZXJyb3JMYWJlbC5zdHlsZS5sZWZ0ID0gYCR7bGVmdCAtIGVycm9yTGFiZWxSZWN0LndpZHRoIC0gVE9PTFRJUF9BUlJPV19IRUlHSFR9cHhgO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0b3BcIjoge1xuICAgICAgICBlcnJvckxhYmVsLnN0eWxlLnRvcCA9IGAke3RvcCAtIGVycm9yTGFiZWxSZWN0LmhlaWdodCAtIFRPT0xUSVBfQVJST1dfSEVJR0hUfXB4YDtcbiAgICAgICAgZXJyb3JMYWJlbC5zdHlsZS5sZWZ0ID0gYCR7bGVmdCArIHdpZHRoIC8gMiAtIGVycm9yTGFiZWxSZWN0LndpZHRoIC8gMn1weGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInJpZ2h0XCI6IHtcbiAgICAgICAgZXJyb3JMYWJlbC5zdHlsZS50b3AgPSBgJHt0b3AgKyBoZWlnaHQgLyAyIC0gZXJyb3JMYWJlbFJlY3QuaGVpZ2h0IC8gMn1weGA7XG4gICAgICAgIGVycm9yTGFiZWwuc3R5bGUubGVmdCA9IGAke2xlZnQgKyB3aWR0aCArIFRPT0xUSVBfQVJST1dfSEVJR0hUfXB4YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYm90dG9tXCI6IHtcbiAgICAgICAgZXJyb3JMYWJlbC5zdHlsZS50b3AgPSBgJHt0b3AgKyBoZWlnaHQgKyBUT09MVElQX0FSUk9XX0hFSUdIVH1weGA7XG4gICAgICAgIGVycm9yTGFiZWwuc3R5bGUubGVmdCA9IGAke2xlZnQgKyB3aWR0aCAvIDIgLSBlcnJvckxhYmVsUmVjdC53aWR0aCAvIDJ9cHhgO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZXJyb3JMYWJlbC5kYXRhc2V0LmRpcmVjdGlvbiA9IHBvcztcbiAgICBjb25zdCByZWZyZXNoID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJUb29sdGlwKGVsZW0sIGVycm9yTGFiZWwsIHBvc2l0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICByZWZyZXNoXG4gICAgfTtcbiAgfVxuICBjcmVhdGVFcnJvckxhYmVsRWxlbShrZXksIGVycm9yTWVzc2FnZSwgY29uZmlnKSB7XG4gICAgY29uc3QgZXJyb3JMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZXJyb3JMYWJlbC5pbm5lckhUTUwgPSBlcnJvck1lc3NhZ2U7XG4gICAgY29uc3QgY3VzdG9tRXJyb3JMYWJlbFN0eWxlID0gdGhpcy5pc1Rvb2x0aXAoKSA/IGNvbmZpZyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLmVycm9yTGFiZWxTdHlsZSA6IChjb25maWcgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5lcnJvckxhYmVsU3R5bGUpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yTGFiZWxTdHlsZTtcbiAgICBPYmplY3QuYXNzaWduKGVycm9yTGFiZWwuc3R5bGUsIGN1c3RvbUVycm9yTGFiZWxTdHlsZSk7XG4gICAgZXJyb3JMYWJlbC5jbGFzc0xpc3QuYWRkKFxuICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAoY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcuZXJyb3JMYWJlbENzc0NsYXNzKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvckxhYmVsQ3NzQ2xhc3NcbiAgICAgICksXG4gICAgICBcImp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxcIlxuICAgICk7XG4gICAgaWYgKHRoaXMuaXNUb29sdGlwKCkpIHtcbiAgICAgIGVycm9yTGFiZWwuZGF0YXNldC50b29sdGlwID0gXCJ0cnVlXCI7XG4gICAgfVxuICAgIGlmICh0aGlzLmdsb2JhbENvbmZpZy50ZXN0aW5nTW9kZSkge1xuICAgICAgZXJyb3JMYWJlbC5kYXRhc2V0LnRlc3RJZCA9IGBlcnJvci1sYWJlbC0ke2tleX1gO1xuICAgIH1cbiAgICB0aGlzLmVycm9yTGFiZWxzW2tleV0gPSBlcnJvckxhYmVsO1xuICAgIHJldHVybiBlcnJvckxhYmVsO1xuICB9XG4gIGNyZWF0ZVN1Y2Nlc3NMYWJlbEVsZW0oa2V5LCBzdWNjZXNzTWVzc2FnZSwgY29uZmlnKSB7XG4gICAgaWYgKHN1Y2Nlc3NNZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBzdWNjZXNzTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHN1Y2Nlc3NMYWJlbC5pbm5lckhUTUwgPSBzdWNjZXNzTWVzc2FnZTtcbiAgICBjb25zdCBjdXN0b21TdWNjZXNzTGFiZWxTdHlsZSA9IChjb25maWcgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5zdWNjZXNzTGFiZWxTdHlsZSkgfHwgdGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0xhYmVsU3R5bGU7XG4gICAgT2JqZWN0LmFzc2lnbihzdWNjZXNzTGFiZWwuc3R5bGUsIGN1c3RvbVN1Y2Nlc3NMYWJlbFN0eWxlKTtcbiAgICBzdWNjZXNzTGFiZWwuY2xhc3NMaXN0LmFkZChcbiAgICAgIC4uLmdldENsYXNzTGlzdChcbiAgICAgICAgKGNvbmZpZyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLnN1Y2Nlc3NMYWJlbENzc0NsYXNzKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzTGFiZWxDc3NDbGFzc1xuICAgICAgKSxcbiAgICAgIFwianVzdC12YWxpZGF0ZS1zdWNjZXNzLWxhYmVsXCJcbiAgICApO1xuICAgIGlmICh0aGlzLmdsb2JhbENvbmZpZy50ZXN0aW5nTW9kZSkge1xuICAgICAgc3VjY2Vzc0xhYmVsLmRhdGFzZXQudGVzdElkID0gYHN1Y2Nlc3MtbGFiZWwtJHtrZXl9YDtcbiAgICB9XG4gICAgdGhpcy5zdWNjZXNzTGFiZWxzW2tleV0gPSBzdWNjZXNzTGFiZWw7XG4gICAgcmV0dXJuIHN1Y2Nlc3NMYWJlbDtcbiAgfVxuICByZW5kZXJFcnJvcnNDb250YWluZXIobGFiZWwsIGVycm9yc0NvbnRhaW5lcikge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGVycm9yc0NvbnRhaW5lciB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvcnNDb250YWluZXI7XG4gICAgaWYgKHR5cGVvZiBjb250YWluZXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGVsZW0gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgaWYgKGVsZW0pIHtcbiAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgRXJyb3IgY29udGFpbmVyIHdpdGggJHtjb250YWluZXJ9IHNlbGVjdG9yIG5vdCBmb3VuZC4gRXJyb3JzIHdpbGwgYmUgcmVuZGVyZWQgYXMgdXN1YWxgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChjb250YWluZXIgIT09IHZvaWQgMCkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYEVycm9yIGNvbnRhaW5lciBub3QgZm91bmQuIEl0IHNob3VsZCBiZSBhIHN0cmluZyBvciBleGlzdGluZyBFbGVtZW50LiBFcnJvcnMgd2lsbCBiZSByZW5kZXJlZCBhcyB1c3VhbGBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZW5kZXJHcm91cExhYmVsKGVsZW0sIGxhYmVsLCBlcnJvcnNDb250YWluZXIsIGlzU3VjY2Vzcykge1xuICAgIGlmICghaXNTdWNjZXNzKSB7XG4gICAgICBjb25zdCByZW5kZXJlZEluRXJyb3JzQ29udGFpbmVyID0gdGhpcy5yZW5kZXJFcnJvcnNDb250YWluZXIoXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBlcnJvcnNDb250YWluZXJcbiAgICAgICk7XG4gICAgICBpZiAocmVuZGVyZWRJbkVycm9yc0NvbnRhaW5lcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGVsZW0uYXBwZW5kQ2hpbGQobGFiZWwpO1xuICB9XG4gIHJlbmRlckZpZWxkTGFiZWwoZWxlbSwgbGFiZWwsIGVycm9yc0NvbnRhaW5lciwgaXNTdWNjZXNzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgIGlmICghaXNTdWNjZXNzKSB7XG4gICAgICBjb25zdCByZW5kZXJlZEluRXJyb3JzQ29udGFpbmVyID0gdGhpcy5yZW5kZXJFcnJvcnNDb250YWluZXIoXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBlcnJvcnNDb250YWluZXJcbiAgICAgICk7XG4gICAgICBpZiAocmVuZGVyZWRJbkVycm9yc0NvbnRhaW5lcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbGVtLnR5cGUgPT09IFwiY2hlY2tib3hcIiB8fCBlbGVtLnR5cGUgPT09IFwicmFkaW9cIikge1xuICAgICAgY29uc3QgbGFiZWxFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgYGxhYmVsW2Zvcj1cIiR7ZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKX1cIl1gXG4gICAgICApO1xuICAgICAgaWYgKCgoX2IgPSAoX2EgPSBlbGVtLnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYS50YWdOYW1lKSA9PSBudWxsID8gdm9pZCAwIDogX2IudG9Mb3dlckNhc2UoKSkgPT09IFwibGFiZWxcIikge1xuICAgICAgICAoX2QgPSAoX2MgPSBlbGVtLnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYy5wYXJlbnRFbGVtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2QuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgfSBlbHNlIGlmIChsYWJlbEVsZW0pIHtcbiAgICAgICAgKF9lID0gbGFiZWxFbGVtLnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZS5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoX2YgPSBlbGVtLnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZi5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChfZyA9IGVsZW0ucGFyZW50RWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9nLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICB9XG4gIH1cbiAgc2hvd0xhYmVscyhmaWVsZHMsIGlzRXJyb3IpIHtcbiAgICBPYmplY3Qua2V5cyhmaWVsZHMpLmZvckVhY2goKGZpZWxkTmFtZSwgaSkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBmaWVsZHNbZmllbGROYW1lXTtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0S2V5QnlGaWVsZFNlbGVjdG9yKGZpZWxkTmFtZSk7XG4gICAgICBpZiAoIWtleSB8fCAhdGhpcy5maWVsZHNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGaWVsZCBub3QgZm91bmQuIENoZWNrIHRoZSBmaWVsZCBzZWxlY3Rvci5gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1trZXldO1xuICAgICAgZmllbGQuaXNWYWxpZCA9ICFpc0Vycm9yO1xuICAgICAgdGhpcy5jbGVhckZpZWxkU3R5bGUoa2V5KTtcbiAgICAgIHRoaXMuY2xlYXJGaWVsZExhYmVsKGtleSk7XG4gICAgICB0aGlzLnJlbmRlckZpZWxkRXJyb3Ioa2V5LCBmYWxzZSwgZXJyb3IpO1xuICAgICAgaWYgKGkgPT09IDAgJiYgdGhpcy5nbG9iYWxDb25maWcuZm9jdXNJbnZhbGlkRmllbGQpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBmaWVsZC5lbGVtLmZvY3VzKCksIDApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHNob3dFcnJvcnMoZmllbGRzKSB7XG4gICAgaWYgKHR5cGVvZiBmaWVsZHMgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBcIltzaG93RXJyb3JzXTogRXJyb3JzIHNob3VsZCBiZSBhbiBvYmplY3Qgd2l0aCBrZXk6IHZhbHVlIGZvcm1hdFwiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnNob3dMYWJlbHMoZmllbGRzLCB0cnVlKTtcbiAgfVxuICBzaG93U3VjY2Vzc0xhYmVscyhmaWVsZHMpIHtcbiAgICBpZiAodHlwZW9mIGZpZWxkcyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIFwiW3Nob3dTdWNjZXNzTGFiZWxzXTogTGFiZWxzIHNob3VsZCBiZSBhbiBvYmplY3Qgd2l0aCBrZXk6IHZhbHVlIGZvcm1hdFwiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnNob3dMYWJlbHMoZmllbGRzLCBmYWxzZSk7XG4gIH1cbiAgcmVuZGVyRmllbGRFcnJvcihrZXksIGZvcmNlZCA9IGZhbHNlLCBtZXNzYWdlKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1trZXldO1xuICAgIGlmIChmaWVsZC5pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChmaWVsZC5pc1ZhbGlkID09PSB2b2lkIDAgfHwgIWZvcmNlZCAmJiAhdGhpcy5pc1N1Ym1pdHRlZCAmJiAhZmllbGQudG91Y2hlZCAmJiBtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmlzVmFsaWQpIHtcbiAgICAgIGlmICghZmllbGQuYXN5bmNDaGVja1BlbmRpbmcpIHtcbiAgICAgICAgY29uc3Qgc3VjY2Vzc0xhYmVsID0gdGhpcy5jcmVhdGVTdWNjZXNzTGFiZWxFbGVtKFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBtZXNzYWdlICE9PSB2b2lkIDAgPyBtZXNzYWdlIDogZmllbGQuc3VjY2Vzc01lc3NhZ2UsXG4gICAgICAgICAgZmllbGQuY29uZmlnXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzdWNjZXNzTGFiZWwpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckZpZWxkTGFiZWwoXG4gICAgICAgICAgICBmaWVsZC5lbGVtLFxuICAgICAgICAgICAgc3VjY2Vzc0xhYmVsLFxuICAgICAgICAgICAgKF9hID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZXJyb3JzQ29udGFpbmVyLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZmllbGQuZWxlbS5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAgIC4uLmdldENsYXNzTGlzdChcbiAgICAgICAgICAgICgoX2IgPSBmaWVsZC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYi5zdWNjZXNzRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3NcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZpZWxkLmVsZW0uY2xhc3NMaXN0LmFkZChcbiAgICAgIC4uLmdldENsYXNzTGlzdChcbiAgICAgICAgKChfYyA9IGZpZWxkLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmVycm9yRmllbGRDc3NDbGFzcykgfHwgdGhpcy5nbG9iYWxDb25maWcuZXJyb3JGaWVsZENzc0NsYXNzXG4gICAgICApXG4gICAgKTtcbiAgICBjb25zdCBlcnJvckxhYmVsID0gdGhpcy5jcmVhdGVFcnJvckxhYmVsRWxlbShcbiAgICAgIGtleSxcbiAgICAgIG1lc3NhZ2UgIT09IHZvaWQgMCA/IG1lc3NhZ2UgOiBmaWVsZC5lcnJvck1lc3NhZ2UsXG4gICAgICBmaWVsZC5jb25maWdcbiAgICApO1xuICAgIHRoaXMucmVuZGVyRmllbGRMYWJlbChcbiAgICAgIGZpZWxkLmVsZW0sXG4gICAgICBlcnJvckxhYmVsLFxuICAgICAgKF9kID0gZmllbGQuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2QuZXJyb3JzQ29udGFpbmVyXG4gICAgKTtcbiAgICBpZiAodGhpcy5pc1Rvb2x0aXAoKSkge1xuICAgICAgdGhpcy50b29sdGlwcy5wdXNoKFxuICAgICAgICB0aGlzLnJlbmRlclRvb2x0aXAoXG4gICAgICAgICAgZmllbGQuZWxlbSxcbiAgICAgICAgICBlcnJvckxhYmVsLFxuICAgICAgICAgIChfZiA9IChfZSA9IGZpZWxkLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLnRvb2x0aXApID09IG51bGwgPyB2b2lkIDAgOiBfZi5wb3NpdGlvblxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZW5kZXJHcm91cEVycm9yKGtleSwgZm9yY2UgPSB0cnVlKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGNvbnN0IGdyb3VwID0gdGhpcy5ncm91cEZpZWxkc1trZXldO1xuICAgIGlmIChncm91cC5pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChncm91cC5pc1ZhbGlkID09PSB2b2lkIDAgfHwgIWZvcmNlICYmICF0aGlzLmlzU3VibWl0dGVkICYmICFncm91cC50b3VjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChncm91cC5pc1ZhbGlkKSB7XG4gICAgICBncm91cC5lbGVtcy5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICAgIHZhciBfYTIsIF9iMjtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICBlbGVtLnN0eWxlLFxuICAgICAgICAgICgoX2EyID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnN1Y2Nlc3NGaWVsZFN0eWxlKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzRmllbGRTdHlsZVxuICAgICAgICApO1xuICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgICAgLi4uZ2V0Q2xhc3NMaXN0KFxuICAgICAgICAgICAgKChfYjIgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYjIuc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3MpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZENzc0NsYXNzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBzdWNjZXNzTGFiZWwgPSB0aGlzLmNyZWF0ZVN1Y2Nlc3NMYWJlbEVsZW0oXG4gICAgICAgIGtleSxcbiAgICAgICAgZ3JvdXAuc3VjY2Vzc01lc3NhZ2UsXG4gICAgICAgIGdyb3VwLmNvbmZpZ1xuICAgICAgKTtcbiAgICAgIGlmIChzdWNjZXNzTGFiZWwpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJHcm91cExhYmVsKFxuICAgICAgICAgIGdyb3VwLmdyb3VwRWxlbSxcbiAgICAgICAgICBzdWNjZXNzTGFiZWwsXG4gICAgICAgICAgKF9hID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZXJyb3JzQ29udGFpbmVyLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgZ3JvdXAuZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgdmFyIF9hMiwgX2IyO1xuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgZWxlbS5zdHlsZSxcbiAgICAgICAgKChfYTIgPSBncm91cC5jb25maWcpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZXJyb3JGaWVsZFN0eWxlKSB8fCB0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkU3R5bGVcbiAgICAgICk7XG4gICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgIC4uLmdldENsYXNzTGlzdChcbiAgICAgICAgICAoKF9iMiA9IGdyb3VwLmNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi5lcnJvckZpZWxkQ3NzQ2xhc3MpIHx8IHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yRmllbGRDc3NDbGFzc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH0pO1xuICAgIGNvbnN0IGVycm9yTGFiZWwgPSB0aGlzLmNyZWF0ZUVycm9yTGFiZWxFbGVtKFxuICAgICAga2V5LFxuICAgICAgZ3JvdXAuZXJyb3JNZXNzYWdlLFxuICAgICAgZ3JvdXAuY29uZmlnXG4gICAgKTtcbiAgICB0aGlzLnJlbmRlckdyb3VwTGFiZWwoXG4gICAgICBncm91cC5ncm91cEVsZW0sXG4gICAgICBlcnJvckxhYmVsLFxuICAgICAgKF9iID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2IuZXJyb3JzQ29udGFpbmVyXG4gICAgKTtcbiAgICBpZiAodGhpcy5pc1Rvb2x0aXAoKSkge1xuICAgICAgdGhpcy50b29sdGlwcy5wdXNoKFxuICAgICAgICB0aGlzLnJlbmRlclRvb2x0aXAoXG4gICAgICAgICAgZ3JvdXAuZ3JvdXBFbGVtLFxuICAgICAgICAgIGVycm9yTGFiZWwsXG4gICAgICAgICAgKF9kID0gKF9jID0gZ3JvdXAuY29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogX2MudG9vbHRpcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLnBvc2l0aW9uXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJlbmRlckVycm9ycyhmb3JjZVJldmFsaWRhdGlvbiA9IGZhbHNlKSB7XG4gICAgaWYgKCF0aGlzLmlzU3VibWl0dGVkICYmICFmb3JjZVJldmFsaWRhdGlvbiAmJiAhdGhpcy5nbG9iYWxDb25maWcudmFsaWRhdGVCZWZvcmVTdWJtaXR0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY2xlYXJFcnJvcnMoKTtcbiAgICB0aGlzLmlzVmFsaWQgPSB0cnVlO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZ3JvdXBGaWVsZHMpIHtcbiAgICAgIHRoaXMucmVuZGVyR3JvdXBFcnJvcihrZXkpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmZpZWxkcykge1xuICAgICAgdGhpcy5yZW5kZXJGaWVsZEVycm9yKGtleSk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudC50eXBlLCBldmVudC5lbGVtLCBldmVudC5mdW5jKTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmN1c3RvbVN0eWxlVGFncykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICB0aGlzLmN1c3RvbVN0eWxlVGFnc1trZXldLnJlbW92ZSgpO1xuICAgIH0pO1xuICAgIHRoaXMuY2xlYXJFcnJvcnMoKTtcbiAgICBpZiAodGhpcy5nbG9iYWxDb25maWcubG9ja0Zvcm0pIHtcbiAgICAgIHRoaXMudW5sb2NrRm9ybSgpO1xuICAgIH1cbiAgfVxuICByZWZyZXNoKCkge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIGlmICghdGhpcy5mb3JtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGluaXRpYWxpemUgdGhlIGxpYnJhcnkhIEZvcm0gaXMgbm90IGRlZmluZWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSh0aGlzLmZvcm0sIHRoaXMuZ2xvYmFsQ29uZmlnKTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgZmllbGRTZWxlY3RvciA9IHRoaXMuZ2V0RmllbGRTZWxlY3RvckJ5S2V5KGtleSk7XG4gICAgICAgIGlmIChmaWVsZFNlbGVjdG9yKSB7XG4gICAgICAgICAgdGhpcy5hZGRGaWVsZChcbiAgICAgICAgICAgIGZpZWxkU2VsZWN0b3IsXG4gICAgICAgICAgICBbLi4udGhpcy5maWVsZHNba2V5XS5ydWxlc10sXG4gICAgICAgICAgICB0aGlzLmZpZWxkc1trZXldLmNvbmZpZ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBzZXRDdXJyZW50TG9jYWxlKGxvY2FsZSkge1xuICAgIGlmICh0eXBlb2YgbG9jYWxlICE9PSBcInN0cmluZ1wiICYmIGxvY2FsZSAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQ3VycmVudCBsb2NhbGUgc2hvdWxkIGJlIGEgc3RyaW5nXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRMb2NhbGUgPSBsb2NhbGU7XG4gICAgaWYgKHRoaXMuaXNTdWJtaXR0ZWQpIHtcbiAgICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cbiAgb25TdWNjZXNzKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vblN1Y2Nlc3NDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uRmFpbChjYWxsYmFjaykge1xuICAgIHRoaXMub25GYWlsQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvblZhbGlkYXRlKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5vblZhbGlkYXRlQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuZXhwb3J0IHtcbiAgQ3VzdG9tU3R5bGVUYWdJZHMsXG4gIEdyb3VwUnVsZXMsXG4gIFJ1bGVzLFxuICBKdXN0VmFsaWRhdGUgYXMgZGVmYXVsdFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/just-validate/dist/just-validate.es.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n    module.paths = [];\n    // module.parent = undefined by default\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n  return module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJsIiwiaSJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVNELE1BQU0sRUFBRTtFQUNqQyxJQUFJLENBQUNBLE1BQU0sQ0FBQ0UsZUFBZSxFQUFFO0lBQzVCRixNQUFNLENBQUNHLFNBQVMsR0FBRyxZQUFXLENBQUMsQ0FBQztJQUNoQ0gsTUFBTSxDQUFDSSxLQUFLLEdBQUcsRUFBRTtJQUNqQjtJQUNBLElBQUksQ0FBQ0osTUFBTSxDQUFDSyxRQUFRLEVBQUVMLE1BQU0sQ0FBQ0ssUUFBUSxHQUFHLEVBQUU7SUFDMUNDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDUCxNQUFNLEVBQUUsUUFBUSxFQUFFO01BQ3ZDUSxVQUFVLEVBQUUsSUFBSTtNQUNoQkMsR0FBRyxFQUFFLFNBQUFBLElBQUEsRUFBVztRQUNmLE9BQU9ULE1BQU0sQ0FBQ1UsQ0FBQztNQUNoQjtJQUNELENBQUMsQ0FBQztJQUNGSixNQUFNLENBQUNDLGNBQWMsQ0FBQ1AsTUFBTSxFQUFFLElBQUksRUFBRTtNQUNuQ1EsVUFBVSxFQUFFLElBQUk7TUFDaEJDLEdBQUcsRUFBRSxTQUFBQSxJQUFBLEVBQVc7UUFDZixPQUFPVCxNQUFNLENBQUNXLENBQUM7TUFDaEI7SUFDRCxDQUFDLENBQUM7SUFDRlgsTUFBTSxDQUFDRSxlQUFlLEdBQUcsQ0FBQztFQUMzQjtFQUNBLE9BQU9GLE1BQU07QUFDZCxDQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ 0:
/*!************************************************************************************!*\
  !*** multi ./assets/js/script.js ./assets/scss/style.scss ./assets/icons/icons.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./assets/js/script.js */"./assets/js/script.js");
__webpack_require__(/*! ./assets/scss/style.scss */"./assets/scss/style.scss");
module.exports = __webpack_require__(/*! ./assets/icons/icons.js */"./assets/icons/icons.js");


/***/ })

/******/ });